// Code generated by protoc-gen-go. DO NOT EDIT.
// source: openfeed_instrument.proto

package openfeed

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// #############################################
type InstrumentDefinition_InstrumentType int32

const (
	InstrumentDefinition_UNKNOWN_INSTRUMENT_TYPE InstrumentDefinition_InstrumentType = 0
	InstrumentDefinition_FOREX                   InstrumentDefinition_InstrumentType = 1
	InstrumentDefinition_INDEX                   InstrumentDefinition_InstrumentType = 2
	InstrumentDefinition_EQUITY                  InstrumentDefinition_InstrumentType = 3
	InstrumentDefinition_FUTURE                  InstrumentDefinition_InstrumentType = 4
	InstrumentDefinition_OPTION                  InstrumentDefinition_InstrumentType = 5
	InstrumentDefinition_SPREAD                  InstrumentDefinition_InstrumentType = 6
	InstrumentDefinition_MUTUAL_FUND             InstrumentDefinition_InstrumentType = 7
	InstrumentDefinition_MONEY_MARKET_FUND       InstrumentDefinition_InstrumentType = 8
)

var InstrumentDefinition_InstrumentType_name = map[int32]string{
	0: "UNKNOWN_INSTRUMENT_TYPE",
	1: "FOREX",
	2: "INDEX",
	3: "EQUITY",
	4: "FUTURE",
	5: "OPTION",
	6: "SPREAD",
	7: "MUTUAL_FUND",
	8: "MONEY_MARKET_FUND",
}

var InstrumentDefinition_InstrumentType_value = map[string]int32{
	"UNKNOWN_INSTRUMENT_TYPE": 0,
	"FOREX":                   1,
	"INDEX":                   2,
	"EQUITY":                  3,
	"FUTURE":                  4,
	"OPTION":                  5,
	"SPREAD":                  6,
	"MUTUAL_FUND":             7,
	"MONEY_MARKET_FUND":       8,
}

func (x InstrumentDefinition_InstrumentType) String() string {
	return proto.EnumName(InstrumentDefinition_InstrumentType_name, int32(x))
}

func (InstrumentDefinition_InstrumentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 0}
}

/// Market depth implementation type
type InstrumentDefinition_BookType int32

const (
	InstrumentDefinition_UNKNOWN_BOOK_TYPE InstrumentDefinition_BookType = 0
	// BBO
	InstrumentDefinition_TOP_OF_BOOK InstrumentDefinition_BookType = 1
	// Book uses price level
	InstrumentDefinition_PRICE_LEVEL_DEPTH InstrumentDefinition_BookType = 2
	// Book uses order-id
	InstrumentDefinition_ORDER_DEPTH InstrumentDefinition_BookType = 3
)

var InstrumentDefinition_BookType_name = map[int32]string{
	0: "UNKNOWN_BOOK_TYPE",
	1: "TOP_OF_BOOK",
	2: "PRICE_LEVEL_DEPTH",
	3: "ORDER_DEPTH",
}

var InstrumentDefinition_BookType_value = map[string]int32{
	"UNKNOWN_BOOK_TYPE": 0,
	"TOP_OF_BOOK":       1,
	"PRICE_LEVEL_DEPTH": 2,
	"ORDER_DEPTH":       3,
}

func (x InstrumentDefinition_BookType) String() string {
	return proto.EnumName(InstrumentDefinition_BookType_name, int32(x))
}

func (InstrumentDefinition_BookType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 1}
}

/// Option type.
type InstrumentDefinition_OptionType int32

const (
	InstrumentDefinition_UNKNOWN_OPTION_TYPE InstrumentDefinition_OptionType = 0
	InstrumentDefinition_CALL                InstrumentDefinition_OptionType = 1
	InstrumentDefinition_PUT                 InstrumentDefinition_OptionType = 2
)

var InstrumentDefinition_OptionType_name = map[int32]string{
	0: "UNKNOWN_OPTION_TYPE",
	1: "CALL",
	2: "PUT",
}

var InstrumentDefinition_OptionType_value = map[string]int32{
	"UNKNOWN_OPTION_TYPE": 0,
	"CALL":                1,
	"PUT":                 2,
}

func (x InstrumentDefinition_OptionType) String() string {
	return proto.EnumName(InstrumentDefinition_OptionType_name, int32(x))
}

func (InstrumentDefinition_OptionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 2}
}

/// Option style.
type InstrumentDefinition_OptionStyle int32

const (
	InstrumentDefinition_UNKNOWN_OPTIONS_STYLE InstrumentDefinition_OptionStyle = 0
	InstrumentDefinition_DEFAULT               InstrumentDefinition_OptionStyle = 1
	InstrumentDefinition_AMERICAN              InstrumentDefinition_OptionStyle = 2
	InstrumentDefinition_EUROPEAN              InstrumentDefinition_OptionStyle = 3
)

var InstrumentDefinition_OptionStyle_name = map[int32]string{
	0: "UNKNOWN_OPTIONS_STYLE",
	1: "DEFAULT",
	2: "AMERICAN",
	3: "EUROPEAN",
}

var InstrumentDefinition_OptionStyle_value = map[string]int32{
	"UNKNOWN_OPTIONS_STYLE": 0,
	"DEFAULT":               1,
	"AMERICAN":              2,
	"EUROPEAN":              3,
}

func (x InstrumentDefinition_OptionStyle) String() string {
	return proto.EnumName(InstrumentDefinition_OptionStyle_name, int32(x))
}

func (InstrumentDefinition_OptionStyle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 3}
}

type InstrumentDefinition_State int32

const (
	InstrumentDefinition_UNKNOWN_STATE InstrumentDefinition_State = 0
	InstrumentDefinition_ACTIVE        InstrumentDefinition_State = 1
	InstrumentDefinition_PASSIVE       InstrumentDefinition_State = 2
)

var InstrumentDefinition_State_name = map[int32]string{
	0: "UNKNOWN_STATE",
	1: "ACTIVE",
	2: "PASSIVE",
}

var InstrumentDefinition_State_value = map[string]int32{
	"UNKNOWN_STATE": 0,
	"ACTIVE":        1,
	"PASSIVE":       2,
}

func (x InstrumentDefinition_State) String() string {
	return proto.EnumName(InstrumentDefinition_State_name, int32(x))
}

func (InstrumentDefinition_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 4}
}

type InstrumentDefinition_EventType int32

const (
	InstrumentDefinition_UNKNOWN_EVENT_TYPE InstrumentDefinition_EventType = 0
	// All instruments
	InstrumentDefinition_FIRST_TRADE_DATE InstrumentDefinition_EventType = 1
	InstrumentDefinition_LAST_TRADE_DATE  InstrumentDefinition_EventType = 2
	// Futures only
	InstrumentDefinition_SETTLEMENT_DATE     InstrumentDefinition_EventType = 10
	InstrumentDefinition_FIRST_DELIVERY_DATE InstrumentDefinition_EventType = 11
	InstrumentDefinition_LAST_DELIVERY_DATE  InstrumentDefinition_EventType = 12
	InstrumentDefinition_FIRST_NOTICE_DATE   InstrumentDefinition_EventType = 13
	InstrumentDefinition_LAST_NOTICE_DATE    InstrumentDefinition_EventType = 14
	InstrumentDefinition_FIRST_HOLDING_DATE  InstrumentDefinition_EventType = 15
	InstrumentDefinition_LAST_HOLDING_DATE   InstrumentDefinition_EventType = 16
	InstrumentDefinition_FIRST_POSITION_DATE InstrumentDefinition_EventType = 17
	InstrumentDefinition_LAST_POSITION_DATE  InstrumentDefinition_EventType = 18
)

var InstrumentDefinition_EventType_name = map[int32]string{
	0:  "UNKNOWN_EVENT_TYPE",
	1:  "FIRST_TRADE_DATE",
	2:  "LAST_TRADE_DATE",
	10: "SETTLEMENT_DATE",
	11: "FIRST_DELIVERY_DATE",
	12: "LAST_DELIVERY_DATE",
	13: "FIRST_NOTICE_DATE",
	14: "LAST_NOTICE_DATE",
	15: "FIRST_HOLDING_DATE",
	16: "LAST_HOLDING_DATE",
	17: "FIRST_POSITION_DATE",
	18: "LAST_POSITION_DATE",
}

var InstrumentDefinition_EventType_value = map[string]int32{
	"UNKNOWN_EVENT_TYPE":  0,
	"FIRST_TRADE_DATE":    1,
	"LAST_TRADE_DATE":     2,
	"SETTLEMENT_DATE":     10,
	"FIRST_DELIVERY_DATE": 11,
	"LAST_DELIVERY_DATE":  12,
	"FIRST_NOTICE_DATE":   13,
	"LAST_NOTICE_DATE":    14,
	"FIRST_HOLDING_DATE":  15,
	"LAST_HOLDING_DATE":   16,
	"FIRST_POSITION_DATE": 17,
	"LAST_POSITION_DATE":  18,
}

func (x InstrumentDefinition_EventType) String() string {
	return proto.EnumName(InstrumentDefinition_EventType_name, int32(x))
}

func (InstrumentDefinition_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 5}
}

type InstrumentDefinition_PriceFormat_SubFormat int32

const (
	InstrumentDefinition_PriceFormat_FLAT       InstrumentDefinition_PriceFormat_SubFormat = 0
	InstrumentDefinition_PriceFormat_FRACTIONAL InstrumentDefinition_PriceFormat_SubFormat = 1
	InstrumentDefinition_PriceFormat_DECIMAL    InstrumentDefinition_PriceFormat_SubFormat = 2
)

var InstrumentDefinition_PriceFormat_SubFormat_name = map[int32]string{
	0: "FLAT",
	1: "FRACTIONAL",
	2: "DECIMAL",
}

var InstrumentDefinition_PriceFormat_SubFormat_value = map[string]int32{
	"FLAT":       0,
	"FRACTIONAL": 1,
	"DECIMAL":    2,
}

func (x InstrumentDefinition_PriceFormat_SubFormat) String() string {
	return proto.EnumName(InstrumentDefinition_PriceFormat_SubFormat_name, int32(x))
}

func (InstrumentDefinition_PriceFormat_SubFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 7, 0}
}

type InstrumentDefinition struct {
	/// Unique ID used in the data feed.
	MarketId int64 `protobuf:"zigzag64,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	/// Instrument type as enum...
	InstrumentType InstrumentDefinition_InstrumentType `protobuf:"varint,2,opt,name=instrumentType,proto3,enum=org.openfeed.InstrumentDefinition_InstrumentType" json:"instrumentType,omitempty"`
	/// Supported Book Types
	SupportBookTypes []InstrumentDefinition_BookType `protobuf:"varint,3,rep,packed,name=supportBookTypes,proto3,enum=org.openfeed.InstrumentDefinition_BookType" json:"supportBookTypes,omitempty"`
	/// Maximum depth of market-by-price order book
	BookDepth int32 `protobuf:"zigzag32,4,opt,name=bookDepth,proto3" json:"bookDepth,omitempty"`
	/// The name of the market data vendor
	VendorId string `protobuf:"bytes,5,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	/// Human readable market symbol, assigned by the exchange or venue.
	// Not necessarily unique as the exchange or vendor could assign the same symbol to different
	// instruments, for example if the instruments trade on different exchanges.
	Symbol string `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`
	/// Human readable market description.
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	/// Market CFI code: http://en.wikipedia.org/wiki/ISO_10962
	CfiCode string `protobuf:"bytes,8,opt,name=cfiCode,proto3" json:"cfiCode,omitempty"`
	/// Market currency code: http://en.wikipedia.org/wiki/ISO_4217
	CurrencyCode string `protobuf:"bytes,9,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	// Market exchange code: http://en.wikipedia.org/wiki/ISO_10383
	// For inter-exchange spreads, use the leg MICs separated by a hyphen
	ExchangeCode string `protobuf:"bytes,10,opt,name=exchangeCode,proto3" json:"exchangeCode,omitempty"`
	/// Minimum price increment in market currency.
	MinimumPriceIncrement float32 `protobuf:"fixed32,11,opt,name=minimumPriceIncrement,proto3" json:"minimumPriceIncrement,omitempty"`
	/// Contract point value in market currency.
	ContractPointValue float32 `protobuf:"fixed32,12,opt,name=contractPointValue,proto3" json:"contractPointValue,omitempty"`
	/// Trading schedule for a typical week
	Schedule *InstrumentDefinition_Schedule `protobuf:"bytes,13,opt,name=schedule,proto3" json:"schedule,omitempty"`
	/// Trading calendar (expiration, notice days, holidays?, etc)
	Calendar *InstrumentDefinition_Calendar `protobuf:"bytes,14,opt,name=calendar,proto3" json:"calendar,omitempty"`
	/// UTC Timestamp of creation, nano seconds since Unix epoch
	RecordCreateTime int64 `protobuf:"zigzag64,15,opt,name=recordCreateTime,proto3" json:"recordCreateTime,omitempty"`
	/// UTC Timestamp of update, nano seconds since Unix epoch
	RecordUpdateTime int64 `protobuf:"zigzag64,16,opt,name=recordUpdateTime,proto3" json:"recordUpdateTime,omitempty"`
	/// Market time zone TZ database name.
	// Permanent. Can be resolved into timeZoneOffset for given date/time.
	// See http://joda-time.sourceforge.net/timezones.html
	// See http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
	TimeZoneName string `protobuf:"bytes,17,opt,name=timeZoneName,proto3" json:"timeZoneName,omitempty"`
	/// Identifies a logical grouping of instruments. By product, for example.
	InstrumentGroup string `protobuf:"bytes,18,opt,name=instrumentGroup,proto3" json:"instrumentGroup,omitempty"`
	/// The Date of expiration for futures and options.
	SymbolExpiration *InstrumentDefinition_MaturityDate `protobuf:"bytes,19,opt,name=symbolExpiration,proto3" json:"symbolExpiration,omitempty"`
	/// active: can have market state updates, can have historical data
	// passive: can NOT have market state updates, but can have historical data
	// normally "active" means newly listed or currently non expired markets
	// normally "passive" means expired options, de-listed equities, etc.
	State InstrumentDefinition_State `protobuf:"varint,20,opt,name=state,proto3,enum=org.openfeed.InstrumentDefinition_State" json:"state,omitempty"`
	/// The channel that updates for this instrument will appear on.
	Channel int32 `protobuf:"zigzag32,21,opt,name=channel,proto3" json:"channel,omitempty"`
	/// The marketId of the underlying asset.
	// Used by Futures and Options when the underlying instrument is defined by the vendor
	UnderlyingMarketId int64 `protobuf:"zigzag64,22,opt,name=underlyingMarketId,proto3" json:"underlyingMarketId,omitempty"`
	/// Display format
	PriceFormat *InstrumentDefinition_PriceFormat `protobuf:"bytes,23,opt,name=priceFormat,proto3" json:"priceFormat,omitempty"`
	/// Strike price display format
	OptionStrikePriceFormat *InstrumentDefinition_PriceFormat `protobuf:"bytes,24,opt,name=optionStrikePriceFormat,proto3" json:"optionStrikePriceFormat,omitempty"`
	/// Divide prices by this value to get real price values
	PriceDenominator int32 `protobuf:"zigzag32,28,opt,name=priceDenominator,proto3" json:"priceDenominator,omitempty"`
	/// Divide trade quantities by this value to get real quantities
	QuantityDenominator int32 `protobuf:"zigzag32,29,opt,name=quantityDenominator,proto3" json:"quantityDenominator,omitempty"`
	/// true if this is a tradable instrument
	IsTradable bool `protobuf:"varint,30,opt,name=isTradable,proto3" json:"isTradable,omitempty"`
	/// UTC timestamp of transaction, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,50,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// For internal use only.   Ignore
	AuxiliaryData []byte `protobuf:"bytes,99,opt,name=auxiliaryData,proto3" json:"auxiliaryData,omitempty"`
	/// List of alternate symbols for this instrument.  A single instrument
	// may be provided by many different market data vendors, each with
	// their own unique symbology. Allows this instrument to be tagged
	// with as many vendor symbols as necessary.
	Symbols []*InstrumentDefinition_Symbol `protobuf:"bytes,100,rep,name=symbols,proto3" json:"symbols,omitempty"`
	/// Option strike price in market currency.  Multiply by
	/// factorOptionsStrike to get actual strike
	OptionStrike int64 `protobuf:"zigzag64,200,opt,name=optionStrike,proto3" json:"optionStrike,omitempty"`
	/// Option type: call vs put.
	OptionType InstrumentDefinition_OptionType `protobuf:"varint,202,opt,name=optionType,proto3,enum=org.openfeed.InstrumentDefinition_OptionType" json:"optionType,omitempty"`
	/// Option style : American vs European.
	OptionStyle InstrumentDefinition_OptionStyle `protobuf:"varint,203,opt,name=optionStyle,proto3,enum=org.openfeed.InstrumentDefinition_OptionStyle" json:"optionStyle,omitempty"`
	/// Divide optionStrike by this value to get real strike price
	OptionStrikeDenominator int32 `protobuf:"zigzag32,204,opt,name=optionStrikeDenominator,proto3" json:"optionStrikeDenominator,omitempty"`
	/// Spread type, can be vendor specific
	SpreadCode string `protobuf:"bytes,210,opt,name=spreadCode,proto3" json:"spreadCode,omitempty"`
	/// Ordered list of underlying legs in a spread.
	SpreadLeg []*InstrumentDefinition_SpreadLeg `protobuf:"bytes,211,rep,name=spreadLeg,proto3" json:"spreadLeg,omitempty"`
	/// true if user defined spread
	UserDefinedSpread bool `protobuf:"varint,212,opt,name=userDefinedSpread,proto3" json:"userDefinedSpread,omitempty"`
	/// Listing market classification
	MarketTier string `protobuf:"bytes,213,opt,name=marketTier,proto3" json:"marketTier,omitempty"`
	/// Current financial status of the issuer
	FinancialStatusIndicator string `protobuf:"bytes,214,opt,name=financialStatusIndicator,proto3" json:"financialStatusIndicator,omitempty"`
	/// ISIN: https://en.wikipedia.org/wiki/International_Securities_Identification_Number
	Isin string `protobuf:"bytes,215,opt,name=isin,proto3" json:"isin,omitempty"`
	/// Break out of currency pair
	CurrencyPair *InstrumentDefinition_CurrencyPair `protobuf:"bytes,216,opt,name=currencyPair,proto3" json:"currencyPair,omitempty"`
	/// true if exchange sends volume.
	ExchangeSendsVolume bool `protobuf:"varint,217,opt,name=exchangeSendsVolume,proto3" json:"exchangeSendsVolume,omitempty"`
	/// true if exchange sends high.
	ExchangeSendsHigh bool `protobuf:"varint,218,opt,name=exchangeSendsHigh,proto3" json:"exchangeSendsHigh,omitempty"`
	/// true if exchange sends low.
	ExchangeSendsLow bool `protobuf:"varint,219,opt,name=exchangeSendsLow,proto3" json:"exchangeSendsLow,omitempty"`
	/// true if exchange sends open.
	ExchangeSendsOpen bool `protobuf:"varint,220,opt,name=exchangeSendsOpen,proto3" json:"exchangeSendsOpen,omitempty"`
	/// true if this instrument represents consolidated NBBO.
	ConsolidatedFeedInstrument bool `protobuf:"varint,221,opt,name=consolidatedFeedInstrument,proto3" json:"consolidatedFeedInstrument,omitempty"`
	/// true if this instrument represents Pit symbol.
	OpenOutcryInstrument bool `protobuf:"varint,222,opt,name=openOutcryInstrument,proto3" json:"openOutcryInstrument,omitempty"`
	/// true if this instrument generated FX option.
	SyntheticAmericanOptionInstrument bool `protobuf:"varint,223,opt,name=syntheticAmericanOptionInstrument,proto3" json:"syntheticAmericanOptionInstrument,omitempty"`
	///
	BarchartExchangeCode string `protobuf:"bytes,224,opt,name=barchartExchangeCode,proto3" json:"barchartExchangeCode,omitempty"`
	///
	BarchartBaseCode string `protobuf:"bytes,225,opt,name=barchartBaseCode,proto3" json:"barchartBaseCode,omitempty"`
	///
	VolumeDenominator int32 `protobuf:"zigzag32,226,opt,name=volumeDenominator,proto3" json:"volumeDenominator,omitempty"`
	///
	BidOfferQuantityDenominator int32    `protobuf:"zigzag32,227,opt,name=bidOfferQuantityDenominator,proto3" json:"bidOfferQuantityDenominator,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *InstrumentDefinition) Reset()         { *m = InstrumentDefinition{} }
func (m *InstrumentDefinition) String() string { return proto.CompactTextString(m) }
func (*InstrumentDefinition) ProtoMessage()    {}
func (*InstrumentDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0}
}

func (m *InstrumentDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentDefinition.Unmarshal(m, b)
}
func (m *InstrumentDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentDefinition.Marshal(b, m, deterministic)
}
func (m *InstrumentDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentDefinition.Merge(m, src)
}
func (m *InstrumentDefinition) XXX_Size() int {
	return xxx_messageInfo_InstrumentDefinition.Size(m)
}
func (m *InstrumentDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentDefinition proto.InternalMessageInfo

func (m *InstrumentDefinition) GetMarketId() int64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *InstrumentDefinition) GetInstrumentType() InstrumentDefinition_InstrumentType {
	if m != nil {
		return m.InstrumentType
	}
	return InstrumentDefinition_UNKNOWN_INSTRUMENT_TYPE
}

func (m *InstrumentDefinition) GetSupportBookTypes() []InstrumentDefinition_BookType {
	if m != nil {
		return m.SupportBookTypes
	}
	return nil
}

func (m *InstrumentDefinition) GetBookDepth() int32 {
	if m != nil {
		return m.BookDepth
	}
	return 0
}

func (m *InstrumentDefinition) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *InstrumentDefinition) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *InstrumentDefinition) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *InstrumentDefinition) GetCfiCode() string {
	if m != nil {
		return m.CfiCode
	}
	return ""
}

func (m *InstrumentDefinition) GetCurrencyCode() string {
	if m != nil {
		return m.CurrencyCode
	}
	return ""
}

func (m *InstrumentDefinition) GetExchangeCode() string {
	if m != nil {
		return m.ExchangeCode
	}
	return ""
}

func (m *InstrumentDefinition) GetMinimumPriceIncrement() float32 {
	if m != nil {
		return m.MinimumPriceIncrement
	}
	return 0
}

func (m *InstrumentDefinition) GetContractPointValue() float32 {
	if m != nil {
		return m.ContractPointValue
	}
	return 0
}

func (m *InstrumentDefinition) GetSchedule() *InstrumentDefinition_Schedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (m *InstrumentDefinition) GetCalendar() *InstrumentDefinition_Calendar {
	if m != nil {
		return m.Calendar
	}
	return nil
}

func (m *InstrumentDefinition) GetRecordCreateTime() int64 {
	if m != nil {
		return m.RecordCreateTime
	}
	return 0
}

func (m *InstrumentDefinition) GetRecordUpdateTime() int64 {
	if m != nil {
		return m.RecordUpdateTime
	}
	return 0
}

func (m *InstrumentDefinition) GetTimeZoneName() string {
	if m != nil {
		return m.TimeZoneName
	}
	return ""
}

func (m *InstrumentDefinition) GetInstrumentGroup() string {
	if m != nil {
		return m.InstrumentGroup
	}
	return ""
}

func (m *InstrumentDefinition) GetSymbolExpiration() *InstrumentDefinition_MaturityDate {
	if m != nil {
		return m.SymbolExpiration
	}
	return nil
}

func (m *InstrumentDefinition) GetState() InstrumentDefinition_State {
	if m != nil {
		return m.State
	}
	return InstrumentDefinition_UNKNOWN_STATE
}

func (m *InstrumentDefinition) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *InstrumentDefinition) GetUnderlyingMarketId() int64 {
	if m != nil {
		return m.UnderlyingMarketId
	}
	return 0
}

func (m *InstrumentDefinition) GetPriceFormat() *InstrumentDefinition_PriceFormat {
	if m != nil {
		return m.PriceFormat
	}
	return nil
}

func (m *InstrumentDefinition) GetOptionStrikePriceFormat() *InstrumentDefinition_PriceFormat {
	if m != nil {
		return m.OptionStrikePriceFormat
	}
	return nil
}

func (m *InstrumentDefinition) GetPriceDenominator() int32 {
	if m != nil {
		return m.PriceDenominator
	}
	return 0
}

func (m *InstrumentDefinition) GetQuantityDenominator() int32 {
	if m != nil {
		return m.QuantityDenominator
	}
	return 0
}

func (m *InstrumentDefinition) GetIsTradable() bool {
	if m != nil {
		return m.IsTradable
	}
	return false
}

func (m *InstrumentDefinition) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *InstrumentDefinition) GetAuxiliaryData() []byte {
	if m != nil {
		return m.AuxiliaryData
	}
	return nil
}

func (m *InstrumentDefinition) GetSymbols() []*InstrumentDefinition_Symbol {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *InstrumentDefinition) GetOptionStrike() int64 {
	if m != nil {
		return m.OptionStrike
	}
	return 0
}

func (m *InstrumentDefinition) GetOptionType() InstrumentDefinition_OptionType {
	if m != nil {
		return m.OptionType
	}
	return InstrumentDefinition_UNKNOWN_OPTION_TYPE
}

func (m *InstrumentDefinition) GetOptionStyle() InstrumentDefinition_OptionStyle {
	if m != nil {
		return m.OptionStyle
	}
	return InstrumentDefinition_UNKNOWN_OPTIONS_STYLE
}

func (m *InstrumentDefinition) GetOptionStrikeDenominator() int32 {
	if m != nil {
		return m.OptionStrikeDenominator
	}
	return 0
}

func (m *InstrumentDefinition) GetSpreadCode() string {
	if m != nil {
		return m.SpreadCode
	}
	return ""
}

func (m *InstrumentDefinition) GetSpreadLeg() []*InstrumentDefinition_SpreadLeg {
	if m != nil {
		return m.SpreadLeg
	}
	return nil
}

func (m *InstrumentDefinition) GetUserDefinedSpread() bool {
	if m != nil {
		return m.UserDefinedSpread
	}
	return false
}

func (m *InstrumentDefinition) GetMarketTier() string {
	if m != nil {
		return m.MarketTier
	}
	return ""
}

func (m *InstrumentDefinition) GetFinancialStatusIndicator() string {
	if m != nil {
		return m.FinancialStatusIndicator
	}
	return ""
}

func (m *InstrumentDefinition) GetIsin() string {
	if m != nil {
		return m.Isin
	}
	return ""
}

func (m *InstrumentDefinition) GetCurrencyPair() *InstrumentDefinition_CurrencyPair {
	if m != nil {
		return m.CurrencyPair
	}
	return nil
}

func (m *InstrumentDefinition) GetExchangeSendsVolume() bool {
	if m != nil {
		return m.ExchangeSendsVolume
	}
	return false
}

func (m *InstrumentDefinition) GetExchangeSendsHigh() bool {
	if m != nil {
		return m.ExchangeSendsHigh
	}
	return false
}

func (m *InstrumentDefinition) GetExchangeSendsLow() bool {
	if m != nil {
		return m.ExchangeSendsLow
	}
	return false
}

func (m *InstrumentDefinition) GetExchangeSendsOpen() bool {
	if m != nil {
		return m.ExchangeSendsOpen
	}
	return false
}

func (m *InstrumentDefinition) GetConsolidatedFeedInstrument() bool {
	if m != nil {
		return m.ConsolidatedFeedInstrument
	}
	return false
}

func (m *InstrumentDefinition) GetOpenOutcryInstrument() bool {
	if m != nil {
		return m.OpenOutcryInstrument
	}
	return false
}

func (m *InstrumentDefinition) GetSyntheticAmericanOptionInstrument() bool {
	if m != nil {
		return m.SyntheticAmericanOptionInstrument
	}
	return false
}

func (m *InstrumentDefinition) GetBarchartExchangeCode() string {
	if m != nil {
		return m.BarchartExchangeCode
	}
	return ""
}

func (m *InstrumentDefinition) GetBarchartBaseCode() string {
	if m != nil {
		return m.BarchartBaseCode
	}
	return ""
}

func (m *InstrumentDefinition) GetVolumeDenominator() int32 {
	if m != nil {
		return m.VolumeDenominator
	}
	return 0
}

func (m *InstrumentDefinition) GetBidOfferQuantityDenominator() int32 {
	if m != nil {
		return m.BidOfferQuantityDenominator
	}
	return 0
}

/// Typical trading week schedule
type InstrumentDefinition_Schedule struct {
	Sessions             []*InstrumentDefinition_TimeSpan `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *InstrumentDefinition_Schedule) Reset()         { *m = InstrumentDefinition_Schedule{} }
func (m *InstrumentDefinition_Schedule) String() string { return proto.CompactTextString(m) }
func (*InstrumentDefinition_Schedule) ProtoMessage()    {}
func (*InstrumentDefinition_Schedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 0}
}

func (m *InstrumentDefinition_Schedule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentDefinition_Schedule.Unmarshal(m, b)
}
func (m *InstrumentDefinition_Schedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentDefinition_Schedule.Marshal(b, m, deterministic)
}
func (m *InstrumentDefinition_Schedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentDefinition_Schedule.Merge(m, src)
}
func (m *InstrumentDefinition_Schedule) XXX_Size() int {
	return xxx_messageInfo_InstrumentDefinition_Schedule.Size(m)
}
func (m *InstrumentDefinition_Schedule) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentDefinition_Schedule.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentDefinition_Schedule proto.InternalMessageInfo

func (m *InstrumentDefinition_Schedule) GetSessions() []*InstrumentDefinition_TimeSpan {
	if m != nil {
		return m.Sessions
	}
	return nil
}

/// Trading session
// Times are in nanos since midnight UTC on the Sunday starting a given trading week
type InstrumentDefinition_TimeSpan struct {
	TimeStart            int64    `protobuf:"zigzag64,1,opt,name=timeStart,proto3" json:"timeStart,omitempty"`
	TimeFinish           int64    `protobuf:"zigzag64,2,opt,name=timeFinish,proto3" json:"timeFinish,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentDefinition_TimeSpan) Reset()         { *m = InstrumentDefinition_TimeSpan{} }
func (m *InstrumentDefinition_TimeSpan) String() string { return proto.CompactTextString(m) }
func (*InstrumentDefinition_TimeSpan) ProtoMessage()    {}
func (*InstrumentDefinition_TimeSpan) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 1}
}

func (m *InstrumentDefinition_TimeSpan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentDefinition_TimeSpan.Unmarshal(m, b)
}
func (m *InstrumentDefinition_TimeSpan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentDefinition_TimeSpan.Marshal(b, m, deterministic)
}
func (m *InstrumentDefinition_TimeSpan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentDefinition_TimeSpan.Merge(m, src)
}
func (m *InstrumentDefinition_TimeSpan) XXX_Size() int {
	return xxx_messageInfo_InstrumentDefinition_TimeSpan.Size(m)
}
func (m *InstrumentDefinition_TimeSpan) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentDefinition_TimeSpan.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentDefinition_TimeSpan proto.InternalMessageInfo

func (m *InstrumentDefinition_TimeSpan) GetTimeStart() int64 {
	if m != nil {
		return m.TimeStart
	}
	return 0
}

func (m *InstrumentDefinition_TimeSpan) GetTimeFinish() int64 {
	if m != nil {
		return m.TimeFinish
	}
	return 0
}

type InstrumentDefinition_Calendar struct {
	Events               []*InstrumentDefinition_Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *InstrumentDefinition_Calendar) Reset()         { *m = InstrumentDefinition_Calendar{} }
func (m *InstrumentDefinition_Calendar) String() string { return proto.CompactTextString(m) }
func (*InstrumentDefinition_Calendar) ProtoMessage()    {}
func (*InstrumentDefinition_Calendar) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 2}
}

func (m *InstrumentDefinition_Calendar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentDefinition_Calendar.Unmarshal(m, b)
}
func (m *InstrumentDefinition_Calendar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentDefinition_Calendar.Marshal(b, m, deterministic)
}
func (m *InstrumentDefinition_Calendar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentDefinition_Calendar.Merge(m, src)
}
func (m *InstrumentDefinition_Calendar) XXX_Size() int {
	return xxx_messageInfo_InstrumentDefinition_Calendar.Size(m)
}
func (m *InstrumentDefinition_Calendar) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentDefinition_Calendar.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentDefinition_Calendar proto.InternalMessageInfo

func (m *InstrumentDefinition_Calendar) GetEvents() []*InstrumentDefinition_Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type InstrumentDefinition_Event struct {
	Type                 InstrumentDefinition_EventType `protobuf:"varint,1,opt,name=type,proto3,enum=org.openfeed.InstrumentDefinition_EventType" json:"type,omitempty"`
	Date                 int64                          `protobuf:"zigzag64,2,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *InstrumentDefinition_Event) Reset()         { *m = InstrumentDefinition_Event{} }
func (m *InstrumentDefinition_Event) String() string { return proto.CompactTextString(m) }
func (*InstrumentDefinition_Event) ProtoMessage()    {}
func (*InstrumentDefinition_Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 3}
}

func (m *InstrumentDefinition_Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentDefinition_Event.Unmarshal(m, b)
}
func (m *InstrumentDefinition_Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentDefinition_Event.Marshal(b, m, deterministic)
}
func (m *InstrumentDefinition_Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentDefinition_Event.Merge(m, src)
}
func (m *InstrumentDefinition_Event) XXX_Size() int {
	return xxx_messageInfo_InstrumentDefinition_Event.Size(m)
}
func (m *InstrumentDefinition_Event) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentDefinition_Event.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentDefinition_Event proto.InternalMessageInfo

func (m *InstrumentDefinition_Event) GetType() InstrumentDefinition_EventType {
	if m != nil {
		return m.Type
	}
	return InstrumentDefinition_UNKNOWN_EVENT_TYPE
}

func (m *InstrumentDefinition_Event) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

type InstrumentDefinition_SpreadLeg struct {
	// The marketId of the leg
	MarketId int64 `protobuf:"zigzag64,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	// The ratio of the this leg with respect to the spread.
	// Negative means short the absolute value, positive means long the absolute value.
	// FIXME? Alternatively, we could have separate LONG/SHORT indicator in the message
	// and use this field as only the absolute value
	Ratio                int32    `protobuf:"zigzag32,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Symbol               string   `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentDefinition_SpreadLeg) Reset()         { *m = InstrumentDefinition_SpreadLeg{} }
func (m *InstrumentDefinition_SpreadLeg) String() string { return proto.CompactTextString(m) }
func (*InstrumentDefinition_SpreadLeg) ProtoMessage()    {}
func (*InstrumentDefinition_SpreadLeg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 4}
}

func (m *InstrumentDefinition_SpreadLeg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentDefinition_SpreadLeg.Unmarshal(m, b)
}
func (m *InstrumentDefinition_SpreadLeg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentDefinition_SpreadLeg.Marshal(b, m, deterministic)
}
func (m *InstrumentDefinition_SpreadLeg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentDefinition_SpreadLeg.Merge(m, src)
}
func (m *InstrumentDefinition_SpreadLeg) XXX_Size() int {
	return xxx_messageInfo_InstrumentDefinition_SpreadLeg.Size(m)
}
func (m *InstrumentDefinition_SpreadLeg) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentDefinition_SpreadLeg.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentDefinition_SpreadLeg proto.InternalMessageInfo

func (m *InstrumentDefinition_SpreadLeg) GetMarketId() int64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *InstrumentDefinition_SpreadLeg) GetRatio() int32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (m *InstrumentDefinition_SpreadLeg) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

/// Date and time with time zone.
type InstrumentDefinition_MaturityDate struct {
	// Year of century.
	Year int32 `protobuf:"zigzag32,1,opt,name=year,proto3" json:"year,omitempty"`
	// Month of year.
	Month int32 `protobuf:"zigzag32,2,opt,name=month,proto3" json:"month,omitempty"`
	// Day of month.
	Day                  int32    `protobuf:"zigzag32,3,opt,name=day,proto3" json:"day,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentDefinition_MaturityDate) Reset()         { *m = InstrumentDefinition_MaturityDate{} }
func (m *InstrumentDefinition_MaturityDate) String() string { return proto.CompactTextString(m) }
func (*InstrumentDefinition_MaturityDate) ProtoMessage()    {}
func (*InstrumentDefinition_MaturityDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 5}
}

func (m *InstrumentDefinition_MaturityDate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentDefinition_MaturityDate.Unmarshal(m, b)
}
func (m *InstrumentDefinition_MaturityDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentDefinition_MaturityDate.Marshal(b, m, deterministic)
}
func (m *InstrumentDefinition_MaturityDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentDefinition_MaturityDate.Merge(m, src)
}
func (m *InstrumentDefinition_MaturityDate) XXX_Size() int {
	return xxx_messageInfo_InstrumentDefinition_MaturityDate.Size(m)
}
func (m *InstrumentDefinition_MaturityDate) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentDefinition_MaturityDate.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentDefinition_MaturityDate proto.InternalMessageInfo

func (m *InstrumentDefinition_MaturityDate) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *InstrumentDefinition_MaturityDate) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *InstrumentDefinition_MaturityDate) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

/// A vendor's symbol for an instrument
type InstrumentDefinition_Symbol struct {
	// The vendor that provides this symbol.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// The symbol assigned by the vendor.
	Symbol               string   `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentDefinition_Symbol) Reset()         { *m = InstrumentDefinition_Symbol{} }
func (m *InstrumentDefinition_Symbol) String() string { return proto.CompactTextString(m) }
func (*InstrumentDefinition_Symbol) ProtoMessage()    {}
func (*InstrumentDefinition_Symbol) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 6}
}

func (m *InstrumentDefinition_Symbol) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentDefinition_Symbol.Unmarshal(m, b)
}
func (m *InstrumentDefinition_Symbol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentDefinition_Symbol.Marshal(b, m, deterministic)
}
func (m *InstrumentDefinition_Symbol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentDefinition_Symbol.Merge(m, src)
}
func (m *InstrumentDefinition_Symbol) XXX_Size() int {
	return xxx_messageInfo_InstrumentDefinition_Symbol.Size(m)
}
func (m *InstrumentDefinition_Symbol) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentDefinition_Symbol.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentDefinition_Symbol proto.InternalMessageInfo

func (m *InstrumentDefinition_Symbol) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *InstrumentDefinition_Symbol) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

/// Recommended display format for prices.
type InstrumentDefinition_PriceFormat struct {
	IsFractional         bool                                       `protobuf:"varint,1,opt,name=isFractional,proto3" json:"isFractional,omitempty"`
	Denominator          int32                                      `protobuf:"zigzag32,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
	SubDenominator       int32                                      `protobuf:"zigzag32,4,opt,name=subDenominator,proto3" json:"subDenominator,omitempty"`
	SubFormat            InstrumentDefinition_PriceFormat_SubFormat `protobuf:"varint,6,opt,name=subFormat,proto3,enum=org.openfeed.InstrumentDefinition_PriceFormat_SubFormat" json:"subFormat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *InstrumentDefinition_PriceFormat) Reset()         { *m = InstrumentDefinition_PriceFormat{} }
func (m *InstrumentDefinition_PriceFormat) String() string { return proto.CompactTextString(m) }
func (*InstrumentDefinition_PriceFormat) ProtoMessage()    {}
func (*InstrumentDefinition_PriceFormat) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 7}
}

func (m *InstrumentDefinition_PriceFormat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentDefinition_PriceFormat.Unmarshal(m, b)
}
func (m *InstrumentDefinition_PriceFormat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentDefinition_PriceFormat.Marshal(b, m, deterministic)
}
func (m *InstrumentDefinition_PriceFormat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentDefinition_PriceFormat.Merge(m, src)
}
func (m *InstrumentDefinition_PriceFormat) XXX_Size() int {
	return xxx_messageInfo_InstrumentDefinition_PriceFormat.Size(m)
}
func (m *InstrumentDefinition_PriceFormat) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentDefinition_PriceFormat.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentDefinition_PriceFormat proto.InternalMessageInfo

func (m *InstrumentDefinition_PriceFormat) GetIsFractional() bool {
	if m != nil {
		return m.IsFractional
	}
	return false
}

func (m *InstrumentDefinition_PriceFormat) GetDenominator() int32 {
	if m != nil {
		return m.Denominator
	}
	return 0
}

func (m *InstrumentDefinition_PriceFormat) GetSubDenominator() int32 {
	if m != nil {
		return m.SubDenominator
	}
	return 0
}

func (m *InstrumentDefinition_PriceFormat) GetSubFormat() InstrumentDefinition_PriceFormat_SubFormat {
	if m != nil {
		return m.SubFormat
	}
	return InstrumentDefinition_PriceFormat_FLAT
}

/// Currency Pair
type InstrumentDefinition_CurrencyPair struct {
	Currency1            string   `protobuf:"bytes,1,opt,name=currency1,proto3" json:"currency1,omitempty"`
	Currency2            string   `protobuf:"bytes,2,opt,name=currency2,proto3" json:"currency2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentDefinition_CurrencyPair) Reset()         { *m = InstrumentDefinition_CurrencyPair{} }
func (m *InstrumentDefinition_CurrencyPair) String() string { return proto.CompactTextString(m) }
func (*InstrumentDefinition_CurrencyPair) ProtoMessage()    {}
func (*InstrumentDefinition_CurrencyPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91d01d7f56af9f5, []int{0, 8}
}

func (m *InstrumentDefinition_CurrencyPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentDefinition_CurrencyPair.Unmarshal(m, b)
}
func (m *InstrumentDefinition_CurrencyPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentDefinition_CurrencyPair.Marshal(b, m, deterministic)
}
func (m *InstrumentDefinition_CurrencyPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentDefinition_CurrencyPair.Merge(m, src)
}
func (m *InstrumentDefinition_CurrencyPair) XXX_Size() int {
	return xxx_messageInfo_InstrumentDefinition_CurrencyPair.Size(m)
}
func (m *InstrumentDefinition_CurrencyPair) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentDefinition_CurrencyPair.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentDefinition_CurrencyPair proto.InternalMessageInfo

func (m *InstrumentDefinition_CurrencyPair) GetCurrency1() string {
	if m != nil {
		return m.Currency1
	}
	return ""
}

func (m *InstrumentDefinition_CurrencyPair) GetCurrency2() string {
	if m != nil {
		return m.Currency2
	}
	return ""
}

func init() {
	proto.RegisterEnum("org.openfeed.InstrumentDefinition_InstrumentType", InstrumentDefinition_InstrumentType_name, InstrumentDefinition_InstrumentType_value)
	proto.RegisterEnum("org.openfeed.InstrumentDefinition_BookType", InstrumentDefinition_BookType_name, InstrumentDefinition_BookType_value)
	proto.RegisterEnum("org.openfeed.InstrumentDefinition_OptionType", InstrumentDefinition_OptionType_name, InstrumentDefinition_OptionType_value)
	proto.RegisterEnum("org.openfeed.InstrumentDefinition_OptionStyle", InstrumentDefinition_OptionStyle_name, InstrumentDefinition_OptionStyle_value)
	proto.RegisterEnum("org.openfeed.InstrumentDefinition_State", InstrumentDefinition_State_name, InstrumentDefinition_State_value)
	proto.RegisterEnum("org.openfeed.InstrumentDefinition_EventType", InstrumentDefinition_EventType_name, InstrumentDefinition_EventType_value)
	proto.RegisterEnum("org.openfeed.InstrumentDefinition_PriceFormat_SubFormat", InstrumentDefinition_PriceFormat_SubFormat_name, InstrumentDefinition_PriceFormat_SubFormat_value)
	proto.RegisterType((*InstrumentDefinition)(nil), "org.openfeed.InstrumentDefinition")
	proto.RegisterType((*InstrumentDefinition_Schedule)(nil), "org.openfeed.InstrumentDefinition.Schedule")
	proto.RegisterType((*InstrumentDefinition_TimeSpan)(nil), "org.openfeed.InstrumentDefinition.TimeSpan")
	proto.RegisterType((*InstrumentDefinition_Calendar)(nil), "org.openfeed.InstrumentDefinition.Calendar")
	proto.RegisterType((*InstrumentDefinition_Event)(nil), "org.openfeed.InstrumentDefinition.Event")
	proto.RegisterType((*InstrumentDefinition_SpreadLeg)(nil), "org.openfeed.InstrumentDefinition.SpreadLeg")
	proto.RegisterType((*InstrumentDefinition_MaturityDate)(nil), "org.openfeed.InstrumentDefinition.MaturityDate")
	proto.RegisterType((*InstrumentDefinition_Symbol)(nil), "org.openfeed.InstrumentDefinition.Symbol")
	proto.RegisterType((*InstrumentDefinition_PriceFormat)(nil), "org.openfeed.InstrumentDefinition.PriceFormat")
	proto.RegisterType((*InstrumentDefinition_CurrencyPair)(nil), "org.openfeed.InstrumentDefinition.CurrencyPair")
}

func init() { proto.RegisterFile("openfeed_instrument.proto", fileDescriptor_e91d01d7f56af9f5) }

var fileDescriptor_e91d01d7f56af9f5 = []byte{
	// 1780 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xdd, 0x72, 0x1b, 0x49,
	0x15, 0xde, 0x91, 0xff, 0xe4, 0x23, 0xc7, 0x1e, 0xb7, 0x9d, 0xa4, 0xd7, 0xbb, 0x2c, 0x42, 0x50,
	0x94, 0x60, 0x77, 0x0d, 0x71, 0xb8, 0x08, 0x45, 0x15, 0xec, 0x44, 0x1a, 0xc5, 0x22, 0xb2, 0x46,
	0xe9, 0x19, 0x79, 0xe3, 0x50, 0x94, 0xaa, 0x3d, 0xd3, 0xb6, 0xba, 0x22, 0xf5, 0x88, 0x9e, 0x51,
	0x88, 0x9e, 0x80, 0x87, 0xe0, 0x06, 0x9e, 0x80, 0xd7, 0xa0, 0x80, 0x2b, 0xfe, 0xff, 0x7f, 0x5f,
	0x84, 0xea, 0x6e, 0x8d, 0x34, 0xb2, 0x95, 0x20, 0xf6, 0x6e, 0xfa, 0x3b, 0xe7, 0xfb, 0xe6, 0xcc,
	0x39, 0xa7, 0xbb, 0x8f, 0x04, 0xef, 0xc6, 0x23, 0x26, 0xae, 0x18, 0x8b, 0x7a, 0x5c, 0x24, 0xa9,
	0x1c, 0x0f, 0x99, 0x48, 0x8f, 0x47, 0x32, 0x4e, 0x63, 0xb4, 0x13, 0xcb, 0xeb, 0xe3, 0xcc, 0x5c,
	0xf9, 0x59, 0x05, 0x0e, 0x9b, 0x33, 0x97, 0x3a, 0xbb, 0xe2, 0x82, 0xa7, 0x3c, 0x16, 0xe8, 0x08,
	0x8a, 0x43, 0x2a, 0x5f, 0xb2, 0xb4, 0x19, 0x61, 0xab, 0x6c, 0x55, 0x11, 0x99, 0xad, 0xd1, 0x05,
	0xec, 0xce, 0x65, 0x83, 0xc9, 0x88, 0xe1, 0x42, 0xd9, 0xaa, 0xee, 0x9e, 0x3c, 0x38, 0xce, 0x6b,
	0x1f, 0x2f, 0xd3, 0xcd, 0x81, 0x8a, 0x48, 0x6e, 0x08, 0xa1, 0x4f, 0xc1, 0x4e, 0xc6, 0xa3, 0x51,
	0x2c, 0xd3, 0xc7, 0x71, 0xfc, 0x52, 0x41, 0x09, 0x5e, 0x2b, 0xaf, 0x55, 0x77, 0x4f, 0x3e, 0x5c,
	0x41, 0x3c, 0xe3, 0x90, 0x5b, 0x22, 0xe8, 0x7d, 0xd8, 0xbe, 0x8c, 0xe3, 0x97, 0x75, 0x36, 0x4a,
	0xfb, 0x78, 0xbd, 0x6c, 0x55, 0xf7, 0xc9, 0x1c, 0x50, 0x5f, 0xfb, 0x8a, 0x89, 0x28, 0x96, 0xcd,
	0x08, 0x6f, 0x94, 0xad, 0xea, 0x36, 0x99, 0xad, 0xd1, 0x3d, 0xd8, 0x4c, 0x26, 0xc3, 0xcb, 0x78,
	0x80, 0x37, 0xb5, 0x65, 0xba, 0x42, 0x65, 0x28, 0x45, 0x2c, 0x09, 0x25, 0x1f, 0xa9, 0x77, 0xe3,
	0x2d, 0x6d, 0xcc, 0x43, 0x08, 0xc3, 0x56, 0x78, 0xc5, 0x6b, 0x71, 0xc4, 0x70, 0x51, 0x5b, 0xb3,
	0x25, 0xaa, 0xc0, 0x4e, 0x38, 0x96, 0x92, 0x89, 0x70, 0xa2, 0xcd, 0xdb, 0xda, 0xbc, 0x80, 0x29,
	0x1f, 0xf6, 0x3a, 0xec, 0x53, 0x71, 0xcd, 0xb4, 0x0f, 0x18, 0x9f, 0x3c, 0x86, 0xbe, 0x01, 0x77,
	0x87, 0x5c, 0xf0, 0xe1, 0x78, 0xd8, 0x91, 0x3c, 0x64, 0x4d, 0x11, 0x4a, 0xa6, 0x72, 0x82, 0x4b,
	0x65, 0xab, 0x5a, 0x20, 0xcb, 0x8d, 0xe8, 0x18, 0x50, 0x18, 0x8b, 0x54, 0xd2, 0x30, 0xed, 0xc4,
	0x5c, 0xa4, 0xe7, 0x74, 0x30, 0x66, 0x78, 0x47, 0x53, 0x96, 0x58, 0xd0, 0x13, 0x28, 0x26, 0x61,
	0x9f, 0x45, 0xe3, 0x01, 0xc3, 0x77, 0xca, 0x56, 0xb5, 0xb4, 0x52, 0x31, 0xfc, 0x29, 0x85, 0xcc,
	0xc8, 0x4a, 0x28, 0xa4, 0x03, 0x26, 0x22, 0x2a, 0xf1, 0xee, 0xca, 0x42, 0xb5, 0x29, 0x85, 0xcc,
	0xc8, 0xe8, 0xab, 0x60, 0x4b, 0x16, 0xc6, 0x32, 0xaa, 0x49, 0x46, 0x53, 0x16, 0xf0, 0x21, 0xc3,
	0x7b, 0xba, 0x4b, 0x6f, 0xe1, 0x73, 0xdf, 0xee, 0x28, 0xca, 0x7c, 0xed, 0xbc, 0xef, 0x1c, 0x57,
	0x39, 0x4f, 0xf9, 0x90, 0xbd, 0x88, 0x05, 0x6b, 0xd3, 0x21, 0xc3, 0xfb, 0x26, 0xe7, 0x79, 0x0c,
	0x55, 0x61, 0x6f, 0xde, 0xb4, 0x4f, 0x64, 0x3c, 0x1e, 0x61, 0xa4, 0xdd, 0x6e, 0xc2, 0xe8, 0x7b,
	0x60, 0x9b, 0x5e, 0x71, 0x5f, 0x8f, 0xb8, 0xa4, 0xba, 0x4d, 0x0e, 0xf4, 0x67, 0x7f, 0x6d, 0x85,
	0xcf, 0x3e, 0xa3, 0xe9, 0x58, 0xf2, 0x74, 0x52, 0xa7, 0xa9, 0x6a, 0xe8, 0x1b, 0x42, 0xe8, 0xdb,
	0xb0, 0x91, 0xa4, 0x34, 0x65, 0xf8, 0x50, 0xef, 0xbd, 0xea, 0x2a, 0x15, 0x51, 0xfe, 0xc4, 0xd0,
	0x74, 0x73, 0xf6, 0xa9, 0x10, 0x6c, 0x80, 0xef, 0xea, 0xed, 0x90, 0x2d, 0x55, 0x7b, 0x8c, 0x45,
	0xc4, 0xe4, 0x60, 0xc2, 0xc5, 0xf5, 0x59, 0x76, 0x08, 0xdc, 0xd3, 0x29, 0x5b, 0x62, 0x41, 0x1d,
	0x28, 0x8d, 0x54, 0x83, 0x35, 0x62, 0x39, 0xa4, 0x29, 0xbe, 0xaf, 0xbf, 0xf0, 0x78, 0x85, 0x78,
	0x3a, 0x73, 0x16, 0xc9, 0x4b, 0xa0, 0x3e, 0xdc, 0x8f, 0xf5, 0x16, 0xf2, 0x53, 0xc9, 0x5f, 0xb2,
	0x9c, 0x1f, 0xc6, 0x9f, 0x49, 0xfd, 0x4d, 0x72, 0xaa, 0x39, 0xf4, 0x8b, 0xeb, 0x4c, 0xc4, 0x43,
	0x2e, 0x68, 0x1a, 0x4b, 0xfc, 0xbe, 0x4e, 0xc7, 0x2d, 0x1c, 0x7d, 0x1d, 0x0e, 0x7e, 0x30, 0xa6,
	0x22, 0x55, 0x35, 0xc9, 0xb9, 0x7f, 0x4e, 0xbb, 0x2f, 0x33, 0xa1, 0x0f, 0x00, 0x78, 0x12, 0x48,
	0x1a, 0xd1, 0xcb, 0x01, 0xc3, 0x1f, 0x94, 0xad, 0x6a, 0x91, 0xe4, 0x10, 0xd5, 0x4a, 0xa9, 0xa4,
	0x22, 0xa1, 0xa1, 0x8a, 0x4e, 0x77, 0xe6, 0x89, 0x4e, 0xf3, 0x4d, 0x18, 0x7d, 0x09, 0xee, 0xd0,
	0xf1, 0x6b, 0x3e, 0xe0, 0x54, 0xaa, 0x86, 0xa0, 0x38, 0x2c, 0x5b, 0xd5, 0x1d, 0xb2, 0x08, 0xa2,
	0x1a, 0x6c, 0x99, 0x3e, 0x49, 0x70, 0x54, 0x5e, 0xab, 0x96, 0x4e, 0xbe, 0xb2, 0x4a, 0x57, 0x68,
	0x06, 0xc9, 0x98, 0xe8, 0x8b, 0xb0, 0x93, 0xcf, 0x16, 0xfe, 0xb9, 0x39, 0xfe, 0x17, 0x40, 0xd4,
	0x06, 0x30, 0x6b, 0x7d, 0xfc, 0xff, 0xc2, 0xd2, 0x3d, 0xf8, 0xf1, 0x0a, 0x6f, 0xf3, 0x66, 0x2c,
	0x92, 0x53, 0x40, 0xcf, 0xa0, 0x94, 0xe9, 0x4f, 0x06, 0x0c, 0xff, 0xd2, 0x08, 0x1e, 0xaf, 0x2c,
	0xa8, 0x69, 0x24, 0xaf, 0x81, 0xbe, 0xb9, 0xd8, 0x44, 0xf9, 0x92, 0xfd, 0xca, 0xd2, 0x35, 0x7b,
	0x93, 0x1d, 0x7d, 0x1e, 0x20, 0x19, 0x49, 0x46, 0x23, 0x7d, 0xf0, 0xfe, 0xda, 0xd2, 0xdb, 0x3b,
	0x07, 0xa1, 0xa7, 0xb0, 0x6d, 0x56, 0x2d, 0x76, 0x8d, 0x7f, 0x63, 0xe9, 0x5c, 0x7f, 0xb4, 0x4a,
	0xae, 0x33, 0x12, 0x99, 0xf3, 0xd1, 0xc7, 0xb0, 0x3f, 0x4e, 0x98, 0xd4, 0x6e, 0x2c, 0x32, 0x2e,
	0xf8, 0xb7, 0x96, 0xee, 0x96, 0xdb, 0x16, 0x15, 0x9c, 0xb9, 0x89, 0x03, 0xce, 0x24, 0xfe, 0xdd,
	0x34, 0xb8, 0x39, 0x84, 0xbe, 0x05, 0xf8, 0x8a, 0x0b, 0x2a, 0x42, 0x4e, 0x07, 0x6a, 0xcb, 0x8f,
	0x93, 0xa6, 0x88, 0x78, 0xa8, 0xbf, 0xfc, 0xf7, 0xc6, 0xfd, 0x8d, 0x0e, 0xe8, 0x00, 0xd6, 0x79,
	0xc2, 0x05, 0xfe, 0x83, 0x71, 0xd4, 0x0b, 0x14, 0xcc, 0xaf, 0xab, 0x0e, 0xe5, 0x12, 0xff, 0xd1,
	0x5a, 0xf9, 0x14, 0xab, 0xe5, 0x78, 0x64, 0x41, 0x05, 0x3d, 0x80, 0x83, 0xec, 0x32, 0xf3, 0x99,
	0x88, 0x92, 0xf3, 0x78, 0x30, 0x1e, 0x32, 0xfc, 0x27, 0xf3, 0xe5, 0xcb, 0x6c, 0x2a, 0x55, 0x0b,
	0xf0, 0x29, 0xbf, 0xee, 0xe3, 0x3f, 0x4f, 0x53, 0x75, 0xcb, 0x82, 0x3e, 0x04, 0x7b, 0x01, 0x6c,
	0xc5, 0x3f, 0xc4, 0x7f, 0x31, 0xde, 0xb7, 0x0c, 0xb7, 0xb4, 0xbd, 0x11, 0x13, 0xf8, 0xaf, 0xcb,
	0xb4, 0x95, 0x05, 0x7d, 0x07, 0x8e, 0xc2, 0x58, 0x24, 0xf1, 0x80, 0xab, 0xdb, 0x23, 0x6a, 0x30,
	0x16, 0xcd, 0x13, 0x80, 0xff, 0x66, 0x78, 0x6f, 0x71, 0x41, 0x0f, 0xe1, 0x50, 0xa5, 0xce, 0x1b,
	0xa7, 0xa1, 0x9c, 0xe4, 0xa8, 0x7f, 0x37, 0xd4, 0xa5, 0x46, 0x74, 0x06, 0x5f, 0x48, 0x26, 0x22,
	0xed, 0xb3, 0x94, 0x87, 0xce, 0x90, 0x49, 0x1e, 0x52, 0x61, 0x76, 0x40, 0x4e, 0xe1, 0x1f, 0x46,
	0xe1, 0x7f, 0x7b, 0xaa, 0x18, 0x2e, 0xa9, 0x0c, 0xfb, 0x54, 0xa6, 0x6e, 0x7e, 0xd6, 0xf8, 0xa7,
	0xa9, 0xfe, 0x52, 0xa3, 0xca, 0x6a, 0x86, 0x3f, 0xa6, 0x89, 0x21, 0xfc, 0xcb, 0x10, 0x6e, 0x19,
	0x54, 0x56, 0x5f, 0xe9, 0xda, 0xe5, 0xf7, 0xdf, 0xbf, 0xcd, 0xfe, 0xbb, 0x6d, 0x41, 0x0e, 0xbc,
	0x77, 0xc9, 0x23, 0xef, 0xea, 0x8a, 0xc9, 0x67, 0x4b, 0xce, 0xda, 0xff, 0x18, 0xe2, 0xdb, 0x7c,
	0x8e, 0x7c, 0x28, 0xfa, 0xb9, 0x81, 0x23, 0x61, 0x49, 0xc2, 0x63, 0x91, 0x60, 0xb3, 0x4b, 0x57,
	0x19, 0x38, 0xd4, 0x89, 0xeb, 0x8f, 0xa8, 0x20, 0x33, 0xf2, 0xd1, 0x29, 0x14, 0x33, 0x54, 0x8d,
	0x92, 0x6a, 0x20, 0xf0, 0x53, 0x2a, 0xd3, 0xe9, 0x6c, 0x3c, 0x07, 0xd4, 0x99, 0xaf, 0x16, 0x0d,
	0x2e, 0x78, 0xd2, 0xd7, 0x83, 0x31, 0x22, 0x39, 0xe4, 0xa8, 0x05, 0xc5, 0x6c, 0xa0, 0x41, 0x9f,
	0xc0, 0x26, 0x7b, 0xc5, 0x44, 0x9a, 0x05, 0xb7, 0xca, 0x25, 0xee, 0x2a, 0x02, 0x99, 0xf2, 0x8e,
	0xbe, 0x0f, 0x1b, 0x1a, 0x40, 0x9f, 0xc0, 0x7a, 0xaa, 0x8e, 0x62, 0x73, 0x70, 0x7e, 0xb4, 0xaa,
	0x90, 0x3e, 0x88, 0x35, 0x13, 0x21, 0x58, 0x57, 0x6d, 0x3a, 0x0d, 0x59, 0x3f, 0x1f, 0x75, 0x61,
	0x7b, 0x76, 0x64, 0xbd, 0xf5, 0x27, 0xc1, 0x21, 0x6c, 0xe8, 0xb9, 0x44, 0xb3, 0xf7, 0x89, 0x59,
	0xe4, 0x46, 0xe7, 0xb5, 0xfc, 0xe8, 0x7c, 0xf4, 0x5d, 0xd8, 0xc9, 0x4f, 0x37, 0xea, 0xd5, 0x13,
	0x46, 0x25, 0x36, 0xd5, 0xd5, 0xcf, 0x4a, 0x71, 0x18, 0x8b, 0xb4, 0x9f, 0x29, 0xea, 0x05, 0xb2,
	0x61, 0x2d, 0xa2, 0x13, 0x2d, 0xb7, 0x4f, 0xd4, 0xe3, 0xd1, 0x23, 0xd8, 0x34, 0x37, 0x98, 0x7a,
	0x9b, 0x19, 0xda, 0xb1, 0x69, 0xc6, 0xe9, 0x2a, 0x17, 0x45, 0x61, 0x21, 0x8a, 0x1f, 0x15, 0xa0,
	0x94, 0x9f, 0x05, 0x2a, 0xb0, 0xc3, 0x93, 0x86, 0x34, 0xb7, 0x2e, 0x1d, 0x60, 0xb3, 0x8b, 0x16,
	0x30, 0x33, 0xf4, 0xcf, 0xfb, 0xd1, 0xc4, 0x96, 0x87, 0xd0, 0x97, 0x61, 0x37, 0x19, 0x5f, 0xe6,
	0x9b, 0xd6, 0xfc, 0xda, 0xb8, 0x81, 0xa2, 0x73, 0xd8, 0x4e, 0xc6, 0x97, 0xd3, 0xa9, 0x66, 0x53,
	0x57, 0xed, 0xd1, 0xff, 0x37, 0xd5, 0x1c, 0xfb, 0x19, 0x9f, 0xcc, 0xa5, 0x2a, 0x27, 0xb0, 0x3d,
	0xc3, 0x51, 0x11, 0xd6, 0x1b, 0x2d, 0x27, 0xb0, 0xdf, 0x41, 0xbb, 0x00, 0x0d, 0xe2, 0xd4, 0x82,
	0xa6, 0xd7, 0x76, 0x5a, 0xb6, 0x85, 0x4a, 0xb0, 0x55, 0x77, 0x6b, 0xcd, 0x33, 0xa7, 0x65, 0x17,
	0x54, 0x3d, 0xf2, 0xe7, 0xb4, 0xea, 0xf0, 0xec, 0xa4, 0x7e, 0x30, 0x4d, 0xe6, 0x1c, 0xc8, 0x5b,
	0x4f, 0xa6, 0x29, 0x9d, 0x03, 0x95, 0x1f, 0x5b, 0xb0, 0xbb, 0xf8, 0x23, 0x0f, 0xbd, 0x07, 0xf7,
	0xbb, 0xed, 0xa7, 0x6d, 0xef, 0xd3, 0x76, 0xaf, 0xd9, 0xf6, 0x03, 0xd2, 0x3d, 0x73, 0xdb, 0x41,
	0x2f, 0xb8, 0xe8, 0xb8, 0xf6, 0x3b, 0x68, 0x1b, 0x36, 0x1a, 0x1e, 0x71, 0x9f, 0xdb, 0x96, 0x7a,
	0x6c, 0xb6, 0xeb, 0xee, 0x73, 0xbb, 0x80, 0x00, 0x36, 0xdd, 0x67, 0xdd, 0x66, 0x70, 0x61, 0xaf,
	0xa9, 0xe7, 0x46, 0x37, 0xe8, 0x12, 0xd7, 0x5e, 0x57, 0xcf, 0x5e, 0x47, 0x7d, 0x84, 0xbd, 0xa1,
	0x9e, 0xfd, 0x0e, 0x71, 0x9d, 0xba, 0xbd, 0x89, 0xf6, 0xa0, 0x74, 0xd6, 0x0d, 0xba, 0x4e, 0xab,
	0xd7, 0xe8, 0xb6, 0xeb, 0xf6, 0x16, 0xba, 0x0b, 0xfb, 0x67, 0x5e, 0xdb, 0xbd, 0xe8, 0x9d, 0x39,
	0xe4, 0xa9, 0x1b, 0x18, 0xb8, 0x58, 0x79, 0x01, 0xc5, 0xec, 0x37, 0xa1, 0x72, 0xc9, 0xc2, 0x7a,
	0xec, 0x79, 0x4f, 0xb3, 0x80, 0xf6, 0xa0, 0x14, 0x78, 0x9d, 0x9e, 0xd7, 0xd0, 0xa8, 0x6d, 0x29,
	0xbf, 0x0e, 0x69, 0xd6, 0xdc, 0x5e, 0xcb, 0x3d, 0x77, 0x5b, 0xbd, 0xba, 0xdb, 0x09, 0x4e, 0xed,
	0x82, 0xf2, 0xf3, 0x48, 0xdd, 0x25, 0x53, 0x60, 0xad, 0xf2, 0x08, 0x60, 0x3e, 0xdd, 0xa0, 0xfb,
	0x70, 0x90, 0xa9, 0x9b, 0x88, 0x33, 0xfd, 0x22, 0xac, 0xd7, 0x9c, 0x96, 0xaa, 0xc1, 0x16, 0xac,
	0x75, 0xba, 0x81, 0x5d, 0xa8, 0x3c, 0x83, 0x52, 0x6e, 0x8c, 0x41, 0xef, 0xc2, 0xdd, 0x45, 0xaa,
	0xdf, 0xf3, 0x83, 0x8b, 0x96, 0x22, 0xeb, 0xb2, 0x35, 0x9c, 0x6e, 0x2b, 0xb0, 0x2d, 0xb4, 0x03,
	0x45, 0xe7, 0xcc, 0x25, 0xcd, 0x9a, 0xd3, 0xb6, 0x0b, 0x6a, 0xe5, 0x76, 0x89, 0xd7, 0x71, 0x9d,
	0xb6, 0xbd, 0x56, 0x79, 0x08, 0x1b, 0x7a, 0xdc, 0x47, 0xfb, 0x70, 0x27, 0x13, 0xf3, 0x03, 0x27,
	0x50, 0x22, 0x00, 0x9b, 0xaa, 0x13, 0xce, 0x5d, 0xd3, 0x07, 0x1d, 0xc7, 0xf7, 0xd5, 0xa2, 0x50,
	0xf9, 0x69, 0x01, 0xb6, 0x67, 0xc7, 0x02, 0xba, 0x07, 0x28, 0x63, 0xba, 0xe7, 0xb9, 0x8a, 0x1d,
	0x82, 0xdd, 0x68, 0x12, 0x3f, 0xe8, 0x05, 0xc4, 0xa9, 0xbb, 0xbd, 0xba, 0x12, 0xb5, 0xd0, 0x01,
	0xec, 0xb5, 0x9c, 0x45, 0xb0, 0xa0, 0x40, 0xdf, 0x0d, 0x82, 0x96, 0xab, 0x2b, 0xae, 0x41, 0x50,
	0x99, 0x31, 0xfc, 0xba, 0xdb, 0x6a, 0x9e, 0xbb, 0xe4, 0xc2, 0x18, 0x4a, 0xea, 0x85, 0x5a, 0x62,
	0x11, 0xdf, 0x51, 0x05, 0x30, 0x84, 0xb6, 0x17, 0xa8, 0x3a, 0x68, 0xf8, 0x8e, 0x8a, 0x43, 0xbb,
	0xe7, 0xd1, 0x5d, 0x25, 0x62, 0x9c, 0x4f, 0xbd, 0x56, 0xbd, 0xd9, 0x7e, 0x62, 0xf0, 0x3d, 0x25,
	0xa2, 0xbd, 0x17, 0x60, 0x7b, 0x1e, 0x4c, 0xc7, 0xf3, 0x9b, 0xba, 0x4c, 0xda, 0xb0, 0x3f, 0x0b,
	0x66, 0x11, 0x47, 0x8f, 0xf7, 0x4f, 0xad, 0x8e, 0xf5, 0xa2, 0x98, 0xed, 0xd2, 0x9f, 0x58, 0xd6,
	0xe5, 0xa6, 0xfe, 0x67, 0xe5, 0xe1, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x19, 0xaf, 0xfd, 0x5d,
	0x76, 0x11, 0x00, 0x00,
}
