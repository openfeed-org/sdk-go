// Code generated by protoc-gen-go. DO NOT EDIT.
// source: openfeed.proto

package openfeed

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

/// Book side
type BookSide int32

const (
	BookSide_UNKNOWN_BOOK_SIDE BookSide = 0
	BookSide_BID               BookSide = 1
	BookSide_OFFER             BookSide = 2
)

var BookSide_name = map[int32]string{
	0: "UNKNOWN_BOOK_SIDE",
	1: "BID",
	2: "OFFER",
}

var BookSide_value = map[string]int32{
	"UNKNOWN_BOOK_SIDE": 0,
	"BID":               1,
	"OFFER":             2,
}

func (x BookSide) String() string {
	return proto.EnumName(BookSide_name, int32(x))
}

func (BookSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{0}
}

type InstrumentTradingStatus int32

const (
	InstrumentTradingStatus_UNKNOWN_TRADING_STATUS    InstrumentTradingStatus = 0
	InstrumentTradingStatus_TRADING_RESUME            InstrumentTradingStatus = 1
	InstrumentTradingStatus_PRE_OPEN                  InstrumentTradingStatus = 2
	InstrumentTradingStatus_OPEN                      InstrumentTradingStatus = 3
	InstrumentTradingStatus_PRE_CLOSE                 InstrumentTradingStatus = 4
	InstrumentTradingStatus_CLOSE                     InstrumentTradingStatus = 5
	InstrumentTradingStatus_TRADING_HALT              InstrumentTradingStatus = 6
	InstrumentTradingStatus_QUOTATION_RESUME          InstrumentTradingStatus = 7
	InstrumentTradingStatus_OPEN_DELAY                InstrumentTradingStatus = 8
	InstrumentTradingStatus_NO_OPEN_NO_RESUME         InstrumentTradingStatus = 9
	InstrumentTradingStatus_FAST_MARKET               InstrumentTradingStatus = 10
	InstrumentTradingStatus_FAST_MARKET_END           InstrumentTradingStatus = 11
	InstrumentTradingStatus_LATE_MARKET               InstrumentTradingStatus = 12
	InstrumentTradingStatus_LATE_MARKET_END           InstrumentTradingStatus = 13
	InstrumentTradingStatus_POST_SESSION              InstrumentTradingStatus = 14
	InstrumentTradingStatus_POST_SESSION_END          InstrumentTradingStatus = 15
	InstrumentTradingStatus_NEW_PRICE_INDICATION      InstrumentTradingStatus = 16
	InstrumentTradingStatus_NOT_AVAILABLE_FOR_TRADING InstrumentTradingStatus = 17
	InstrumentTradingStatus_PRE_CROSS                 InstrumentTradingStatus = 18
	InstrumentTradingStatus_CROSS                     InstrumentTradingStatus = 19
	InstrumentTradingStatus_POST_CLOSE                InstrumentTradingStatus = 20
	InstrumentTradingStatus_NO_CHANGE                 InstrumentTradingStatus = 21
	// Not available for trading.
	InstrumentTradingStatus_NAFT InstrumentTradingStatus = 22
)

var InstrumentTradingStatus_name = map[int32]string{
	0:  "UNKNOWN_TRADING_STATUS",
	1:  "TRADING_RESUME",
	2:  "PRE_OPEN",
	3:  "OPEN",
	4:  "PRE_CLOSE",
	5:  "CLOSE",
	6:  "TRADING_HALT",
	7:  "QUOTATION_RESUME",
	8:  "OPEN_DELAY",
	9:  "NO_OPEN_NO_RESUME",
	10: "FAST_MARKET",
	11: "FAST_MARKET_END",
	12: "LATE_MARKET",
	13: "LATE_MARKET_END",
	14: "POST_SESSION",
	15: "POST_SESSION_END",
	16: "NEW_PRICE_INDICATION",
	17: "NOT_AVAILABLE_FOR_TRADING",
	18: "PRE_CROSS",
	19: "CROSS",
	20: "POST_CLOSE",
	21: "NO_CHANGE",
	22: "NAFT",
}

var InstrumentTradingStatus_value = map[string]int32{
	"UNKNOWN_TRADING_STATUS":    0,
	"TRADING_RESUME":            1,
	"PRE_OPEN":                  2,
	"OPEN":                      3,
	"PRE_CLOSE":                 4,
	"CLOSE":                     5,
	"TRADING_HALT":              6,
	"QUOTATION_RESUME":          7,
	"OPEN_DELAY":                8,
	"NO_OPEN_NO_RESUME":         9,
	"FAST_MARKET":               10,
	"FAST_MARKET_END":           11,
	"LATE_MARKET":               12,
	"LATE_MARKET_END":           13,
	"POST_SESSION":              14,
	"POST_SESSION_END":          15,
	"NEW_PRICE_INDICATION":      16,
	"NOT_AVAILABLE_FOR_TRADING": 17,
	"PRE_CROSS":                 18,
	"CROSS":                     19,
	"POST_CLOSE":                20,
	"NO_CHANGE":                 21,
	"NAFT":                      22,
}

func (x InstrumentTradingStatus) String() string {
	return proto.EnumName(InstrumentTradingStatus_name, int32(x))
}

func (InstrumentTradingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{1}
}

type RegulationSHOShortSalePriceTest int32

const (
	RegulationSHOShortSalePriceTest_UNKNOWN_PRICE_TEST           RegulationSHOShortSalePriceTest = 0
	RegulationSHOShortSalePriceTest_PRICE_TEST_NONE              RegulationSHOShortSalePriceTest = 1
	RegulationSHOShortSalePriceTest_PRICE_TEST_IN_EFFECT         RegulationSHOShortSalePriceTest = 2
	RegulationSHOShortSalePriceTest_PRICE_TEST_REMAINS_IN_EFFECT RegulationSHOShortSalePriceTest = 3
)

var RegulationSHOShortSalePriceTest_name = map[int32]string{
	0: "UNKNOWN_PRICE_TEST",
	1: "PRICE_TEST_NONE",
	2: "PRICE_TEST_IN_EFFECT",
	3: "PRICE_TEST_REMAINS_IN_EFFECT",
}

var RegulationSHOShortSalePriceTest_value = map[string]int32{
	"UNKNOWN_PRICE_TEST":           0,
	"PRICE_TEST_NONE":              1,
	"PRICE_TEST_IN_EFFECT":         2,
	"PRICE_TEST_REMAINS_IN_EFFECT": 3,
}

func (x RegulationSHOShortSalePriceTest) String() string {
	return proto.EnumName(RegulationSHOShortSalePriceTest_name, int32(x))
}

func (RegulationSHOShortSalePriceTest) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{2}
}

type SettlementTerms int32

const (
	SettlementTerms_UNKNOWN_SETTLEMENT_TERMS SettlementTerms = 0
	SettlementTerms_CASH                     SettlementTerms = 1
	SettlementTerms_NON_NET                  SettlementTerms = 2
	SettlementTerms_CONTINGENT_TRADE         SettlementTerms = 3
	SettlementTerms_CASH_TODAY               SettlementTerms = 4
	SettlementTerms_DATE                     SettlementTerms = 5
)

var SettlementTerms_name = map[int32]string{
	0: "UNKNOWN_SETTLEMENT_TERMS",
	1: "CASH",
	2: "NON_NET",
	3: "CONTINGENT_TRADE",
	4: "CASH_TODAY",
	5: "DATE",
}

var SettlementTerms_value = map[string]int32{
	"UNKNOWN_SETTLEMENT_TERMS": 0,
	"CASH":                     1,
	"NON_NET":                  2,
	"CONTINGENT_TRADE":         3,
	"CASH_TODAY":               4,
	"DATE":                     5,
}

func (x SettlementTerms) String() string {
	return proto.EnumName(SettlementTerms_name, int32(x))
}

func (SettlementTerms) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{3}
}

type CrossType int32

const (
	CrossType_UNKNOWN_CROSS_TYPE CrossType = 0
	CrossType_DEFAULT            CrossType = 1
	CrossType_INTERNAL           CrossType = 2
	CrossType_BASIS              CrossType = 3
	CrossType_CONTINGENT         CrossType = 4
	CrossType_SPECIAL            CrossType = 5
	CrossType_VWAP               CrossType = 6
	CrossType_REGULAR            CrossType = 7
)

var CrossType_name = map[int32]string{
	0: "UNKNOWN_CROSS_TYPE",
	1: "DEFAULT",
	2: "INTERNAL",
	3: "BASIS",
	4: "CONTINGENT",
	5: "SPECIAL",
	6: "VWAP",
	7: "REGULAR",
}

var CrossType_value = map[string]int32{
	"UNKNOWN_CROSS_TYPE": 0,
	"DEFAULT":            1,
	"INTERNAL":           2,
	"BASIS":              3,
	"CONTINGENT":         4,
	"SPECIAL":            5,
	"VWAP":               6,
	"REGULAR":            7,
}

func (x CrossType) String() string {
	return proto.EnumName(CrossType_name, int32(x))
}

func (CrossType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{4}
}

type OpenCloseSettlementFlag int32

const (
	OpenCloseSettlementFlag_UNKNOWN               OpenCloseSettlementFlag = 0
	OpenCloseSettlementFlag_DAILY_OPEN            OpenCloseSettlementFlag = 1
	OpenCloseSettlementFlag_INDICATIVE_OPEN_PRICE OpenCloseSettlementFlag = 2
)

var OpenCloseSettlementFlag_name = map[int32]string{
	0: "UNKNOWN",
	1: "DAILY_OPEN",
	2: "INDICATIVE_OPEN_PRICE",
}

var OpenCloseSettlementFlag_value = map[string]int32{
	"UNKNOWN":               0,
	"DAILY_OPEN":            1,
	"INDICATIVE_OPEN_PRICE": 2,
}

func (x OpenCloseSettlementFlag) String() string {
	return proto.EnumName(OpenCloseSettlementFlag_name, int32(x))
}

func (OpenCloseSettlementFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{5}
}

type SettlementSource int32

const (
	SettlementSource_UNKNOWN_SETTLEMENT_SOURCE SettlementSource = 0
	SettlementSource_GLOBEX                    SettlementSource = 1
	SettlementSource_ITC                       SettlementSource = 2
	SettlementSource_MANUAL                    SettlementSource = 3
)

var SettlementSource_name = map[int32]string{
	0: "UNKNOWN_SETTLEMENT_SOURCE",
	1: "GLOBEX",
	2: "ITC",
	3: "MANUAL",
}

var SettlementSource_value = map[string]int32{
	"UNKNOWN_SETTLEMENT_SOURCE": 0,
	"GLOBEX":                    1,
	"ITC":                       2,
	"MANUAL":                    3,
}

func (x SettlementSource) String() string {
	return proto.EnumName(SettlementSource_name, int32(x))
}

func (SettlementSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{6}
}

type Service int32

const (
	Service_UNKNOWN_SERVICE    Service = 0
	Service_REAL_TIME          Service = 1
	Service_DELAYED            Service = 2
	Service_REAL_TIME_SNAPSHOT Service = 3
	Service_DELAYED_SNAPSHOT   Service = 4
	Service_END_OF_DAY         Service = 5
)

var Service_name = map[int32]string{
	0: "UNKNOWN_SERVICE",
	1: "REAL_TIME",
	2: "DELAYED",
	3: "REAL_TIME_SNAPSHOT",
	4: "DELAYED_SNAPSHOT",
	5: "END_OF_DAY",
}

var Service_value = map[string]int32{
	"UNKNOWN_SERVICE":    0,
	"REAL_TIME":          1,
	"DELAYED":            2,
	"REAL_TIME_SNAPSHOT": 3,
	"DELAYED_SNAPSHOT":   4,
	"END_OF_DAY":         5,
}

func (x Service) String() string {
	return proto.EnumName(Service_name, int32(x))
}

func (Service) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{7}
}

type MarketWideStatus int32

const (
	MarketWideStatus_STATUS_UNKNOWN      MarketWideStatus = 0
	MarketWideStatus_STATUS_START_OF_DAY MarketWideStatus = 1
	MarketWideStatus_STATUS_END_OF_DAY   MarketWideStatus = 2
	MarketWideStatus_STATUS_OPEN         MarketWideStatus = 3
	MarketWideStatus_STATUS_CLOSE        MarketWideStatus = 4
)

var MarketWideStatus_name = map[int32]string{
	0: "STATUS_UNKNOWN",
	1: "STATUS_START_OF_DAY",
	2: "STATUS_END_OF_DAY",
	3: "STATUS_OPEN",
	4: "STATUS_CLOSE",
}

var MarketWideStatus_value = map[string]int32{
	"STATUS_UNKNOWN":      0,
	"STATUS_START_OF_DAY": 1,
	"STATUS_END_OF_DAY":   2,
	"STATUS_OPEN":         3,
	"STATUS_CLOSE":        4,
}

func (x MarketWideStatus) String() string {
	return proto.EnumName(MarketWideStatus_name, int32(x))
}

func (MarketWideStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{8}
}

type SnapshotRequestResult int32

const (
	SnapshotRequestResult_SNAPSHOT_REQUEST_UNKNOWN_RESULT        SnapshotRequestResult = 0
	SnapshotRequestResult_SNAPSHOT_REQUEST_SUCCESS               SnapshotRequestResult = 1
	SnapshotRequestResult_SNAPSHOT_REQUEST_NOT_FOUND             SnapshotRequestResult = 2
	SnapshotRequestResult_SNAPSHOT_REQUEST_SERVICE_NOT_AVAILABLE SnapshotRequestResult = 3
	SnapshotRequestResult_SNAPSHOT_REQUEST_GENERIC_FAILURE       SnapshotRequestResult = 4
)

var SnapshotRequestResult_name = map[int32]string{
	0: "SNAPSHOT_REQUEST_UNKNOWN_RESULT",
	1: "SNAPSHOT_REQUEST_SUCCESS",
	2: "SNAPSHOT_REQUEST_NOT_FOUND",
	3: "SNAPSHOT_REQUEST_SERVICE_NOT_AVAILABLE",
	4: "SNAPSHOT_REQUEST_GENERIC_FAILURE",
}

var SnapshotRequestResult_value = map[string]int32{
	"SNAPSHOT_REQUEST_UNKNOWN_RESULT":        0,
	"SNAPSHOT_REQUEST_SUCCESS":               1,
	"SNAPSHOT_REQUEST_NOT_FOUND":             2,
	"SNAPSHOT_REQUEST_SERVICE_NOT_AVAILABLE": 3,
	"SNAPSHOT_REQUEST_GENERIC_FAILURE":       4,
}

func (x SnapshotRequestResult) String() string {
	return proto.EnumName(SnapshotRequestResult_name, int32(x))
}

func (SnapshotRequestResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{9}
}

type AdminMessage_Status int32

const (
	AdminMessage_OK AdminMessage_Status = 0
)

var AdminMessage_Status_name = map[int32]string{
	0: "OK",
}

var AdminMessage_Status_value = map[string]int32{
	"OK": 0,
}

func (x AdminMessage_Status) String() string {
	return proto.EnumName(AdminMessage_Status_name, int32(x))
}

func (AdminMessage_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{3, 0}
}

// Clears sets of fields
type MarketSummary_ClearSet int32

const (
	MarketSummary_NONE     MarketSummary_ClearSet = 0
	MarketSummary_ALL      MarketSummary_ClearSet = 1
	MarketSummary_BA       MarketSummary_ClearSet = 2
	MarketSummary_CUSTOM_1 MarketSummary_ClearSet = 3
)

var MarketSummary_ClearSet_name = map[int32]string{
	0: "NONE",
	1: "ALL",
	2: "BA",
	3: "CUSTOM_1",
}

var MarketSummary_ClearSet_value = map[string]int32{
	"NONE":     0,
	"ALL":      1,
	"BA":       2,
	"CUSTOM_1": 3,
}

func (x MarketSummary_ClearSet) String() string {
	return proto.EnumName(MarketSummary_ClearSet_name, int32(x))
}

func (MarketSummary_ClearSet) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{45, 0}
}

/// Used to differntiate various ddf messages.
type MarketSummary_SummaryType int32

const (
	// DDF 2/1 Exchange refresh
	MarketSummary_EXCHANGE_REFRESH MarketSummary_SummaryType = 0
	// DDF 2/6 Live Prices refresh
	MarketSummary_REFRESH_LIVE_PRICE MarketSummary_SummaryType = 1
	// DDF 3/C end-of-day commodity prices
	MarketSummary_EOD_COMMODITY_PRICES MarketSummary_SummaryType = 2
	// DDF 3/S end-of-day stock and forex prices and volume
	MarketSummary_EOD_STOCK_FOREX_PRICES MarketSummary_SummaryType = 3
	// DDF 3/I end-of-day commodity volume and open interest message
	MarketSummary_EOD_COMMODITY_STATS MarketSummary_SummaryType = 4
)

var MarketSummary_SummaryType_name = map[int32]string{
	0: "EXCHANGE_REFRESH",
	1: "REFRESH_LIVE_PRICE",
	2: "EOD_COMMODITY_PRICES",
	3: "EOD_STOCK_FOREX_PRICES",
	4: "EOD_COMMODITY_STATS",
}

var MarketSummary_SummaryType_value = map[string]int32{
	"EXCHANGE_REFRESH":       0,
	"REFRESH_LIVE_PRICE":     1,
	"EOD_COMMODITY_PRICES":   2,
	"EOD_STOCK_FOREX_PRICES": 3,
	"EOD_COMMODITY_STATS":    4,
}

func (x MarketSummary_SummaryType) String() string {
	return proto.EnumName(MarketSummary_SummaryType_name, int32(x))
}

func (MarketSummary_SummaryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{45, 1}
}

type SnapshotRequest_SnapshotRequestType int32

const (
	SnapshotRequest_ALL             SnapshotRequest_SnapshotRequestType = 0
	SnapshotRequest_QUOTE           SnapshotRequest_SnapshotRequestType = 1
	SnapshotRequest_DEPTH           SnapshotRequest_SnapshotRequestType = 2
	SnapshotRequest_VOLUME_AT_PRICE SnapshotRequest_SnapshotRequestType = 3
)

var SnapshotRequest_SnapshotRequestType_name = map[int32]string{
	0: "ALL",
	1: "QUOTE",
	2: "DEPTH",
	3: "VOLUME_AT_PRICE",
}

var SnapshotRequest_SnapshotRequestType_value = map[string]int32{
	"ALL":             0,
	"QUOTE":           1,
	"DEPTH":           2,
	"VOLUME_AT_PRICE": 3,
}

func (x SnapshotRequest_SnapshotRequestType) String() string {
	return proto.EnumName(SnapshotRequest_SnapshotRequestType_name, int32(x))
}

func (SnapshotRequest_SnapshotRequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{50, 0}
}

/// A wrapper for Openfeed data.  Will contain exactly one of the supported
// message types
type OpenfeedMessage struct {
	/// Nanoecond unix epoch at time of message transmission (UTC)
	SendingTime int64 `protobuf:"zigzag64,1,opt,name=sendingTime,proto3" json:"sendingTime,omitempty"`
	/// The total number of markets available on this channel
	// at the time the message was sent.  For UDP snapshot and definition feeds.
	TotalCount int32 `protobuf:"zigzag32,2,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	/// The most recent packet sequence number sent on the incremental feed
	// at the time this message was sent.  For UDP snapshot and definition feeds.
	SyncSequence int64 `protobuf:"varint,3,opt,name=syncSequence,proto3" json:"syncSequence,omitempty"`
	// Feed specific context data
	Context *Context `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*OpenfeedMessage_ChannelReset
	//	*OpenfeedMessage_HeartBeat
	//	*OpenfeedMessage_AdminMessage
	//	*OpenfeedMessage_InstrumentDefinition
	//	*OpenfeedMessage_InstrumentGroupStatus
	//	*OpenfeedMessage_MarketSnapshot
	//	*OpenfeedMessage_MarketUpdate
	//	*OpenfeedMessage_MarketStatus
	Data                 isOpenfeedMessage_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *OpenfeedMessage) Reset()         { *m = OpenfeedMessage{} }
func (m *OpenfeedMessage) String() string { return proto.CompactTextString(m) }
func (*OpenfeedMessage) ProtoMessage()    {}
func (*OpenfeedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{0}
}

func (m *OpenfeedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenfeedMessage.Unmarshal(m, b)
}
func (m *OpenfeedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenfeedMessage.Marshal(b, m, deterministic)
}
func (m *OpenfeedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenfeedMessage.Merge(m, src)
}
func (m *OpenfeedMessage) XXX_Size() int {
	return xxx_messageInfo_OpenfeedMessage.Size(m)
}
func (m *OpenfeedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenfeedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OpenfeedMessage proto.InternalMessageInfo

func (m *OpenfeedMessage) GetSendingTime() int64 {
	if m != nil {
		return m.SendingTime
	}
	return 0
}

func (m *OpenfeedMessage) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *OpenfeedMessage) GetSyncSequence() int64 {
	if m != nil {
		return m.SyncSequence
	}
	return 0
}

func (m *OpenfeedMessage) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type isOpenfeedMessage_Data interface {
	isOpenfeedMessage_Data()
}

type OpenfeedMessage_ChannelReset struct {
	ChannelReset *ChannelReset `protobuf:"bytes,10,opt,name=channelReset,proto3,oneof"`
}

type OpenfeedMessage_HeartBeat struct {
	HeartBeat *HeartBeat `protobuf:"bytes,11,opt,name=heartBeat,proto3,oneof"`
}

type OpenfeedMessage_AdminMessage struct {
	AdminMessage *AdminMessage `protobuf:"bytes,12,opt,name=adminMessage,proto3,oneof"`
}

type OpenfeedMessage_InstrumentDefinition struct {
	InstrumentDefinition *InstrumentDefinition `protobuf:"bytes,13,opt,name=instrumentDefinition,proto3,oneof"`
}

type OpenfeedMessage_InstrumentGroupStatus struct {
	InstrumentGroupStatus *InstrumentGroupStatus `protobuf:"bytes,14,opt,name=instrumentGroupStatus,proto3,oneof"`
}

type OpenfeedMessage_MarketSnapshot struct {
	MarketSnapshot *MarketSnapshot `protobuf:"bytes,15,opt,name=marketSnapshot,proto3,oneof"`
}

type OpenfeedMessage_MarketUpdate struct {
	MarketUpdate *MarketUpdate `protobuf:"bytes,16,opt,name=marketUpdate,proto3,oneof"`
}

type OpenfeedMessage_MarketStatus struct {
	MarketStatus *MarketStatus `protobuf:"bytes,17,opt,name=marketStatus,proto3,oneof"`
}

func (*OpenfeedMessage_ChannelReset) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_HeartBeat) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_AdminMessage) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_InstrumentDefinition) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_InstrumentGroupStatus) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_MarketSnapshot) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_MarketUpdate) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_MarketStatus) isOpenfeedMessage_Data() {}

func (m *OpenfeedMessage) GetData() isOpenfeedMessage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *OpenfeedMessage) GetChannelReset() *ChannelReset {
	if x, ok := m.GetData().(*OpenfeedMessage_ChannelReset); ok {
		return x.ChannelReset
	}
	return nil
}

func (m *OpenfeedMessage) GetHeartBeat() *HeartBeat {
	if x, ok := m.GetData().(*OpenfeedMessage_HeartBeat); ok {
		return x.HeartBeat
	}
	return nil
}

func (m *OpenfeedMessage) GetAdminMessage() *AdminMessage {
	if x, ok := m.GetData().(*OpenfeedMessage_AdminMessage); ok {
		return x.AdminMessage
	}
	return nil
}

func (m *OpenfeedMessage) GetInstrumentDefinition() *InstrumentDefinition {
	if x, ok := m.GetData().(*OpenfeedMessage_InstrumentDefinition); ok {
		return x.InstrumentDefinition
	}
	return nil
}

func (m *OpenfeedMessage) GetInstrumentGroupStatus() *InstrumentGroupStatus {
	if x, ok := m.GetData().(*OpenfeedMessage_InstrumentGroupStatus); ok {
		return x.InstrumentGroupStatus
	}
	return nil
}

func (m *OpenfeedMessage) GetMarketSnapshot() *MarketSnapshot {
	if x, ok := m.GetData().(*OpenfeedMessage_MarketSnapshot); ok {
		return x.MarketSnapshot
	}
	return nil
}

func (m *OpenfeedMessage) GetMarketUpdate() *MarketUpdate {
	if x, ok := m.GetData().(*OpenfeedMessage_MarketUpdate); ok {
		return x.MarketUpdate
	}
	return nil
}

func (m *OpenfeedMessage) GetMarketStatus() *MarketStatus {
	if x, ok := m.GetData().(*OpenfeedMessage_MarketStatus); ok {
		return x.MarketStatus
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OpenfeedMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OpenfeedMessage_ChannelReset)(nil),
		(*OpenfeedMessage_HeartBeat)(nil),
		(*OpenfeedMessage_AdminMessage)(nil),
		(*OpenfeedMessage_InstrumentDefinition)(nil),
		(*OpenfeedMessage_InstrumentGroupStatus)(nil),
		(*OpenfeedMessage_MarketSnapshot)(nil),
		(*OpenfeedMessage_MarketUpdate)(nil),
		(*OpenfeedMessage_MarketStatus)(nil),
	}
}

// Channel Reset
type ChannelReset struct {
	Channel              int32    `protobuf:"zigzag32,1,opt,name=channel,proto3" json:"channel,omitempty"`
	TransactionTime      int64    `protobuf:"zigzag64,2,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelReset) Reset()         { *m = ChannelReset{} }
func (m *ChannelReset) String() string { return proto.CompactTextString(m) }
func (*ChannelReset) ProtoMessage()    {}
func (*ChannelReset) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{1}
}

func (m *ChannelReset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelReset.Unmarshal(m, b)
}
func (m *ChannelReset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelReset.Marshal(b, m, deterministic)
}
func (m *ChannelReset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelReset.Merge(m, src)
}
func (m *ChannelReset) XXX_Size() int {
	return xxx_messageInfo_ChannelReset.Size(m)
}
func (m *ChannelReset) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelReset.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelReset proto.InternalMessageInfo

func (m *ChannelReset) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *ChannelReset) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

/// Heart Beat
type HeartBeat struct {
	/// UTC timestamp of transaction, nano seconds since Unix epoch
	TransactionTime      int64    `protobuf:"zigzag64,1,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	Status               string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Exchange             bool     `protobuf:"varint,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Channel              int32    `protobuf:"zigzag32,4,opt,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartBeat) Reset()         { *m = HeartBeat{} }
func (m *HeartBeat) String() string { return proto.CompactTextString(m) }
func (*HeartBeat) ProtoMessage()    {}
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{2}
}

func (m *HeartBeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartBeat.Unmarshal(m, b)
}
func (m *HeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartBeat.Marshal(b, m, deterministic)
}
func (m *HeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeat.Merge(m, src)
}
func (m *HeartBeat) XXX_Size() int {
	return xxx_messageInfo_HeartBeat.Size(m)
}
func (m *HeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeat proto.InternalMessageInfo

func (m *HeartBeat) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *HeartBeat) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *HeartBeat) GetExchange() bool {
	if m != nil {
		return m.Exchange
	}
	return false
}

func (m *HeartBeat) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

// Administrative Message
type AdminMessage struct {
	// Origination time = UTC timestamp nano seconds since Unix epoch
	OriginationTime      int64               `protobuf:"zigzag64,1,opt,name=originationTime,proto3" json:"originationTime,omitempty"`
	Source               string              `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	LanguageCode         string              `protobuf:"bytes,3,opt,name=languageCode,proto3" json:"languageCode,omitempty"`
	HeadLine             string              `protobuf:"bytes,4,opt,name=headLine,proto3" json:"headLine,omitempty"`
	Text                 string              `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	Status               AdminMessage_Status `protobuf:"varint,6,opt,name=status,proto3,enum=org.openfeed.AdminMessage_Status" json:"status,omitempty"`
	Channel              int32               `protobuf:"zigzag32,7,opt,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AdminMessage) Reset()         { *m = AdminMessage{} }
func (m *AdminMessage) String() string { return proto.CompactTextString(m) }
func (*AdminMessage) ProtoMessage()    {}
func (*AdminMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{3}
}

func (m *AdminMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdminMessage.Unmarshal(m, b)
}
func (m *AdminMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdminMessage.Marshal(b, m, deterministic)
}
func (m *AdminMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminMessage.Merge(m, src)
}
func (m *AdminMessage) XXX_Size() int {
	return xxx_messageInfo_AdminMessage.Size(m)
}
func (m *AdminMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AdminMessage proto.InternalMessageInfo

func (m *AdminMessage) GetOriginationTime() int64 {
	if m != nil {
		return m.OriginationTime
	}
	return 0
}

func (m *AdminMessage) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *AdminMessage) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func (m *AdminMessage) GetHeadLine() string {
	if m != nil {
		return m.HeadLine
	}
	return ""
}

func (m *AdminMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *AdminMessage) GetStatus() AdminMessage_Status {
	if m != nil {
		return m.Status
	}
	return AdminMessage_OK
}

func (m *AdminMessage) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

/// Instrument Group Status
type InstrumentGroupStatus struct {
	/// UTC Timestamp of transaction, nano seconds since Unix epoch
	TransactionTime      int64                   `protobuf:"zigzag64,1,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	InstrumentGroupId    string                  `protobuf:"bytes,2,opt,name=instrumentGroupId,proto3" json:"instrumentGroupId,omitempty"`
	TradingStatus        InstrumentTradingStatus `protobuf:"varint,3,opt,name=tradingStatus,proto3,enum=org.openfeed.InstrumentTradingStatus" json:"tradingStatus,omitempty"`
	TradeDate            int32                   `protobuf:"zigzag32,4,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	Channel              int32                   `protobuf:"zigzag32,5,opt,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *InstrumentGroupStatus) Reset()         { *m = InstrumentGroupStatus{} }
func (m *InstrumentGroupStatus) String() string { return proto.CompactTextString(m) }
func (*InstrumentGroupStatus) ProtoMessage()    {}
func (*InstrumentGroupStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{4}
}

func (m *InstrumentGroupStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentGroupStatus.Unmarshal(m, b)
}
func (m *InstrumentGroupStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentGroupStatus.Marshal(b, m, deterministic)
}
func (m *InstrumentGroupStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentGroupStatus.Merge(m, src)
}
func (m *InstrumentGroupStatus) XXX_Size() int {
	return xxx_messageInfo_InstrumentGroupStatus.Size(m)
}
func (m *InstrumentGroupStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentGroupStatus.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentGroupStatus proto.InternalMessageInfo

func (m *InstrumentGroupStatus) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *InstrumentGroupStatus) GetInstrumentGroupId() string {
	if m != nil {
		return m.InstrumentGroupId
	}
	return ""
}

func (m *InstrumentGroupStatus) GetTradingStatus() InstrumentTradingStatus {
	if m != nil {
		return m.TradingStatus
	}
	return InstrumentTradingStatus_UNKNOWN_TRADING_STATUS
}

func (m *InstrumentGroupStatus) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *InstrumentGroupStatus) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

/// Market Status
type MarketStatus struct {
	/// UTC Timestamp of transaction, nano seconds since Unix epoch
	TransactionTime      int64            `protobuf:"zigzag64,1,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	Channel              int32            `protobuf:"zigzag32,2,opt,name=channel,proto3" json:"channel,omitempty"`
	MarketWideStatus     MarketWideStatus `protobuf:"varint,3,opt,name=marketWideStatus,proto3,enum=org.openfeed.MarketWideStatus" json:"marketWideStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MarketStatus) Reset()         { *m = MarketStatus{} }
func (m *MarketStatus) String() string { return proto.CompactTextString(m) }
func (*MarketStatus) ProtoMessage()    {}
func (*MarketStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{5}
}

func (m *MarketStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketStatus.Unmarshal(m, b)
}
func (m *MarketStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketStatus.Marshal(b, m, deterministic)
}
func (m *MarketStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketStatus.Merge(m, src)
}
func (m *MarketStatus) XXX_Size() int {
	return xxx_messageInfo_MarketStatus.Size(m)
}
func (m *MarketStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MarketStatus proto.InternalMessageInfo

func (m *MarketStatus) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *MarketStatus) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *MarketStatus) GetMarketWideStatus() MarketWideStatus {
	if m != nil {
		return m.MarketWideStatus
	}
	return MarketWideStatus_STATUS_UNKNOWN
}

/// Session used in snapshot.
type MarketSession struct {
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,4,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Most recent opening price
	Open *Open `protobuf:"bytes,30,opt,name=open,proto3" json:"open,omitempty"`
	/// High price for the trading session
	High *High `protobuf:"bytes,31,opt,name=high,proto3" json:"high,omitempty"`
	/// Low price for the trading session
	Low *Low `protobuf:"bytes,32,opt,name=low,proto3" json:"low,omitempty"`
	/// Most recent traded price and quantity
	Last *Last `protobuf:"bytes,35,opt,name=last,proto3" json:"last,omitempty"`
	/// Total traded volume
	Volume *Volume `protobuf:"bytes,38,opt,name=volume,proto3" json:"volume,omitempty"`
	/// Most recent settlement price
	Settlement *Settlement `protobuf:"bytes,39,opt,name=settlement,proto3" json:"settlement,omitempty"`
	/// Most recent settlement price
	PrevSettlement *Settlement `protobuf:"bytes,44,opt,name=prevSettlement,proto3" json:"prevSettlement,omitempty"`
	/// Most recent open interest
	OpenInterest *OpenInterest `protobuf:"bytes,40,opt,name=openInterest,proto3" json:"openInterest,omitempty"`
	/// Number of trades
	NumberOfTrades *NumberOfTrades `protobuf:"bytes,41,opt,name=numberOfTrades,proto3" json:"numberOfTrades,omitempty"`
	/// Monetary value
	MonetaryValue        *MonetaryValue `protobuf:"bytes,42,opt,name=monetaryValue,proto3" json:"monetaryValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MarketSession) Reset()         { *m = MarketSession{} }
func (m *MarketSession) String() string { return proto.CompactTextString(m) }
func (*MarketSession) ProtoMessage()    {}
func (*MarketSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{6}
}

func (m *MarketSession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketSession.Unmarshal(m, b)
}
func (m *MarketSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketSession.Marshal(b, m, deterministic)
}
func (m *MarketSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketSession.Merge(m, src)
}
func (m *MarketSession) XXX_Size() int {
	return xxx_messageInfo_MarketSession.Size(m)
}
func (m *MarketSession) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketSession.DiscardUnknown(m)
}

var xxx_messageInfo_MarketSession proto.InternalMessageInfo

func (m *MarketSession) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *MarketSession) GetOpen() *Open {
	if m != nil {
		return m.Open
	}
	return nil
}

func (m *MarketSession) GetHigh() *High {
	if m != nil {
		return m.High
	}
	return nil
}

func (m *MarketSession) GetLow() *Low {
	if m != nil {
		return m.Low
	}
	return nil
}

func (m *MarketSession) GetLast() *Last {
	if m != nil {
		return m.Last
	}
	return nil
}

func (m *MarketSession) GetVolume() *Volume {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *MarketSession) GetSettlement() *Settlement {
	if m != nil {
		return m.Settlement
	}
	return nil
}

func (m *MarketSession) GetPrevSettlement() *Settlement {
	if m != nil {
		return m.PrevSettlement
	}
	return nil
}

func (m *MarketSession) GetOpenInterest() *OpenInterest {
	if m != nil {
		return m.OpenInterest
	}
	return nil
}

func (m *MarketSession) GetNumberOfTrades() *NumberOfTrades {
	if m != nil {
		return m.NumberOfTrades
	}
	return nil
}

func (m *MarketSession) GetMonetaryValue() *MonetaryValue {
	if m != nil {
		return m.MonetaryValue
	}
	return nil
}

/// Snapshot for a market
type MarketSnapshot struct {
	/// Unique id identifying the market
	MarketId int64 `protobuf:"zigzag64,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	// UTC Timestamp of transaction, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,2,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	// Instrument level sequence number
	MarketSequence int64 `protobuf:"varint,3,opt,name=marketSequence,proto3" json:"marketSequence,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,4,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// A snapshot with market depth may exceed the maximum message size.
	//  In that case, the snapshot will be broken up across multiple
	//  snapshot messages.
	TotalChunks  int32 `protobuf:"zigzag32,5,opt,name=totalChunks,proto3" json:"totalChunks,omitempty"`
	CurrentChunk int32 `protobuf:"zigzag32,6,opt,name=currentChunk,proto3" json:"currentChunk,omitempty"`
	// Optional symbol identifier
	Symbol string `protobuf:"bytes,7,opt,name=symbol,proto3" json:"symbol,omitempty"`
	/// Divide prices by this value to get real price values.  Optional, use value
	/// from InstrumentDefinition if not set.
	PriceDenominator int32 `protobuf:"zigzag32,8,opt,name=priceDenominator,proto3" json:"priceDenominator,omitempty"`
	//
	Service Service `protobuf:"varint,9,opt,name=service,proto3,enum=org.openfeed.Service" json:"service,omitempty"`
	//
	InstrumentStatus *InstrumentStatus `protobuf:"bytes,10,opt,name=instrumentStatus,proto3" json:"instrumentStatus,omitempty"`
	// Best Bid Offer
	Bbo *BestBidOffer `protobuf:"bytes,11,opt,name=bbo,proto3" json:"bbo,omitempty"`
	// Index Value
	Index *IndexValue `protobuf:"bytes,12,opt,name=index,proto3" json:"index,omitempty"`
	// Price Level Book
	PriceLevels []*AddPriceLevel `protobuf:"bytes,13,rep,name=priceLevels,proto3" json:"priceLevels,omitempty"`
	// Order Book
	Orders []*AddOrder `protobuf:"bytes,14,rep,name=orders,proto3" json:"orders,omitempty"`
	News   *News       `protobuf:"bytes,15,opt,name=news,proto3" json:"news,omitempty"`
	/// Most recent opening price
	Open *Open `protobuf:"bytes,30,opt,name=open,proto3" json:"open,omitempty"`
	/// High price for the trading session
	High *High `protobuf:"bytes,31,opt,name=high,proto3" json:"high,omitempty"`
	/// Low price for the trading session
	Low *Low `protobuf:"bytes,32,opt,name=low,proto3" json:"low,omitempty"`
	/// Most recent closing price
	Close *Close `protobuf:"bytes,33,opt,name=close,proto3" json:"close,omitempty"`
	/// Previous closing price
	PrevClose *PrevClose `protobuf:"bytes,34,opt,name=prevClose,proto3" json:"prevClose,omitempty"`
	/// Most recent traded price and quantity
	Last *Last `protobuf:"bytes,35,opt,name=last,proto3" json:"last,omitempty"`
	/// Year high price
	YearHigh *YearHigh `protobuf:"bytes,36,opt,name=yearHigh,proto3" json:"yearHigh,omitempty"`
	/// Year low price
	YearLow *YearLow `protobuf:"bytes,37,opt,name=yearLow,proto3" json:"yearLow,omitempty"`
	/// Total traded volume
	Volume *Volume `protobuf:"bytes,38,opt,name=volume,proto3" json:"volume,omitempty"`
	/// Most recent settlement price
	Settlement *Settlement `protobuf:"bytes,39,opt,name=settlement,proto3" json:"settlement,omitempty"`
	/// Most recent open interest
	OpenInterest *OpenInterest `protobuf:"bytes,40,opt,name=openInterest,proto3" json:"openInterest,omitempty"`
	/// Most recent volume weighted average price
	Vwap                         *Vwap                         `protobuf:"bytes,41,opt,name=vwap,proto3" json:"vwap,omitempty"`
	DividendsIncomeDistributions *DividendsIncomeDistributions `protobuf:"bytes,42,opt,name=dividendsIncomeDistributions,proto3" json:"dividendsIncomeDistributions,omitempty"`
	NumberOfTrades               *NumberOfTrades               `protobuf:"bytes,43,opt,name=numberOfTrades,proto3" json:"numberOfTrades,omitempty"`
	MonetaryValue                *MonetaryValue                `protobuf:"bytes,44,opt,name=monetaryValue,proto3" json:"monetaryValue,omitempty"`
	CapitalDistributions         *CapitalDistributions         `protobuf:"bytes,45,opt,name=capitalDistributions,proto3" json:"capitalDistributions,omitempty"`
	SharesOutstanding            *SharesOutstanding            `protobuf:"bytes,46,opt,name=sharesOutstanding,proto3" json:"sharesOutstanding,omitempty"`
	NetAssetValue                *NetAssetValue                `protobuf:"bytes,47,opt,name=netAssetValue,proto3" json:"netAssetValue,omitempty"`
	/// Previous session.
	PreviousSession *MarketSession `protobuf:"bytes,48,opt,name=previousSession,proto3" json:"previousSession,omitempty"`
	/// 'T' session.
	TSession *MarketSession `protobuf:"bytes,49,opt,name=tSession,proto3" json:"tSession,omitempty"`
	/// Volume at price. Used by the market state/ JERQ.
	VolumeAtPrice        *VolumeAtPrice `protobuf:"bytes,50,opt,name=volumeAtPrice,proto3" json:"volumeAtPrice,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MarketSnapshot) Reset()         { *m = MarketSnapshot{} }
func (m *MarketSnapshot) String() string { return proto.CompactTextString(m) }
func (*MarketSnapshot) ProtoMessage()    {}
func (*MarketSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{7}
}

func (m *MarketSnapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketSnapshot.Unmarshal(m, b)
}
func (m *MarketSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketSnapshot.Marshal(b, m, deterministic)
}
func (m *MarketSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketSnapshot.Merge(m, src)
}
func (m *MarketSnapshot) XXX_Size() int {
	return xxx_messageInfo_MarketSnapshot.Size(m)
}
func (m *MarketSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_MarketSnapshot proto.InternalMessageInfo

func (m *MarketSnapshot) GetMarketId() int64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MarketSnapshot) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *MarketSnapshot) GetMarketSequence() int64 {
	if m != nil {
		return m.MarketSequence
	}
	return 0
}

func (m *MarketSnapshot) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *MarketSnapshot) GetTotalChunks() int32 {
	if m != nil {
		return m.TotalChunks
	}
	return 0
}

func (m *MarketSnapshot) GetCurrentChunk() int32 {
	if m != nil {
		return m.CurrentChunk
	}
	return 0
}

func (m *MarketSnapshot) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MarketSnapshot) GetPriceDenominator() int32 {
	if m != nil {
		return m.PriceDenominator
	}
	return 0
}

func (m *MarketSnapshot) GetService() Service {
	if m != nil {
		return m.Service
	}
	return Service_UNKNOWN_SERVICE
}

func (m *MarketSnapshot) GetInstrumentStatus() *InstrumentStatus {
	if m != nil {
		return m.InstrumentStatus
	}
	return nil
}

func (m *MarketSnapshot) GetBbo() *BestBidOffer {
	if m != nil {
		return m.Bbo
	}
	return nil
}

func (m *MarketSnapshot) GetIndex() *IndexValue {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *MarketSnapshot) GetPriceLevels() []*AddPriceLevel {
	if m != nil {
		return m.PriceLevels
	}
	return nil
}

func (m *MarketSnapshot) GetOrders() []*AddOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *MarketSnapshot) GetNews() *News {
	if m != nil {
		return m.News
	}
	return nil
}

func (m *MarketSnapshot) GetOpen() *Open {
	if m != nil {
		return m.Open
	}
	return nil
}

func (m *MarketSnapshot) GetHigh() *High {
	if m != nil {
		return m.High
	}
	return nil
}

func (m *MarketSnapshot) GetLow() *Low {
	if m != nil {
		return m.Low
	}
	return nil
}

func (m *MarketSnapshot) GetClose() *Close {
	if m != nil {
		return m.Close
	}
	return nil
}

func (m *MarketSnapshot) GetPrevClose() *PrevClose {
	if m != nil {
		return m.PrevClose
	}
	return nil
}

func (m *MarketSnapshot) GetLast() *Last {
	if m != nil {
		return m.Last
	}
	return nil
}

func (m *MarketSnapshot) GetYearHigh() *YearHigh {
	if m != nil {
		return m.YearHigh
	}
	return nil
}

func (m *MarketSnapshot) GetYearLow() *YearLow {
	if m != nil {
		return m.YearLow
	}
	return nil
}

func (m *MarketSnapshot) GetVolume() *Volume {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *MarketSnapshot) GetSettlement() *Settlement {
	if m != nil {
		return m.Settlement
	}
	return nil
}

func (m *MarketSnapshot) GetOpenInterest() *OpenInterest {
	if m != nil {
		return m.OpenInterest
	}
	return nil
}

func (m *MarketSnapshot) GetVwap() *Vwap {
	if m != nil {
		return m.Vwap
	}
	return nil
}

func (m *MarketSnapshot) GetDividendsIncomeDistributions() *DividendsIncomeDistributions {
	if m != nil {
		return m.DividendsIncomeDistributions
	}
	return nil
}

func (m *MarketSnapshot) GetNumberOfTrades() *NumberOfTrades {
	if m != nil {
		return m.NumberOfTrades
	}
	return nil
}

func (m *MarketSnapshot) GetMonetaryValue() *MonetaryValue {
	if m != nil {
		return m.MonetaryValue
	}
	return nil
}

func (m *MarketSnapshot) GetCapitalDistributions() *CapitalDistributions {
	if m != nil {
		return m.CapitalDistributions
	}
	return nil
}

func (m *MarketSnapshot) GetSharesOutstanding() *SharesOutstanding {
	if m != nil {
		return m.SharesOutstanding
	}
	return nil
}

func (m *MarketSnapshot) GetNetAssetValue() *NetAssetValue {
	if m != nil {
		return m.NetAssetValue
	}
	return nil
}

func (m *MarketSnapshot) GetPreviousSession() *MarketSession {
	if m != nil {
		return m.PreviousSession
	}
	return nil
}

func (m *MarketSnapshot) GetTSession() *MarketSession {
	if m != nil {
		return m.TSession
	}
	return nil
}

func (m *MarketSnapshot) GetVolumeAtPrice() *VolumeAtPrice {
	if m != nil {
		return m.VolumeAtPrice
	}
	return nil
}

// Used by market state to return snapshot.
type MarketSnapshotResponse struct {
	Result               SnapshotRequestResult `protobuf:"varint,1,opt,name=result,proto3,enum=org.openfeed.SnapshotRequestResult" json:"result,omitempty"`
	Message              string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	MarketSnapshot       *MarketSnapshot       `protobuf:"bytes,3,opt,name=marketSnapshot,proto3" json:"marketSnapshot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MarketSnapshotResponse) Reset()         { *m = MarketSnapshotResponse{} }
func (m *MarketSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*MarketSnapshotResponse) ProtoMessage()    {}
func (*MarketSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{8}
}

func (m *MarketSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketSnapshotResponse.Unmarshal(m, b)
}
func (m *MarketSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketSnapshotResponse.Marshal(b, m, deterministic)
}
func (m *MarketSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketSnapshotResponse.Merge(m, src)
}
func (m *MarketSnapshotResponse) XXX_Size() int {
	return xxx_messageInfo_MarketSnapshotResponse.Size(m)
}
func (m *MarketSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarketSnapshotResponse proto.InternalMessageInfo

func (m *MarketSnapshotResponse) GetResult() SnapshotRequestResult {
	if m != nil {
		return m.Result
	}
	return SnapshotRequestResult_SNAPSHOT_REQUEST_UNKNOWN_RESULT
}

func (m *MarketSnapshotResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MarketSnapshotResponse) GetMarketSnapshot() *MarketSnapshot {
	if m != nil {
		return m.MarketSnapshot
	}
	return nil
}

//
// Market Update for an instrument
//
type MarketUpdate struct {
	/// Unique id identifying the market
	MarketId int64 `protobuf:"zigzag64,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	// Optional symbol identifier
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	/// UTC Timestamp of transaction, nano seconds since Unix epoch
	/// This is usually the execution venue timestamp.
	TransactionTime int64 `protobuf:"zigzag64,3,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Distribution time in nano seconds since epoch.
	DistributionTime int64 `protobuf:"zigzag64,4,opt,name=distributionTime,proto3" json:"distributionTime,omitempty"`
	/// Market level sequencing number
	MarketSequence int64 `protobuf:"zigzag64,5,opt,name=marketSequence,proto3" json:"marketSequence,omitempty"`
	/// Data source sequence number
	SourceSequence int64 `protobuf:"zigzag64,6,opt,name=sourceSequence,proto3" json:"sourceSequence,omitempty"`
	// Market participant/originator
	OriginatorId []byte `protobuf:"bytes,7,opt,name=originatorId,proto3" json:"originatorId,omitempty"`
	/// True if data is consolidated over many market participants/originators
	Consolidated bool `protobuf:"varint,8,opt,name=consolidated,proto3" json:"consolidated,omitempty"`
	/// Divide prices by this value to get real price values.  Optional, use value
	/// from InstrumentDefinition if not set.
	PriceDenominator int32 `protobuf:"zigzag32,9,opt,name=priceDenominator,proto3" json:"priceDenominator,omitempty"`
	// Feed specific context data set as required.
	Context *Context `protobuf:"bytes,10,opt,name=context,proto3" json:"context,omitempty"`
	/// Current session. This is used to 'enhance' updates from the translator in the Market State
	Session *MarketSession `protobuf:"bytes,11,opt,name=session,proto3" json:"session,omitempty"`
	/// 'T' session. This is used to 'enhance' updates from the translator in the Market State
	TSession *MarketSession `protobuf:"bytes,12,opt,name=tSession,proto3" json:"tSession,omitempty"`
	/// Previous session. This is used to 'enhance' updates from the translator in the Market State
	PreviousSession *MarketSession `protobuf:"bytes,13,opt,name=previousSession,proto3" json:"previousSession,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*MarketUpdate_News
	//	*MarketUpdate_ClearBook
	//	*MarketUpdate_InstrumentStatus
	//	*MarketUpdate_Bbo
	//	*MarketUpdate_DepthPriceLevel
	//	*MarketUpdate_DepthOrder
	//	*MarketUpdate_Index
	//	*MarketUpdate_Trades
	//	*MarketUpdate_Open
	//	*MarketUpdate_High
	//	*MarketUpdate_Low
	//	*MarketUpdate_Close
	//	*MarketUpdate_PrevClose
	//	*MarketUpdate_Last
	//	*MarketUpdate_YearHigh
	//	*MarketUpdate_YearLow
	//	*MarketUpdate_Volume
	//	*MarketUpdate_Settlement
	//	*MarketUpdate_OpenInterest
	//	*MarketUpdate_Vwap
	//	*MarketUpdate_DividendsIncomeDistributions
	//	*MarketUpdate_NumberOfTrades
	//	*MarketUpdate_MonetaryValue
	//	*MarketUpdate_CapitalDistributions
	//	*MarketUpdate_SharesOutstanding
	//	*MarketUpdate_NetAssetValue
	//	*MarketUpdate_MarketSummary
	Data                 isMarketUpdate_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MarketUpdate) Reset()         { *m = MarketUpdate{} }
func (m *MarketUpdate) String() string { return proto.CompactTextString(m) }
func (*MarketUpdate) ProtoMessage()    {}
func (*MarketUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{9}
}

func (m *MarketUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketUpdate.Unmarshal(m, b)
}
func (m *MarketUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketUpdate.Marshal(b, m, deterministic)
}
func (m *MarketUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketUpdate.Merge(m, src)
}
func (m *MarketUpdate) XXX_Size() int {
	return xxx_messageInfo_MarketUpdate.Size(m)
}
func (m *MarketUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MarketUpdate proto.InternalMessageInfo

func (m *MarketUpdate) GetMarketId() int64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MarketUpdate) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MarketUpdate) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *MarketUpdate) GetDistributionTime() int64 {
	if m != nil {
		return m.DistributionTime
	}
	return 0
}

func (m *MarketUpdate) GetMarketSequence() int64 {
	if m != nil {
		return m.MarketSequence
	}
	return 0
}

func (m *MarketUpdate) GetSourceSequence() int64 {
	if m != nil {
		return m.SourceSequence
	}
	return 0
}

func (m *MarketUpdate) GetOriginatorId() []byte {
	if m != nil {
		return m.OriginatorId
	}
	return nil
}

func (m *MarketUpdate) GetConsolidated() bool {
	if m != nil {
		return m.Consolidated
	}
	return false
}

func (m *MarketUpdate) GetPriceDenominator() int32 {
	if m != nil {
		return m.PriceDenominator
	}
	return 0
}

func (m *MarketUpdate) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *MarketUpdate) GetSession() *MarketSession {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *MarketUpdate) GetTSession() *MarketSession {
	if m != nil {
		return m.TSession
	}
	return nil
}

func (m *MarketUpdate) GetPreviousSession() *MarketSession {
	if m != nil {
		return m.PreviousSession
	}
	return nil
}

type isMarketUpdate_Data interface {
	isMarketUpdate_Data()
}

type MarketUpdate_News struct {
	News *News `protobuf:"bytes,20,opt,name=news,proto3,oneof"`
}

type MarketUpdate_ClearBook struct {
	ClearBook *ClearBook `protobuf:"bytes,21,opt,name=clearBook,proto3,oneof"`
}

type MarketUpdate_InstrumentStatus struct {
	InstrumentStatus *InstrumentStatus `protobuf:"bytes,22,opt,name=instrumentStatus,proto3,oneof"`
}

type MarketUpdate_Bbo struct {
	Bbo *BestBidOffer `protobuf:"bytes,23,opt,name=bbo,proto3,oneof"`
}

type MarketUpdate_DepthPriceLevel struct {
	DepthPriceLevel *DepthPriceLevel `protobuf:"bytes,24,opt,name=depthPriceLevel,proto3,oneof"`
}

type MarketUpdate_DepthOrder struct {
	DepthOrder *DepthOrder `protobuf:"bytes,25,opt,name=depthOrder,proto3,oneof"`
}

type MarketUpdate_Index struct {
	Index *IndexValue `protobuf:"bytes,26,opt,name=index,proto3,oneof"`
}

type MarketUpdate_Trades struct {
	Trades *Trades `protobuf:"bytes,27,opt,name=trades,proto3,oneof"`
}

type MarketUpdate_Open struct {
	Open *Open `protobuf:"bytes,28,opt,name=open,proto3,oneof"`
}

type MarketUpdate_High struct {
	High *High `protobuf:"bytes,29,opt,name=high,proto3,oneof"`
}

type MarketUpdate_Low struct {
	Low *Low `protobuf:"bytes,30,opt,name=low,proto3,oneof"`
}

type MarketUpdate_Close struct {
	Close *Close `protobuf:"bytes,31,opt,name=close,proto3,oneof"`
}

type MarketUpdate_PrevClose struct {
	PrevClose *PrevClose `protobuf:"bytes,32,opt,name=prevClose,proto3,oneof"`
}

type MarketUpdate_Last struct {
	Last *Last `protobuf:"bytes,33,opt,name=last,proto3,oneof"`
}

type MarketUpdate_YearHigh struct {
	YearHigh *YearHigh `protobuf:"bytes,34,opt,name=yearHigh,proto3,oneof"`
}

type MarketUpdate_YearLow struct {
	YearLow *YearLow `protobuf:"bytes,35,opt,name=yearLow,proto3,oneof"`
}

type MarketUpdate_Volume struct {
	Volume *Volume `protobuf:"bytes,36,opt,name=volume,proto3,oneof"`
}

type MarketUpdate_Settlement struct {
	Settlement *Settlement `protobuf:"bytes,37,opt,name=settlement,proto3,oneof"`
}

type MarketUpdate_OpenInterest struct {
	OpenInterest *OpenInterest `protobuf:"bytes,38,opt,name=openInterest,proto3,oneof"`
}

type MarketUpdate_Vwap struct {
	Vwap *Vwap `protobuf:"bytes,39,opt,name=vwap,proto3,oneof"`
}

type MarketUpdate_DividendsIncomeDistributions struct {
	DividendsIncomeDistributions *DividendsIncomeDistributions `protobuf:"bytes,40,opt,name=dividendsIncomeDistributions,proto3,oneof"`
}

type MarketUpdate_NumberOfTrades struct {
	NumberOfTrades *NumberOfTrades `protobuf:"bytes,41,opt,name=numberOfTrades,proto3,oneof"`
}

type MarketUpdate_MonetaryValue struct {
	MonetaryValue *MonetaryValue `protobuf:"bytes,42,opt,name=monetaryValue,proto3,oneof"`
}

type MarketUpdate_CapitalDistributions struct {
	CapitalDistributions *CapitalDistributions `protobuf:"bytes,43,opt,name=capitalDistributions,proto3,oneof"`
}

type MarketUpdate_SharesOutstanding struct {
	SharesOutstanding *SharesOutstanding `protobuf:"bytes,44,opt,name=sharesOutstanding,proto3,oneof"`
}

type MarketUpdate_NetAssetValue struct {
	NetAssetValue *NetAssetValue `protobuf:"bytes,45,opt,name=netAssetValue,proto3,oneof"`
}

type MarketUpdate_MarketSummary struct {
	MarketSummary *MarketSummary `protobuf:"bytes,46,opt,name=marketSummary,proto3,oneof"`
}

func (*MarketUpdate_News) isMarketUpdate_Data() {}

func (*MarketUpdate_ClearBook) isMarketUpdate_Data() {}

func (*MarketUpdate_InstrumentStatus) isMarketUpdate_Data() {}

func (*MarketUpdate_Bbo) isMarketUpdate_Data() {}

func (*MarketUpdate_DepthPriceLevel) isMarketUpdate_Data() {}

func (*MarketUpdate_DepthOrder) isMarketUpdate_Data() {}

func (*MarketUpdate_Index) isMarketUpdate_Data() {}

func (*MarketUpdate_Trades) isMarketUpdate_Data() {}

func (*MarketUpdate_Open) isMarketUpdate_Data() {}

func (*MarketUpdate_High) isMarketUpdate_Data() {}

func (*MarketUpdate_Low) isMarketUpdate_Data() {}

func (*MarketUpdate_Close) isMarketUpdate_Data() {}

func (*MarketUpdate_PrevClose) isMarketUpdate_Data() {}

func (*MarketUpdate_Last) isMarketUpdate_Data() {}

func (*MarketUpdate_YearHigh) isMarketUpdate_Data() {}

func (*MarketUpdate_YearLow) isMarketUpdate_Data() {}

func (*MarketUpdate_Volume) isMarketUpdate_Data() {}

func (*MarketUpdate_Settlement) isMarketUpdate_Data() {}

func (*MarketUpdate_OpenInterest) isMarketUpdate_Data() {}

func (*MarketUpdate_Vwap) isMarketUpdate_Data() {}

func (*MarketUpdate_DividendsIncomeDistributions) isMarketUpdate_Data() {}

func (*MarketUpdate_NumberOfTrades) isMarketUpdate_Data() {}

func (*MarketUpdate_MonetaryValue) isMarketUpdate_Data() {}

func (*MarketUpdate_CapitalDistributions) isMarketUpdate_Data() {}

func (*MarketUpdate_SharesOutstanding) isMarketUpdate_Data() {}

func (*MarketUpdate_NetAssetValue) isMarketUpdate_Data() {}

func (*MarketUpdate_MarketSummary) isMarketUpdate_Data() {}

func (m *MarketUpdate) GetData() isMarketUpdate_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MarketUpdate) GetNews() *News {
	if x, ok := m.GetData().(*MarketUpdate_News); ok {
		return x.News
	}
	return nil
}

func (m *MarketUpdate) GetClearBook() *ClearBook {
	if x, ok := m.GetData().(*MarketUpdate_ClearBook); ok {
		return x.ClearBook
	}
	return nil
}

func (m *MarketUpdate) GetInstrumentStatus() *InstrumentStatus {
	if x, ok := m.GetData().(*MarketUpdate_InstrumentStatus); ok {
		return x.InstrumentStatus
	}
	return nil
}

func (m *MarketUpdate) GetBbo() *BestBidOffer {
	if x, ok := m.GetData().(*MarketUpdate_Bbo); ok {
		return x.Bbo
	}
	return nil
}

func (m *MarketUpdate) GetDepthPriceLevel() *DepthPriceLevel {
	if x, ok := m.GetData().(*MarketUpdate_DepthPriceLevel); ok {
		return x.DepthPriceLevel
	}
	return nil
}

func (m *MarketUpdate) GetDepthOrder() *DepthOrder {
	if x, ok := m.GetData().(*MarketUpdate_DepthOrder); ok {
		return x.DepthOrder
	}
	return nil
}

func (m *MarketUpdate) GetIndex() *IndexValue {
	if x, ok := m.GetData().(*MarketUpdate_Index); ok {
		return x.Index
	}
	return nil
}

func (m *MarketUpdate) GetTrades() *Trades {
	if x, ok := m.GetData().(*MarketUpdate_Trades); ok {
		return x.Trades
	}
	return nil
}

func (m *MarketUpdate) GetOpen() *Open {
	if x, ok := m.GetData().(*MarketUpdate_Open); ok {
		return x.Open
	}
	return nil
}

func (m *MarketUpdate) GetHigh() *High {
	if x, ok := m.GetData().(*MarketUpdate_High); ok {
		return x.High
	}
	return nil
}

func (m *MarketUpdate) GetLow() *Low {
	if x, ok := m.GetData().(*MarketUpdate_Low); ok {
		return x.Low
	}
	return nil
}

func (m *MarketUpdate) GetClose() *Close {
	if x, ok := m.GetData().(*MarketUpdate_Close); ok {
		return x.Close
	}
	return nil
}

func (m *MarketUpdate) GetPrevClose() *PrevClose {
	if x, ok := m.GetData().(*MarketUpdate_PrevClose); ok {
		return x.PrevClose
	}
	return nil
}

func (m *MarketUpdate) GetLast() *Last {
	if x, ok := m.GetData().(*MarketUpdate_Last); ok {
		return x.Last
	}
	return nil
}

func (m *MarketUpdate) GetYearHigh() *YearHigh {
	if x, ok := m.GetData().(*MarketUpdate_YearHigh); ok {
		return x.YearHigh
	}
	return nil
}

func (m *MarketUpdate) GetYearLow() *YearLow {
	if x, ok := m.GetData().(*MarketUpdate_YearLow); ok {
		return x.YearLow
	}
	return nil
}

func (m *MarketUpdate) GetVolume() *Volume {
	if x, ok := m.GetData().(*MarketUpdate_Volume); ok {
		return x.Volume
	}
	return nil
}

func (m *MarketUpdate) GetSettlement() *Settlement {
	if x, ok := m.GetData().(*MarketUpdate_Settlement); ok {
		return x.Settlement
	}
	return nil
}

func (m *MarketUpdate) GetOpenInterest() *OpenInterest {
	if x, ok := m.GetData().(*MarketUpdate_OpenInterest); ok {
		return x.OpenInterest
	}
	return nil
}

func (m *MarketUpdate) GetVwap() *Vwap {
	if x, ok := m.GetData().(*MarketUpdate_Vwap); ok {
		return x.Vwap
	}
	return nil
}

func (m *MarketUpdate) GetDividendsIncomeDistributions() *DividendsIncomeDistributions {
	if x, ok := m.GetData().(*MarketUpdate_DividendsIncomeDistributions); ok {
		return x.DividendsIncomeDistributions
	}
	return nil
}

func (m *MarketUpdate) GetNumberOfTrades() *NumberOfTrades {
	if x, ok := m.GetData().(*MarketUpdate_NumberOfTrades); ok {
		return x.NumberOfTrades
	}
	return nil
}

func (m *MarketUpdate) GetMonetaryValue() *MonetaryValue {
	if x, ok := m.GetData().(*MarketUpdate_MonetaryValue); ok {
		return x.MonetaryValue
	}
	return nil
}

func (m *MarketUpdate) GetCapitalDistributions() *CapitalDistributions {
	if x, ok := m.GetData().(*MarketUpdate_CapitalDistributions); ok {
		return x.CapitalDistributions
	}
	return nil
}

func (m *MarketUpdate) GetSharesOutstanding() *SharesOutstanding {
	if x, ok := m.GetData().(*MarketUpdate_SharesOutstanding); ok {
		return x.SharesOutstanding
	}
	return nil
}

func (m *MarketUpdate) GetNetAssetValue() *NetAssetValue {
	if x, ok := m.GetData().(*MarketUpdate_NetAssetValue); ok {
		return x.NetAssetValue
	}
	return nil
}

func (m *MarketUpdate) GetMarketSummary() *MarketSummary {
	if x, ok := m.GetData().(*MarketUpdate_MarketSummary); ok {
		return x.MarketSummary
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MarketUpdate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MarketUpdate_News)(nil),
		(*MarketUpdate_ClearBook)(nil),
		(*MarketUpdate_InstrumentStatus)(nil),
		(*MarketUpdate_Bbo)(nil),
		(*MarketUpdate_DepthPriceLevel)(nil),
		(*MarketUpdate_DepthOrder)(nil),
		(*MarketUpdate_Index)(nil),
		(*MarketUpdate_Trades)(nil),
		(*MarketUpdate_Open)(nil),
		(*MarketUpdate_High)(nil),
		(*MarketUpdate_Low)(nil),
		(*MarketUpdate_Close)(nil),
		(*MarketUpdate_PrevClose)(nil),
		(*MarketUpdate_Last)(nil),
		(*MarketUpdate_YearHigh)(nil),
		(*MarketUpdate_YearLow)(nil),
		(*MarketUpdate_Volume)(nil),
		(*MarketUpdate_Settlement)(nil),
		(*MarketUpdate_OpenInterest)(nil),
		(*MarketUpdate_Vwap)(nil),
		(*MarketUpdate_DividendsIncomeDistributions)(nil),
		(*MarketUpdate_NumberOfTrades)(nil),
		(*MarketUpdate_MonetaryValue)(nil),
		(*MarketUpdate_CapitalDistributions)(nil),
		(*MarketUpdate_SharesOutstanding)(nil),
		(*MarketUpdate_NetAssetValue)(nil),
		(*MarketUpdate_MarketSummary)(nil),
	}
}

/// Depth Price Level
type DepthPriceLevel struct {
	Levels               []*DepthPriceLevel_Entry `protobuf:"bytes,1,rep,name=levels,proto3" json:"levels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *DepthPriceLevel) Reset()         { *m = DepthPriceLevel{} }
func (m *DepthPriceLevel) String() string { return proto.CompactTextString(m) }
func (*DepthPriceLevel) ProtoMessage()    {}
func (*DepthPriceLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{10}
}

func (m *DepthPriceLevel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepthPriceLevel.Unmarshal(m, b)
}
func (m *DepthPriceLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepthPriceLevel.Marshal(b, m, deterministic)
}
func (m *DepthPriceLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepthPriceLevel.Merge(m, src)
}
func (m *DepthPriceLevel) XXX_Size() int {
	return xxx_messageInfo_DepthPriceLevel.Size(m)
}
func (m *DepthPriceLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_DepthPriceLevel.DiscardUnknown(m)
}

var xxx_messageInfo_DepthPriceLevel proto.InternalMessageInfo

func (m *DepthPriceLevel) GetLevels() []*DepthPriceLevel_Entry {
	if m != nil {
		return m.Levels
	}
	return nil
}

type DepthPriceLevel_Entry struct {
	// Types that are valid to be assigned to Data:
	//	*DepthPriceLevel_Entry_AddPriceLevel
	//	*DepthPriceLevel_Entry_DeletePriceLevel
	//	*DepthPriceLevel_Entry_ModifyPriceLevel
	Data                 isDepthPriceLevel_Entry_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *DepthPriceLevel_Entry) Reset()         { *m = DepthPriceLevel_Entry{} }
func (m *DepthPriceLevel_Entry) String() string { return proto.CompactTextString(m) }
func (*DepthPriceLevel_Entry) ProtoMessage()    {}
func (*DepthPriceLevel_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{10, 0}
}

func (m *DepthPriceLevel_Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepthPriceLevel_Entry.Unmarshal(m, b)
}
func (m *DepthPriceLevel_Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepthPriceLevel_Entry.Marshal(b, m, deterministic)
}
func (m *DepthPriceLevel_Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepthPriceLevel_Entry.Merge(m, src)
}
func (m *DepthPriceLevel_Entry) XXX_Size() int {
	return xxx_messageInfo_DepthPriceLevel_Entry.Size(m)
}
func (m *DepthPriceLevel_Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_DepthPriceLevel_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_DepthPriceLevel_Entry proto.InternalMessageInfo

type isDepthPriceLevel_Entry_Data interface {
	isDepthPriceLevel_Entry_Data()
}

type DepthPriceLevel_Entry_AddPriceLevel struct {
	AddPriceLevel *AddPriceLevel `protobuf:"bytes,1,opt,name=addPriceLevel,proto3,oneof"`
}

type DepthPriceLevel_Entry_DeletePriceLevel struct {
	DeletePriceLevel *DeletePriceLevel `protobuf:"bytes,2,opt,name=deletePriceLevel,proto3,oneof"`
}

type DepthPriceLevel_Entry_ModifyPriceLevel struct {
	ModifyPriceLevel *ModifyPriceLevel `protobuf:"bytes,3,opt,name=modifyPriceLevel,proto3,oneof"`
}

func (*DepthPriceLevel_Entry_AddPriceLevel) isDepthPriceLevel_Entry_Data() {}

func (*DepthPriceLevel_Entry_DeletePriceLevel) isDepthPriceLevel_Entry_Data() {}

func (*DepthPriceLevel_Entry_ModifyPriceLevel) isDepthPriceLevel_Entry_Data() {}

func (m *DepthPriceLevel_Entry) GetData() isDepthPriceLevel_Entry_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DepthPriceLevel_Entry) GetAddPriceLevel() *AddPriceLevel {
	if x, ok := m.GetData().(*DepthPriceLevel_Entry_AddPriceLevel); ok {
		return x.AddPriceLevel
	}
	return nil
}

func (m *DepthPriceLevel_Entry) GetDeletePriceLevel() *DeletePriceLevel {
	if x, ok := m.GetData().(*DepthPriceLevel_Entry_DeletePriceLevel); ok {
		return x.DeletePriceLevel
	}
	return nil
}

func (m *DepthPriceLevel_Entry) GetModifyPriceLevel() *ModifyPriceLevel {
	if x, ok := m.GetData().(*DepthPriceLevel_Entry_ModifyPriceLevel); ok {
		return x.ModifyPriceLevel
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DepthPriceLevel_Entry) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DepthPriceLevel_Entry_AddPriceLevel)(nil),
		(*DepthPriceLevel_Entry_DeletePriceLevel)(nil),
		(*DepthPriceLevel_Entry_ModifyPriceLevel)(nil),
	}
}

/// Depth By Order
type DepthOrder struct {
	Orders               []*DepthOrder_Entry `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DepthOrder) Reset()         { *m = DepthOrder{} }
func (m *DepthOrder) String() string { return proto.CompactTextString(m) }
func (*DepthOrder) ProtoMessage()    {}
func (*DepthOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{11}
}

func (m *DepthOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepthOrder.Unmarshal(m, b)
}
func (m *DepthOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepthOrder.Marshal(b, m, deterministic)
}
func (m *DepthOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepthOrder.Merge(m, src)
}
func (m *DepthOrder) XXX_Size() int {
	return xxx_messageInfo_DepthOrder.Size(m)
}
func (m *DepthOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_DepthOrder.DiscardUnknown(m)
}

var xxx_messageInfo_DepthOrder proto.InternalMessageInfo

func (m *DepthOrder) GetOrders() []*DepthOrder_Entry {
	if m != nil {
		return m.Orders
	}
	return nil
}

type DepthOrder_Entry struct {
	// Types that are valid to be assigned to Data:
	//	*DepthOrder_Entry_AddOrder
	//	*DepthOrder_Entry_DeleteOrder
	//	*DepthOrder_Entry_ModifyOrder
	Data                 isDepthOrder_Entry_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DepthOrder_Entry) Reset()         { *m = DepthOrder_Entry{} }
func (m *DepthOrder_Entry) String() string { return proto.CompactTextString(m) }
func (*DepthOrder_Entry) ProtoMessage()    {}
func (*DepthOrder_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{11, 0}
}

func (m *DepthOrder_Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepthOrder_Entry.Unmarshal(m, b)
}
func (m *DepthOrder_Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepthOrder_Entry.Marshal(b, m, deterministic)
}
func (m *DepthOrder_Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepthOrder_Entry.Merge(m, src)
}
func (m *DepthOrder_Entry) XXX_Size() int {
	return xxx_messageInfo_DepthOrder_Entry.Size(m)
}
func (m *DepthOrder_Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_DepthOrder_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_DepthOrder_Entry proto.InternalMessageInfo

type isDepthOrder_Entry_Data interface {
	isDepthOrder_Entry_Data()
}

type DepthOrder_Entry_AddOrder struct {
	AddOrder *AddOrder `protobuf:"bytes,1,opt,name=addOrder,proto3,oneof"`
}

type DepthOrder_Entry_DeleteOrder struct {
	DeleteOrder *DeleteOrder `protobuf:"bytes,2,opt,name=deleteOrder,proto3,oneof"`
}

type DepthOrder_Entry_ModifyOrder struct {
	ModifyOrder *ModifyOrder `protobuf:"bytes,3,opt,name=modifyOrder,proto3,oneof"`
}

func (*DepthOrder_Entry_AddOrder) isDepthOrder_Entry_Data() {}

func (*DepthOrder_Entry_DeleteOrder) isDepthOrder_Entry_Data() {}

func (*DepthOrder_Entry_ModifyOrder) isDepthOrder_Entry_Data() {}

func (m *DepthOrder_Entry) GetData() isDepthOrder_Entry_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DepthOrder_Entry) GetAddOrder() *AddOrder {
	if x, ok := m.GetData().(*DepthOrder_Entry_AddOrder); ok {
		return x.AddOrder
	}
	return nil
}

func (m *DepthOrder_Entry) GetDeleteOrder() *DeleteOrder {
	if x, ok := m.GetData().(*DepthOrder_Entry_DeleteOrder); ok {
		return x.DeleteOrder
	}
	return nil
}

func (m *DepthOrder_Entry) GetModifyOrder() *ModifyOrder {
	if x, ok := m.GetData().(*DepthOrder_Entry_ModifyOrder); ok {
		return x.ModifyOrder
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DepthOrder_Entry) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DepthOrder_Entry_AddOrder)(nil),
		(*DepthOrder_Entry_DeleteOrder)(nil),
		(*DepthOrder_Entry_ModifyOrder)(nil),
	}
}

/// News or informational message
type News struct {
	// Origination time = UTC timestamp nano seconds since Unix epoch
	OriginationTime      int64    `protobuf:"zigzag64,1,opt,name=originationTime,proto3" json:"originationTime,omitempty"`
	Source               string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	LanguageCode         string   `protobuf:"bytes,3,opt,name=languageCode,proto3" json:"languageCode,omitempty"`
	HeadLine             string   `protobuf:"bytes,4,opt,name=headLine,proto3" json:"headLine,omitempty"`
	Text                 string   `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	Symbols              []string `protobuf:"bytes,6,rep,name=symbols,proto3" json:"symbols,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *News) Reset()         { *m = News{} }
func (m *News) String() string { return proto.CompactTextString(m) }
func (*News) ProtoMessage()    {}
func (*News) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{12}
}

func (m *News) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_News.Unmarshal(m, b)
}
func (m *News) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_News.Marshal(b, m, deterministic)
}
func (m *News) XXX_Merge(src proto.Message) {
	xxx_messageInfo_News.Merge(m, src)
}
func (m *News) XXX_Size() int {
	return xxx_messageInfo_News.Size(m)
}
func (m *News) XXX_DiscardUnknown() {
	xxx_messageInfo_News.DiscardUnknown(m)
}

var xxx_messageInfo_News proto.InternalMessageInfo

func (m *News) GetOriginationTime() int64 {
	if m != nil {
		return m.OriginationTime
	}
	return 0
}

func (m *News) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *News) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func (m *News) GetHeadLine() string {
	if m != nil {
		return m.HeadLine
	}
	return ""
}

func (m *News) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *News) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

/// Clear all data from the order books that are configured for this market.
type ClearBook struct {
	Reserved             int32    `protobuf:"zigzag32,1,opt,name=reserved,proto3" json:"reserved,omitempty"`
	TransactionTime      int64    `protobuf:"zigzag64,2,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearBook) Reset()         { *m = ClearBook{} }
func (m *ClearBook) String() string { return proto.CompactTextString(m) }
func (*ClearBook) ProtoMessage()    {}
func (*ClearBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{13}
}

func (m *ClearBook) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClearBook.Unmarshal(m, b)
}
func (m *ClearBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClearBook.Marshal(b, m, deterministic)
}
func (m *ClearBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearBook.Merge(m, src)
}
func (m *ClearBook) XXX_Size() int {
	return xxx_messageInfo_ClearBook.Size(m)
}
func (m *ClearBook) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearBook.DiscardUnknown(m)
}

var xxx_messageInfo_ClearBook proto.InternalMessageInfo

func (m *ClearBook) GetReserved() int32 {
	if m != nil {
		return m.Reserved
	}
	return 0
}

func (m *ClearBook) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

//
// Instrument Status
//
type InstrumentStatus struct {
	// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64                   `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	TradingStatus   InstrumentTradingStatus `protobuf:"varint,10,opt,name=tradingStatus,proto3,enum=org.openfeed.InstrumentTradingStatus" json:"tradingStatus,omitempty"`
	// UTC Timestamp, nano seconds since Unix epoch
	OpeningTime int64  `protobuf:"zigzag64,11,opt,name=openingTime,proto3" json:"openingTime,omitempty"`
	Note        string `protobuf:"bytes,12,opt,name=note,proto3" json:"note,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate                       int32                           `protobuf:"zigzag32,13,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	RegulationSHOShortSalePriceTest RegulationSHOShortSalePriceTest `protobuf:"varint,14,opt,name=regulationSHOShortSalePriceTest,proto3,enum=org.openfeed.RegulationSHOShortSalePriceTest" json:"regulationSHOShortSalePriceTest,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}                        `json:"-"`
	XXX_unrecognized                []byte                          `json:"-"`
	XXX_sizecache                   int32                           `json:"-"`
}

func (m *InstrumentStatus) Reset()         { *m = InstrumentStatus{} }
func (m *InstrumentStatus) String() string { return proto.CompactTextString(m) }
func (*InstrumentStatus) ProtoMessage()    {}
func (*InstrumentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{14}
}

func (m *InstrumentStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentStatus.Unmarshal(m, b)
}
func (m *InstrumentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentStatus.Marshal(b, m, deterministic)
}
func (m *InstrumentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentStatus.Merge(m, src)
}
func (m *InstrumentStatus) XXX_Size() int {
	return xxx_messageInfo_InstrumentStatus.Size(m)
}
func (m *InstrumentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentStatus proto.InternalMessageInfo

func (m *InstrumentStatus) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *InstrumentStatus) GetTradingStatus() InstrumentTradingStatus {
	if m != nil {
		return m.TradingStatus
	}
	return InstrumentTradingStatus_UNKNOWN_TRADING_STATUS
}

func (m *InstrumentStatus) GetOpeningTime() int64 {
	if m != nil {
		return m.OpeningTime
	}
	return 0
}

func (m *InstrumentStatus) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *InstrumentStatus) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *InstrumentStatus) GetRegulationSHOShortSalePriceTest() RegulationSHOShortSalePriceTest {
	if m != nil {
		return m.RegulationSHOShortSalePriceTest
	}
	return RegulationSHOShortSalePriceTest_UNKNOWN_PRICE_TEST
}

/// Best Bid and Offer.
// If a side is not present, then that side has been deleted.
type BestBidOffer struct {
	// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Divide by priceDenominator
	BidPrice int64 `protobuf:"zigzag64,10,opt,name=bidPrice,proto3" json:"bidPrice,omitempty"`
	/// Divide by quantityDenominator
	BidQuantity   int64 `protobuf:"zigzag64,11,opt,name=bidQuantity,proto3" json:"bidQuantity,omitempty"`
	BidOrderCount int32 `protobuf:"zigzag32,12,opt,name=bidOrderCount,proto3" json:"bidOrderCount,omitempty"`
	/// Liquidity provider information
	// For Forex: BANK:CITY
	// For Equities: EXCHANGE_MIC
	BidOriginator     []byte `protobuf:"bytes,13,opt,name=bidOriginator,proto3" json:"bidOriginator,omitempty"`
	BidQuoteCondition []byte `protobuf:"bytes,14,opt,name=bidQuoteCondition,proto3" json:"bidQuoteCondition,omitempty"`
	/// Divide by priceDenominator
	OfferPrice int64 `protobuf:"zigzag64,20,opt,name=offerPrice,proto3" json:"offerPrice,omitempty"`
	/// Divide by quantityDenominator
	OfferQuantity   int64 `protobuf:"zigzag64,21,opt,name=offerQuantity,proto3" json:"offerQuantity,omitempty"`
	OfferOrderCount int32 `protobuf:"zigzag32,22,opt,name=offerOrderCount,proto3" json:"offerOrderCount,omitempty"`
	/// Liquidity provider information
	// For Forex: BANK:CITY
	// For Equities: EXCHANGE_MIC
	OfferOriginator      []byte   `protobuf:"bytes,23,opt,name=offerOriginator,proto3" json:"offerOriginator,omitempty"`
	OfferQuoteCondition  []byte   `protobuf:"bytes,24,opt,name=offerQuoteCondition,proto3" json:"offerQuoteCondition,omitempty"`
	QuoteCondition       []byte   `protobuf:"bytes,30,opt,name=quoteCondition,proto3" json:"quoteCondition,omitempty"`
	NationalBboUpdated   bool     `protobuf:"varint,31,opt,name=nationalBboUpdated,proto3" json:"nationalBboUpdated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BestBidOffer) Reset()         { *m = BestBidOffer{} }
func (m *BestBidOffer) String() string { return proto.CompactTextString(m) }
func (*BestBidOffer) ProtoMessage()    {}
func (*BestBidOffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{15}
}

func (m *BestBidOffer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BestBidOffer.Unmarshal(m, b)
}
func (m *BestBidOffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BestBidOffer.Marshal(b, m, deterministic)
}
func (m *BestBidOffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BestBidOffer.Merge(m, src)
}
func (m *BestBidOffer) XXX_Size() int {
	return xxx_messageInfo_BestBidOffer.Size(m)
}
func (m *BestBidOffer) XXX_DiscardUnknown() {
	xxx_messageInfo_BestBidOffer.DiscardUnknown(m)
}

var xxx_messageInfo_BestBidOffer proto.InternalMessageInfo

func (m *BestBidOffer) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *BestBidOffer) GetBidPrice() int64 {
	if m != nil {
		return m.BidPrice
	}
	return 0
}

func (m *BestBidOffer) GetBidQuantity() int64 {
	if m != nil {
		return m.BidQuantity
	}
	return 0
}

func (m *BestBidOffer) GetBidOrderCount() int32 {
	if m != nil {
		return m.BidOrderCount
	}
	return 0
}

func (m *BestBidOffer) GetBidOriginator() []byte {
	if m != nil {
		return m.BidOriginator
	}
	return nil
}

func (m *BestBidOffer) GetBidQuoteCondition() []byte {
	if m != nil {
		return m.BidQuoteCondition
	}
	return nil
}

func (m *BestBidOffer) GetOfferPrice() int64 {
	if m != nil {
		return m.OfferPrice
	}
	return 0
}

func (m *BestBidOffer) GetOfferQuantity() int64 {
	if m != nil {
		return m.OfferQuantity
	}
	return 0
}

func (m *BestBidOffer) GetOfferOrderCount() int32 {
	if m != nil {
		return m.OfferOrderCount
	}
	return 0
}

func (m *BestBidOffer) GetOfferOriginator() []byte {
	if m != nil {
		return m.OfferOriginator
	}
	return nil
}

func (m *BestBidOffer) GetOfferQuoteCondition() []byte {
	if m != nil {
		return m.OfferQuoteCondition
	}
	return nil
}

func (m *BestBidOffer) GetQuoteCondition() []byte {
	if m != nil {
		return m.QuoteCondition
	}
	return nil
}

func (m *BestBidOffer) GetNationalBboUpdated() bool {
	if m != nil {
		return m.NationalBboUpdated
	}
	return false
}

/// Insert a new price level, pushing existing levels down
type AddPriceLevel struct {
	// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// price level index, starting at 1
	Level int32    `protobuf:"zigzag32,10,opt,name=level,proto3" json:"level,omitempty"`
	Side  BookSide `protobuf:"varint,11,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
	/// Divide by priceDenominator
	Price int64 `protobuf:"zigzag64,12,opt,name=price,proto3" json:"price,omitempty"`
	/// Divide by quantityDenominator
	Quantity             int64    `protobuf:"zigzag64,13,opt,name=quantity,proto3" json:"quantity,omitempty"`
	OrderCount           int32    `protobuf:"zigzag32,14,opt,name=orderCount,proto3" json:"orderCount,omitempty"`
	ImpliedQuantity      int64    `protobuf:"zigzag64,15,opt,name=impliedQuantity,proto3" json:"impliedQuantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPriceLevel) Reset()         { *m = AddPriceLevel{} }
func (m *AddPriceLevel) String() string { return proto.CompactTextString(m) }
func (*AddPriceLevel) ProtoMessage()    {}
func (*AddPriceLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{16}
}

func (m *AddPriceLevel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPriceLevel.Unmarshal(m, b)
}
func (m *AddPriceLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPriceLevel.Marshal(b, m, deterministic)
}
func (m *AddPriceLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPriceLevel.Merge(m, src)
}
func (m *AddPriceLevel) XXX_Size() int {
	return xxx_messageInfo_AddPriceLevel.Size(m)
}
func (m *AddPriceLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPriceLevel.DiscardUnknown(m)
}

var xxx_messageInfo_AddPriceLevel proto.InternalMessageInfo

func (m *AddPriceLevel) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *AddPriceLevel) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AddPriceLevel) GetSide() BookSide {
	if m != nil {
		return m.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

func (m *AddPriceLevel) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *AddPriceLevel) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *AddPriceLevel) GetOrderCount() int32 {
	if m != nil {
		return m.OrderCount
	}
	return 0
}

func (m *AddPriceLevel) GetImpliedQuantity() int64 {
	if m != nil {
		return m.ImpliedQuantity
	}
	return 0
}

/// Delete an existing price level, pulling existing levels up
type DeletePriceLevel struct {
	// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// price level index, starting at 1
	Level                int32    `protobuf:"zigzag32,10,opt,name=level,proto3" json:"level,omitempty"`
	Side                 BookSide `protobuf:"varint,11,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePriceLevel) Reset()         { *m = DeletePriceLevel{} }
func (m *DeletePriceLevel) String() string { return proto.CompactTextString(m) }
func (*DeletePriceLevel) ProtoMessage()    {}
func (*DeletePriceLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{17}
}

func (m *DeletePriceLevel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePriceLevel.Unmarshal(m, b)
}
func (m *DeletePriceLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePriceLevel.Marshal(b, m, deterministic)
}
func (m *DeletePriceLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePriceLevel.Merge(m, src)
}
func (m *DeletePriceLevel) XXX_Size() int {
	return xxx_messageInfo_DeletePriceLevel.Size(m)
}
func (m *DeletePriceLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePriceLevel.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePriceLevel proto.InternalMessageInfo

func (m *DeletePriceLevel) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *DeletePriceLevel) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *DeletePriceLevel) GetSide() BookSide {
	if m != nil {
		return m.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

/// Modify the quantity or orderCount of an existing price level.
/// The price itself will not change.
type ModifyPriceLevel struct {
	// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// price level index, starting at 1
	Level int32    `protobuf:"zigzag32,10,opt,name=level,proto3" json:"level,omitempty"`
	Side  BookSide `protobuf:"varint,11,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
	/// Divide by priceDenominator
	Price int64 `protobuf:"zigzag64,12,opt,name=price,proto3" json:"price,omitempty"`
	/// Divide by quantityDenominator
	Quantity             int64    `protobuf:"zigzag64,13,opt,name=quantity,proto3" json:"quantity,omitempty"`
	OrderCount           int32    `protobuf:"zigzag32,14,opt,name=orderCount,proto3" json:"orderCount,omitempty"`
	ImpliedQuantity      int64    `protobuf:"zigzag64,15,opt,name=impliedQuantity,proto3" json:"impliedQuantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModifyPriceLevel) Reset()         { *m = ModifyPriceLevel{} }
func (m *ModifyPriceLevel) String() string { return proto.CompactTextString(m) }
func (*ModifyPriceLevel) ProtoMessage()    {}
func (*ModifyPriceLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{18}
}

func (m *ModifyPriceLevel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModifyPriceLevel.Unmarshal(m, b)
}
func (m *ModifyPriceLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModifyPriceLevel.Marshal(b, m, deterministic)
}
func (m *ModifyPriceLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyPriceLevel.Merge(m, src)
}
func (m *ModifyPriceLevel) XXX_Size() int {
	return xxx_messageInfo_ModifyPriceLevel.Size(m)
}
func (m *ModifyPriceLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyPriceLevel.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyPriceLevel proto.InternalMessageInfo

func (m *ModifyPriceLevel) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *ModifyPriceLevel) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ModifyPriceLevel) GetSide() BookSide {
	if m != nil {
		return m.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

func (m *ModifyPriceLevel) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ModifyPriceLevel) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *ModifyPriceLevel) GetOrderCount() int32 {
	if m != nil {
		return m.OrderCount
	}
	return 0
}

func (m *ModifyPriceLevel) GetImpliedQuantity() int64 {
	if m != nil {
		return m.ImpliedQuantity
	}
	return 0
}

// Add an order to the order book.  Indexed by orderId, which is unique per channel
type AddOrder struct {
	TransactionTime      int64    `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	OrderId              int64    `protobuf:"zigzag64,10,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Side                 BookSide `protobuf:"varint,11,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
	Price                int64    `protobuf:"zigzag64,12,opt,name=price,proto3" json:"price,omitempty"`
	Quantity             int64    `protobuf:"zigzag64,13,opt,name=quantity,proto3" json:"quantity,omitempty"`
	IsImplied            bool     `protobuf:"varint,14,opt,name=isImplied,proto3" json:"isImplied,omitempty"`
	Priority             int64    `protobuf:"zigzag64,15,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddOrder) Reset()         { *m = AddOrder{} }
func (m *AddOrder) String() string { return proto.CompactTextString(m) }
func (*AddOrder) ProtoMessage()    {}
func (*AddOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{19}
}

func (m *AddOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddOrder.Unmarshal(m, b)
}
func (m *AddOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddOrder.Marshal(b, m, deterministic)
}
func (m *AddOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddOrder.Merge(m, src)
}
func (m *AddOrder) XXX_Size() int {
	return xxx_messageInfo_AddOrder.Size(m)
}
func (m *AddOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_AddOrder.DiscardUnknown(m)
}

var xxx_messageInfo_AddOrder proto.InternalMessageInfo

func (m *AddOrder) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *AddOrder) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *AddOrder) GetSide() BookSide {
	if m != nil {
		return m.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

func (m *AddOrder) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *AddOrder) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *AddOrder) GetIsImplied() bool {
	if m != nil {
		return m.IsImplied
	}
	return false
}

func (m *AddOrder) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

/// Delete an order from the order book. Indexed by orderId, which is unique per channel
type DeleteOrder struct {
	TransactionTime      int64    `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	OrderId              int64    `protobuf:"zigzag64,10,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Side                 BookSide `protobuf:"varint,11,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteOrder) Reset()         { *m = DeleteOrder{} }
func (m *DeleteOrder) String() string { return proto.CompactTextString(m) }
func (*DeleteOrder) ProtoMessage()    {}
func (*DeleteOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{20}
}

func (m *DeleteOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteOrder.Unmarshal(m, b)
}
func (m *DeleteOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteOrder.Marshal(b, m, deterministic)
}
func (m *DeleteOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOrder.Merge(m, src)
}
func (m *DeleteOrder) XXX_Size() int {
	return xxx_messageInfo_DeleteOrder.Size(m)
}
func (m *DeleteOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOrder.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOrder proto.InternalMessageInfo

func (m *DeleteOrder) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *DeleteOrder) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *DeleteOrder) GetSide() BookSide {
	if m != nil {
		return m.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

/// Modify the price or quantity of an order.  The side and implied flag cannot change
type ModifyOrder struct {
	TransactionTime      int64    `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	OrderId              int64    `protobuf:"zigzag64,10,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Side                 BookSide `protobuf:"varint,11,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
	Price                int64    `protobuf:"zigzag64,12,opt,name=price,proto3" json:"price,omitempty"`
	Quantity             int64    `protobuf:"zigzag64,13,opt,name=quantity,proto3" json:"quantity,omitempty"`
	IsImplied            bool     `protobuf:"varint,14,opt,name=isImplied,proto3" json:"isImplied,omitempty"`
	Priority             int64    `protobuf:"zigzag64,15,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModifyOrder) Reset()         { *m = ModifyOrder{} }
func (m *ModifyOrder) String() string { return proto.CompactTextString(m) }
func (*ModifyOrder) ProtoMessage()    {}
func (*ModifyOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{21}
}

func (m *ModifyOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModifyOrder.Unmarshal(m, b)
}
func (m *ModifyOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModifyOrder.Marshal(b, m, deterministic)
}
func (m *ModifyOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyOrder.Merge(m, src)
}
func (m *ModifyOrder) XXX_Size() int {
	return xxx_messageInfo_ModifyOrder.Size(m)
}
func (m *ModifyOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyOrder proto.InternalMessageInfo

func (m *ModifyOrder) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *ModifyOrder) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *ModifyOrder) GetSide() BookSide {
	if m != nil {
		return m.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

func (m *ModifyOrder) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ModifyOrder) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *ModifyOrder) GetIsImplied() bool {
	if m != nil {
		return m.IsImplied
	}
	return false
}

func (m *ModifyOrder) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

/// For non-tradable index products
type IndexValue struct {
	// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	// Date only, format 2012-07-04 -> 20120704
	TradeDate            int32    `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	Last                 int64    `protobuf:"zigzag64,11,opt,name=last,proto3" json:"last,omitempty"`
	Volume               int64    `protobuf:"zigzag64,12,opt,name=volume,proto3" json:"volume,omitempty"`
	Open                 int64    `protobuf:"zigzag64,13,opt,name=open,proto3" json:"open,omitempty"`
	SettlementOpen       int64    `protobuf:"zigzag64,14,opt,name=settlementOpen,proto3" json:"settlementOpen,omitempty"`
	SpecialOpen          int64    `protobuf:"zigzag64,15,opt,name=specialOpen,proto3" json:"specialOpen,omitempty"`
	High                 int64    `protobuf:"zigzag64,16,opt,name=high,proto3" json:"high,omitempty"`
	Low                  int64    `protobuf:"zigzag64,17,opt,name=low,proto3" json:"low,omitempty"`
	Close                int64    `protobuf:"zigzag64,18,opt,name=close,proto3" json:"close,omitempty"`
	Bid                  int64    `protobuf:"zigzag64,19,opt,name=bid,proto3" json:"bid,omitempty"`
	Offer                int64    `protobuf:"zigzag64,20,opt,name=offer,proto3" json:"offer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IndexValue) Reset()         { *m = IndexValue{} }
func (m *IndexValue) String() string { return proto.CompactTextString(m) }
func (*IndexValue) ProtoMessage()    {}
func (*IndexValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{22}
}

func (m *IndexValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexValue.Unmarshal(m, b)
}
func (m *IndexValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexValue.Marshal(b, m, deterministic)
}
func (m *IndexValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexValue.Merge(m, src)
}
func (m *IndexValue) XXX_Size() int {
	return xxx_messageInfo_IndexValue.Size(m)
}
func (m *IndexValue) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexValue.DiscardUnknown(m)
}

var xxx_messageInfo_IndexValue proto.InternalMessageInfo

func (m *IndexValue) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *IndexValue) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *IndexValue) GetLast() int64 {
	if m != nil {
		return m.Last
	}
	return 0
}

func (m *IndexValue) GetVolume() int64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *IndexValue) GetOpen() int64 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *IndexValue) GetSettlementOpen() int64 {
	if m != nil {
		return m.SettlementOpen
	}
	return 0
}

func (m *IndexValue) GetSpecialOpen() int64 {
	if m != nil {
		return m.SpecialOpen
	}
	return 0
}

func (m *IndexValue) GetHigh() int64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *IndexValue) GetLow() int64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *IndexValue) GetClose() int64 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *IndexValue) GetBid() int64 {
	if m != nil {
		return m.Bid
	}
	return 0
}

func (m *IndexValue) GetOffer() int64 {
	if m != nil {
		return m.Offer
	}
	return 0
}

/// Trades
type Trades struct {
	Trades               []*Trades_Entry `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Trades) Reset()         { *m = Trades{} }
func (m *Trades) String() string { return proto.CompactTextString(m) }
func (*Trades) ProtoMessage()    {}
func (*Trades) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{23}
}

func (m *Trades) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trades.Unmarshal(m, b)
}
func (m *Trades) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trades.Marshal(b, m, deterministic)
}
func (m *Trades) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trades.Merge(m, src)
}
func (m *Trades) XXX_Size() int {
	return xxx_messageInfo_Trades.Size(m)
}
func (m *Trades) XXX_DiscardUnknown() {
	xxx_messageInfo_Trades.DiscardUnknown(m)
}

var xxx_messageInfo_Trades proto.InternalMessageInfo

func (m *Trades) GetTrades() []*Trades_Entry {
	if m != nil {
		return m.Trades
	}
	return nil
}

type Trades_Entry struct {
	// Types that are valid to be assigned to Data:
	//	*Trades_Entry_Trade
	//	*Trades_Entry_TradeCorrection
	//	*Trades_Entry_TradeCancel
	Data                 isTrades_Entry_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Trades_Entry) Reset()         { *m = Trades_Entry{} }
func (m *Trades_Entry) String() string { return proto.CompactTextString(m) }
func (*Trades_Entry) ProtoMessage()    {}
func (*Trades_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{23, 0}
}

func (m *Trades_Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trades_Entry.Unmarshal(m, b)
}
func (m *Trades_Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trades_Entry.Marshal(b, m, deterministic)
}
func (m *Trades_Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trades_Entry.Merge(m, src)
}
func (m *Trades_Entry) XXX_Size() int {
	return xxx_messageInfo_Trades_Entry.Size(m)
}
func (m *Trades_Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Trades_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Trades_Entry proto.InternalMessageInfo

type isTrades_Entry_Data interface {
	isTrades_Entry_Data()
}

type Trades_Entry_Trade struct {
	Trade *Trade `protobuf:"bytes,1,opt,name=trade,proto3,oneof"`
}

type Trades_Entry_TradeCorrection struct {
	TradeCorrection *TradeCorrection `protobuf:"bytes,2,opt,name=tradeCorrection,proto3,oneof"`
}

type Trades_Entry_TradeCancel struct {
	TradeCancel *TradeCancel `protobuf:"bytes,3,opt,name=tradeCancel,proto3,oneof"`
}

func (*Trades_Entry_Trade) isTrades_Entry_Data() {}

func (*Trades_Entry_TradeCorrection) isTrades_Entry_Data() {}

func (*Trades_Entry_TradeCancel) isTrades_Entry_Data() {}

func (m *Trades_Entry) GetData() isTrades_Entry_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Trades_Entry) GetTrade() *Trade {
	if x, ok := m.GetData().(*Trades_Entry_Trade); ok {
		return x.Trade
	}
	return nil
}

func (m *Trades_Entry) GetTradeCorrection() *TradeCorrection {
	if x, ok := m.GetData().(*Trades_Entry_TradeCorrection); ok {
		return x.TradeCorrection
	}
	return nil
}

func (m *Trades_Entry) GetTradeCancel() *TradeCancel {
	if x, ok := m.GetData().(*Trades_Entry_TradeCancel); ok {
		return x.TradeCancel
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Trades_Entry) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Trades_Entry_Trade)(nil),
		(*Trades_Entry_TradeCorrection)(nil),
		(*Trades_Entry_TradeCancel)(nil),
	}
}

/// A live trade.  When received, update the "last" field
type Trade struct {
	// Market participant/originator
	OriginatorId []byte `protobuf:"bytes,8,opt,name=originatorId,proto3" json:"originatorId,omitempty"`
	// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Divide by priceDenominator
	Price int64 `protobuf:"zigzag64,10,opt,name=price,proto3" json:"price,omitempty"`
	/// Divide by quantityDenominator
	Quantity int64  `protobuf:"zigzag64,11,opt,name=quantity,proto3" json:"quantity,omitempty"`
	TradeId  []byte `protobuf:"bytes,12,opt,name=tradeId,proto3" json:"tradeId,omitempty"`
	/// The side of the aggressing order that caused the trade
	Side BookSide `protobuf:"varint,13,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate       int32           `protobuf:"zigzag32,14,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	BuyerId         []byte          `protobuf:"bytes,15,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	SellerId        []byte          `protobuf:"bytes,16,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	OpeningTrade    bool            `protobuf:"varint,17,opt,name=openingTrade,proto3" json:"openingTrade,omitempty"`
	SystemPriced    bool            `protobuf:"varint,18,opt,name=systemPriced,proto3" json:"systemPriced,omitempty"`
	MarketOnClose   bool            `protobuf:"varint,19,opt,name=marketOnClose,proto3" json:"marketOnClose,omitempty"`
	OddLot          bool            `protobuf:"varint,20,opt,name=oddLot,proto3" json:"oddLot,omitempty"`
	SettlementTerms SettlementTerms `protobuf:"varint,21,opt,name=settlementTerms,proto3,enum=org.openfeed.SettlementTerms" json:"settlementTerms,omitempty"`
	CrossType       CrossType       `protobuf:"varint,22,opt,name=crossType,proto3,enum=org.openfeed.CrossType" json:"crossType,omitempty"`
	ByPass          bool            `protobuf:"varint,23,opt,name=byPass,proto3" json:"byPass,omitempty"`
	LastPrice       int64           `protobuf:"zigzag64,24,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`
	SaleCondition   []byte          `protobuf:"bytes,25,opt,name=saleCondition,proto3" json:"saleCondition,omitempty"`
	Currency        string          `protobuf:"bytes,26,opt,name=currency,proto3" json:"currency,omitempty"`
	// Does not update Last
	DoesNotUpdateLast bool `protobuf:"varint,27,opt,name=doesNotUpdateLast,proto3" json:"doesNotUpdateLast,omitempty"`
	// Does not update Volume
	DoesNotUpdateVolume bool   `protobuf:"varint,28,opt,name=doesNotUpdateVolume,proto3" json:"doesNotUpdateVolume,omitempty"`
	Session             string `protobuf:"bytes,30,opt,name=session,proto3" json:"session,omitempty"`
	// Is this a block trade.
	BlockTrade bool `protobuf:"varint,31,opt,name=blockTrade,proto3" json:"blockTrade,omitempty"`
	/// Distribution time in nano seconds since epoch.
	DistributionTime int64 `protobuf:"zigzag64,32,opt,name=distributionTime,proto3" json:"distributionTime,omitempty"`
	/// time in nano seconds since epoch.
	TransactionTime2     int64    `protobuf:"zigzag64,33,opt,name=transactionTime2,proto3" json:"transactionTime2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trade) Reset()         { *m = Trade{} }
func (m *Trade) String() string { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()    {}
func (*Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{24}
}

func (m *Trade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trade.Unmarshal(m, b)
}
func (m *Trade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trade.Marshal(b, m, deterministic)
}
func (m *Trade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trade.Merge(m, src)
}
func (m *Trade) XXX_Size() int {
	return xxx_messageInfo_Trade.Size(m)
}
func (m *Trade) XXX_DiscardUnknown() {
	xxx_messageInfo_Trade.DiscardUnknown(m)
}

var xxx_messageInfo_Trade proto.InternalMessageInfo

func (m *Trade) GetOriginatorId() []byte {
	if m != nil {
		return m.OriginatorId
	}
	return nil
}

func (m *Trade) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *Trade) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Trade) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Trade) GetTradeId() []byte {
	if m != nil {
		return m.TradeId
	}
	return nil
}

func (m *Trade) GetSide() BookSide {
	if m != nil {
		return m.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

func (m *Trade) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *Trade) GetBuyerId() []byte {
	if m != nil {
		return m.BuyerId
	}
	return nil
}

func (m *Trade) GetSellerId() []byte {
	if m != nil {
		return m.SellerId
	}
	return nil
}

func (m *Trade) GetOpeningTrade() bool {
	if m != nil {
		return m.OpeningTrade
	}
	return false
}

func (m *Trade) GetSystemPriced() bool {
	if m != nil {
		return m.SystemPriced
	}
	return false
}

func (m *Trade) GetMarketOnClose() bool {
	if m != nil {
		return m.MarketOnClose
	}
	return false
}

func (m *Trade) GetOddLot() bool {
	if m != nil {
		return m.OddLot
	}
	return false
}

func (m *Trade) GetSettlementTerms() SettlementTerms {
	if m != nil {
		return m.SettlementTerms
	}
	return SettlementTerms_UNKNOWN_SETTLEMENT_TERMS
}

func (m *Trade) GetCrossType() CrossType {
	if m != nil {
		return m.CrossType
	}
	return CrossType_UNKNOWN_CROSS_TYPE
}

func (m *Trade) GetByPass() bool {
	if m != nil {
		return m.ByPass
	}
	return false
}

func (m *Trade) GetLastPrice() int64 {
	if m != nil {
		return m.LastPrice
	}
	return 0
}

func (m *Trade) GetSaleCondition() []byte {
	if m != nil {
		return m.SaleCondition
	}
	return nil
}

func (m *Trade) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Trade) GetDoesNotUpdateLast() bool {
	if m != nil {
		return m.DoesNotUpdateLast
	}
	return false
}

func (m *Trade) GetDoesNotUpdateVolume() bool {
	if m != nil {
		return m.DoesNotUpdateVolume
	}
	return false
}

func (m *Trade) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *Trade) GetBlockTrade() bool {
	if m != nil {
		return m.BlockTrade
	}
	return false
}

func (m *Trade) GetDistributionTime() int64 {
	if m != nil {
		return m.DistributionTime
	}
	return 0
}

func (m *Trade) GetTransactionTime2() int64 {
	if m != nil {
		return m.TransactionTime2
	}
	return 0
}

///  Trade Correction
type TradeCorrection struct {
	// Market participant/originator
	OriginatorId    []byte `protobuf:"bytes,8,opt,name=originatorId,proto3" json:"originatorId,omitempty"`
	TransactionTime int64  `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	// Corrected Price
	Price int64 `protobuf:"zigzag64,10,opt,name=price,proto3" json:"price,omitempty"`
	// Corrected Quantity
	Quantity int64    `protobuf:"zigzag64,11,opt,name=quantity,proto3" json:"quantity,omitempty"`
	TradeId  []byte   `protobuf:"bytes,12,opt,name=tradeId,proto3" json:"tradeId,omitempty"`
	Side     BookSide `protobuf:"varint,13,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
	// Date only, format 2012-07-04 -> 20120704
	TradeDate       int32           `protobuf:"zigzag32,14,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	BuyerId         []byte          `protobuf:"bytes,15,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	SellerId        []byte          `protobuf:"bytes,16,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	OpeningTrade    bool            `protobuf:"varint,17,opt,name=openingTrade,proto3" json:"openingTrade,omitempty"`
	SystemPriced    bool            `protobuf:"varint,18,opt,name=systemPriced,proto3" json:"systemPriced,omitempty"`
	MarketOnClose   bool            `protobuf:"varint,19,opt,name=marketOnClose,proto3" json:"marketOnClose,omitempty"`
	OddLot          bool            `protobuf:"varint,20,opt,name=oddLot,proto3" json:"oddLot,omitempty"`
	SettlementTerms SettlementTerms `protobuf:"varint,21,opt,name=settlementTerms,proto3,enum=org.openfeed.SettlementTerms" json:"settlementTerms,omitempty"`
	CrossType       CrossType       `protobuf:"varint,22,opt,name=crossType,proto3,enum=org.openfeed.CrossType" json:"crossType,omitempty"`
	ByPass          bool            `protobuf:"varint,23,opt,name=byPass,proto3" json:"byPass,omitempty"`
	OriginalTradeId []byte          `protobuf:"bytes,24,opt,name=originalTradeId,proto3" json:"originalTradeId,omitempty"`
	SaleCondition   []byte          `protobuf:"bytes,25,opt,name=saleCondition,proto3" json:"saleCondition,omitempty"`
	Currency        string          `protobuf:"bytes,26,opt,name=currency,proto3" json:"currency,omitempty"`
	/// Distribution time in nano seconds since epoch.
	DistributionTime int64 `protobuf:"zigzag64,27,opt,name=distributionTime,proto3" json:"distributionTime,omitempty"`
	/// time in nano seconds since epoch.
	TransactionTime2     int64    `protobuf:"zigzag64,28,opt,name=transactionTime2,proto3" json:"transactionTime2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeCorrection) Reset()         { *m = TradeCorrection{} }
func (m *TradeCorrection) String() string { return proto.CompactTextString(m) }
func (*TradeCorrection) ProtoMessage()    {}
func (*TradeCorrection) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{25}
}

func (m *TradeCorrection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeCorrection.Unmarshal(m, b)
}
func (m *TradeCorrection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeCorrection.Marshal(b, m, deterministic)
}
func (m *TradeCorrection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeCorrection.Merge(m, src)
}
func (m *TradeCorrection) XXX_Size() int {
	return xxx_messageInfo_TradeCorrection.Size(m)
}
func (m *TradeCorrection) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeCorrection.DiscardUnknown(m)
}

var xxx_messageInfo_TradeCorrection proto.InternalMessageInfo

func (m *TradeCorrection) GetOriginatorId() []byte {
	if m != nil {
		return m.OriginatorId
	}
	return nil
}

func (m *TradeCorrection) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *TradeCorrection) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TradeCorrection) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *TradeCorrection) GetTradeId() []byte {
	if m != nil {
		return m.TradeId
	}
	return nil
}

func (m *TradeCorrection) GetSide() BookSide {
	if m != nil {
		return m.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

func (m *TradeCorrection) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *TradeCorrection) GetBuyerId() []byte {
	if m != nil {
		return m.BuyerId
	}
	return nil
}

func (m *TradeCorrection) GetSellerId() []byte {
	if m != nil {
		return m.SellerId
	}
	return nil
}

func (m *TradeCorrection) GetOpeningTrade() bool {
	if m != nil {
		return m.OpeningTrade
	}
	return false
}

func (m *TradeCorrection) GetSystemPriced() bool {
	if m != nil {
		return m.SystemPriced
	}
	return false
}

func (m *TradeCorrection) GetMarketOnClose() bool {
	if m != nil {
		return m.MarketOnClose
	}
	return false
}

func (m *TradeCorrection) GetOddLot() bool {
	if m != nil {
		return m.OddLot
	}
	return false
}

func (m *TradeCorrection) GetSettlementTerms() SettlementTerms {
	if m != nil {
		return m.SettlementTerms
	}
	return SettlementTerms_UNKNOWN_SETTLEMENT_TERMS
}

func (m *TradeCorrection) GetCrossType() CrossType {
	if m != nil {
		return m.CrossType
	}
	return CrossType_UNKNOWN_CROSS_TYPE
}

func (m *TradeCorrection) GetByPass() bool {
	if m != nil {
		return m.ByPass
	}
	return false
}

func (m *TradeCorrection) GetOriginalTradeId() []byte {
	if m != nil {
		return m.OriginalTradeId
	}
	return nil
}

func (m *TradeCorrection) GetSaleCondition() []byte {
	if m != nil {
		return m.SaleCondition
	}
	return nil
}

func (m *TradeCorrection) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *TradeCorrection) GetDistributionTime() int64 {
	if m != nil {
		return m.DistributionTime
	}
	return 0
}

func (m *TradeCorrection) GetTransactionTime2() int64 {
	if m != nil {
		return m.TransactionTime2
	}
	return 0
}

//
// Trade Cancel/Break
//
type TradeCancel struct {
	// Market participant/originator
	OriginatorId           []byte `protobuf:"bytes,8,opt,name=originatorId,proto3" json:"originatorId,omitempty"`
	TransactionTime        int64  `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	CorrectedTradePrice    int64  `protobuf:"zigzag64,10,opt,name=correctedTradePrice,proto3" json:"correctedTradePrice,omitempty"`
	CorrectedTradeQuantity int64  `protobuf:"zigzag64,11,opt,name=correctedTradeQuantity,proto3" json:"correctedTradeQuantity,omitempty"`
	TradeId                []byte `protobuf:"bytes,12,opt,name=tradeId,proto3" json:"tradeId,omitempty"`
	SaleCondition          []byte `protobuf:"bytes,13,opt,name=saleCondition,proto3" json:"saleCondition,omitempty"`
	Currency               string `protobuf:"bytes,14,opt,name=currency,proto3" json:"currency,omitempty"`
	/// Distribution time in nano seconds since epoch.
	DistributionTime int64 `protobuf:"zigzag64,15,opt,name=distributionTime,proto3" json:"distributionTime,omitempty"`
	/// time in nano seconds since epoch.
	TransactionTime2     int64    `protobuf:"zigzag64,16,opt,name=transactionTime2,proto3" json:"transactionTime2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeCancel) Reset()         { *m = TradeCancel{} }
func (m *TradeCancel) String() string { return proto.CompactTextString(m) }
func (*TradeCancel) ProtoMessage()    {}
func (*TradeCancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{26}
}

func (m *TradeCancel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeCancel.Unmarshal(m, b)
}
func (m *TradeCancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeCancel.Marshal(b, m, deterministic)
}
func (m *TradeCancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeCancel.Merge(m, src)
}
func (m *TradeCancel) XXX_Size() int {
	return xxx_messageInfo_TradeCancel.Size(m)
}
func (m *TradeCancel) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeCancel.DiscardUnknown(m)
}

var xxx_messageInfo_TradeCancel proto.InternalMessageInfo

func (m *TradeCancel) GetOriginatorId() []byte {
	if m != nil {
		return m.OriginatorId
	}
	return nil
}

func (m *TradeCancel) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *TradeCancel) GetCorrectedTradePrice() int64 {
	if m != nil {
		return m.CorrectedTradePrice
	}
	return 0
}

func (m *TradeCancel) GetCorrectedTradeQuantity() int64 {
	if m != nil {
		return m.CorrectedTradeQuantity
	}
	return 0
}

func (m *TradeCancel) GetTradeId() []byte {
	if m != nil {
		return m.TradeId
	}
	return nil
}

func (m *TradeCancel) GetSaleCondition() []byte {
	if m != nil {
		return m.SaleCondition
	}
	return nil
}

func (m *TradeCancel) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *TradeCancel) GetDistributionTime() int64 {
	if m != nil {
		return m.DistributionTime
	}
	return 0
}

func (m *TradeCancel) GetTransactionTime2() int64 {
	if m != nil {
		return m.TransactionTime2
	}
	return 0
}

type Open struct {
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price                   int64                   `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	OpenCloseSettlementFlag OpenCloseSettlementFlag `protobuf:"varint,12,opt,name=OpenCloseSettlementFlag,proto3,enum=org.openfeed.OpenCloseSettlementFlag" json:"OpenCloseSettlementFlag,omitempty"`
	Currency                string                  `protobuf:"bytes,13,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                `json:"-"`
	XXX_unrecognized        []byte                  `json:"-"`
	XXX_sizecache           int32                   `json:"-"`
}

func (m *Open) Reset()         { *m = Open{} }
func (m *Open) String() string { return proto.CompactTextString(m) }
func (*Open) ProtoMessage()    {}
func (*Open) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{27}
}

func (m *Open) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Open.Unmarshal(m, b)
}
func (m *Open) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Open.Marshal(b, m, deterministic)
}
func (m *Open) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Open.Merge(m, src)
}
func (m *Open) XXX_Size() int {
	return xxx_messageInfo_Open.Size(m)
}
func (m *Open) XXX_DiscardUnknown() {
	xxx_messageInfo_Open.DiscardUnknown(m)
}

var xxx_messageInfo_Open proto.InternalMessageInfo

func (m *Open) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *Open) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *Open) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Open) GetOpenCloseSettlementFlag() OpenCloseSettlementFlag {
	if m != nil {
		return m.OpenCloseSettlementFlag
	}
	return OpenCloseSettlementFlag_UNKNOWN
}

func (m *Open) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type High struct {
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price                int64    `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	Currency             string   `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *High) Reset()         { *m = High{} }
func (m *High) String() string { return proto.CompactTextString(m) }
func (*High) ProtoMessage()    {}
func (*High) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{28}
}

func (m *High) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_High.Unmarshal(m, b)
}
func (m *High) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_High.Marshal(b, m, deterministic)
}
func (m *High) XXX_Merge(src proto.Message) {
	xxx_messageInfo_High.Merge(m, src)
}
func (m *High) XXX_Size() int {
	return xxx_messageInfo_High.Size(m)
}
func (m *High) XXX_DiscardUnknown() {
	xxx_messageInfo_High.DiscardUnknown(m)
}

var xxx_messageInfo_High proto.InternalMessageInfo

func (m *High) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *High) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *High) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *High) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type Low struct {
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price                int64    `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	Currency             string   `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Low) Reset()         { *m = Low{} }
func (m *Low) String() string { return proto.CompactTextString(m) }
func (*Low) ProtoMessage()    {}
func (*Low) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{29}
}

func (m *Low) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Low.Unmarshal(m, b)
}
func (m *Low) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Low.Marshal(b, m, deterministic)
}
func (m *Low) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Low.Merge(m, src)
}
func (m *Low) XXX_Size() int {
	return xxx_messageInfo_Low.Size(m)
}
func (m *Low) XXX_DiscardUnknown() {
	xxx_messageInfo_Low.DiscardUnknown(m)
}

var xxx_messageInfo_Low proto.InternalMessageInfo

func (m *Low) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *Low) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *Low) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Low) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type Close struct {
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price                int64    `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	Currency             string   `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Close) Reset()         { *m = Close{} }
func (m *Close) String() string { return proto.CompactTextString(m) }
func (*Close) ProtoMessage()    {}
func (*Close) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{30}
}

func (m *Close) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Close.Unmarshal(m, b)
}
func (m *Close) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Close.Marshal(b, m, deterministic)
}
func (m *Close) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Close.Merge(m, src)
}
func (m *Close) XXX_Size() int {
	return xxx_messageInfo_Close.Size(m)
}
func (m *Close) XXX_DiscardUnknown() {
	xxx_messageInfo_Close.DiscardUnknown(m)
}

var xxx_messageInfo_Close proto.InternalMessageInfo

func (m *Close) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *Close) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *Close) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Close) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type PrevClose struct {
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price                int64    `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	Currency             string   `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrevClose) Reset()         { *m = PrevClose{} }
func (m *PrevClose) String() string { return proto.CompactTextString(m) }
func (*PrevClose) ProtoMessage()    {}
func (*PrevClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{31}
}

func (m *PrevClose) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrevClose.Unmarshal(m, b)
}
func (m *PrevClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrevClose.Marshal(b, m, deterministic)
}
func (m *PrevClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrevClose.Merge(m, src)
}
func (m *PrevClose) XXX_Size() int {
	return xxx_messageInfo_PrevClose.Size(m)
}
func (m *PrevClose) XXX_DiscardUnknown() {
	xxx_messageInfo_PrevClose.DiscardUnknown(m)
}

var xxx_messageInfo_PrevClose proto.InternalMessageInfo

func (m *PrevClose) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *PrevClose) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *PrevClose) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *PrevClose) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type Last struct {
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price int64 `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	/// Divide by quantityDenominator
	Quantity             int64    `protobuf:"zigzag64,12,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Currency             string   `protobuf:"bytes,13,opt,name=currency,proto3" json:"currency,omitempty"`
	Session              string   `protobuf:"bytes,30,opt,name=session,proto3" json:"session,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Last) Reset()         { *m = Last{} }
func (m *Last) String() string { return proto.CompactTextString(m) }
func (*Last) ProtoMessage()    {}
func (*Last) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{32}
}

func (m *Last) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Last.Unmarshal(m, b)
}
func (m *Last) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Last.Marshal(b, m, deterministic)
}
func (m *Last) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Last.Merge(m, src)
}
func (m *Last) XXX_Size() int {
	return xxx_messageInfo_Last.Size(m)
}
func (m *Last) XXX_DiscardUnknown() {
	xxx_messageInfo_Last.DiscardUnknown(m)
}

var xxx_messageInfo_Last proto.InternalMessageInfo

func (m *Last) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *Last) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *Last) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Last) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Last) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Last) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

/// 52 week
type YearHigh struct {
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Divide by priceDenominator
	Price                int64    `protobuf:"zigzag64,10,opt,name=price,proto3" json:"price,omitempty"`
	Currency             string   `protobuf:"bytes,11,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YearHigh) Reset()         { *m = YearHigh{} }
func (m *YearHigh) String() string { return proto.CompactTextString(m) }
func (*YearHigh) ProtoMessage()    {}
func (*YearHigh) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{33}
}

func (m *YearHigh) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YearHigh.Unmarshal(m, b)
}
func (m *YearHigh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YearHigh.Marshal(b, m, deterministic)
}
func (m *YearHigh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YearHigh.Merge(m, src)
}
func (m *YearHigh) XXX_Size() int {
	return xxx_messageInfo_YearHigh.Size(m)
}
func (m *YearHigh) XXX_DiscardUnknown() {
	xxx_messageInfo_YearHigh.DiscardUnknown(m)
}

var xxx_messageInfo_YearHigh proto.InternalMessageInfo

func (m *YearHigh) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *YearHigh) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *YearHigh) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

/// 52 week
type YearLow struct {
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Divide by priceDenominator
	Price                int64    `protobuf:"zigzag64,10,opt,name=price,proto3" json:"price,omitempty"`
	Currency             string   `protobuf:"bytes,11,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YearLow) Reset()         { *m = YearLow{} }
func (m *YearLow) String() string { return proto.CompactTextString(m) }
func (*YearLow) ProtoMessage()    {}
func (*YearLow) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{34}
}

func (m *YearLow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YearLow.Unmarshal(m, b)
}
func (m *YearLow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YearLow.Marshal(b, m, deterministic)
}
func (m *YearLow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YearLow.Merge(m, src)
}
func (m *YearLow) XXX_Size() int {
	return xxx_messageInfo_YearLow.Size(m)
}
func (m *YearLow) XXX_DiscardUnknown() {
	xxx_messageInfo_YearLow.DiscardUnknown(m)
}

var xxx_messageInfo_YearLow proto.InternalMessageInfo

func (m *YearLow) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *YearLow) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *YearLow) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

/// Total volume traded
type Volume struct {
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	// Total volume traded.
	Volume               int64    `protobuf:"zigzag64,11,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Volume) Reset()         { *m = Volume{} }
func (m *Volume) String() string { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()    {}
func (*Volume) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{35}
}

func (m *Volume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume.Unmarshal(m, b)
}
func (m *Volume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume.Marshal(b, m, deterministic)
}
func (m *Volume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume.Merge(m, src)
}
func (m *Volume) XXX_Size() int {
	return xxx_messageInfo_Volume.Size(m)
}
func (m *Volume) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume.DiscardUnknown(m)
}

var xxx_messageInfo_Volume proto.InternalMessageInfo

func (m *Volume) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *Volume) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *Volume) GetVolume() int64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

/// Total number of trades
type NumberOfTrades struct {
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate            int32    `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	NumberTrades         int64    `protobuf:"zigzag64,11,opt,name=numberTrades,proto3" json:"numberTrades,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumberOfTrades) Reset()         { *m = NumberOfTrades{} }
func (m *NumberOfTrades) String() string { return proto.CompactTextString(m) }
func (*NumberOfTrades) ProtoMessage()    {}
func (*NumberOfTrades) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{36}
}

func (m *NumberOfTrades) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumberOfTrades.Unmarshal(m, b)
}
func (m *NumberOfTrades) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumberOfTrades.Marshal(b, m, deterministic)
}
func (m *NumberOfTrades) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberOfTrades.Merge(m, src)
}
func (m *NumberOfTrades) XXX_Size() int {
	return xxx_messageInfo_NumberOfTrades.Size(m)
}
func (m *NumberOfTrades) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberOfTrades.DiscardUnknown(m)
}

var xxx_messageInfo_NumberOfTrades proto.InternalMessageInfo

func (m *NumberOfTrades) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *NumberOfTrades) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *NumberOfTrades) GetNumberTrades() int64 {
	if m != nil {
		return m.NumberTrades
	}
	return 0
}

/// Total monetary value of trades
type MonetaryValue struct {
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Value                int64    `protobuf:"zigzag64,11,opt,name=value,proto3" json:"value,omitempty"`
	ValueCurrencyCode    string   `protobuf:"bytes,12,opt,name=valueCurrencyCode,proto3" json:"valueCurrencyCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonetaryValue) Reset()         { *m = MonetaryValue{} }
func (m *MonetaryValue) String() string { return proto.CompactTextString(m) }
func (*MonetaryValue) ProtoMessage()    {}
func (*MonetaryValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{37}
}

func (m *MonetaryValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonetaryValue.Unmarshal(m, b)
}
func (m *MonetaryValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonetaryValue.Marshal(b, m, deterministic)
}
func (m *MonetaryValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonetaryValue.Merge(m, src)
}
func (m *MonetaryValue) XXX_Size() int {
	return xxx_messageInfo_MonetaryValue.Size(m)
}
func (m *MonetaryValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MonetaryValue.DiscardUnknown(m)
}

var xxx_messageInfo_MonetaryValue proto.InternalMessageInfo

func (m *MonetaryValue) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *MonetaryValue) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *MonetaryValue) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *MonetaryValue) GetValueCurrencyCode() string {
	if m != nil {
		return m.ValueCurrencyCode
	}
	return ""
}

//// Settlement value for futures and options markets.
type Settlement struct {
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price             int64            `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	PreliminarySettle bool             `protobuf:"varint,12,opt,name=preliminarySettle,proto3" json:"preliminarySettle,omitempty"`
	Currency          string           `protobuf:"bytes,13,opt,name=currency,proto3" json:"currency,omitempty"`
	SettlementSource  SettlementSource `protobuf:"varint,14,opt,name=settlementSource,proto3,enum=org.openfeed.SettlementSource" json:"settlementSource,omitempty"`
	/// Used by CME ITC.
	Session string `protobuf:"bytes,15,opt,name=session,proto3" json:"session,omitempty"`
	/// Reserved
	Reserved             bool     `protobuf:"varint,127,opt,name=reserved,proto3" json:"reserved,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Settlement) Reset()         { *m = Settlement{} }
func (m *Settlement) String() string { return proto.CompactTextString(m) }
func (*Settlement) ProtoMessage()    {}
func (*Settlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{38}
}

func (m *Settlement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settlement.Unmarshal(m, b)
}
func (m *Settlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settlement.Marshal(b, m, deterministic)
}
func (m *Settlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settlement.Merge(m, src)
}
func (m *Settlement) XXX_Size() int {
	return xxx_messageInfo_Settlement.Size(m)
}
func (m *Settlement) XXX_DiscardUnknown() {
	xxx_messageInfo_Settlement.DiscardUnknown(m)
}

var xxx_messageInfo_Settlement proto.InternalMessageInfo

func (m *Settlement) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *Settlement) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *Settlement) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Settlement) GetPreliminarySettle() bool {
	if m != nil {
		return m.PreliminarySettle
	}
	return false
}

func (m *Settlement) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Settlement) GetSettlementSource() SettlementSource {
	if m != nil {
		return m.SettlementSource
	}
	return SettlementSource_UNKNOWN_SETTLEMENT_SOURCE
}

func (m *Settlement) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *Settlement) GetReserved() bool {
	if m != nil {
		return m.Reserved
	}
	return false
}

/// Open interest
type OpenInterest struct {
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	// Date only, format 2012-07-04 -> 20120704
	TradeDate            int32    `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	Volume               int64    `protobuf:"zigzag64,11,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenInterest) Reset()         { *m = OpenInterest{} }
func (m *OpenInterest) String() string { return proto.CompactTextString(m) }
func (*OpenInterest) ProtoMessage()    {}
func (*OpenInterest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{39}
}

func (m *OpenInterest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenInterest.Unmarshal(m, b)
}
func (m *OpenInterest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenInterest.Marshal(b, m, deterministic)
}
func (m *OpenInterest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenInterest.Merge(m, src)
}
func (m *OpenInterest) XXX_Size() int {
	return xxx_messageInfo_OpenInterest.Size(m)
}
func (m *OpenInterest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenInterest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenInterest proto.InternalMessageInfo

func (m *OpenInterest) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *OpenInterest) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *OpenInterest) GetVolume() int64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

/// Volume Weighted Average Price
type Vwap struct {
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	// Date only, format 2012-07-04 -> 20120704
	TradeDate            int32    `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	Vwap                 int64    `protobuf:"zigzag64,11,opt,name=vwap,proto3" json:"vwap,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vwap) Reset()         { *m = Vwap{} }
func (m *Vwap) String() string { return proto.CompactTextString(m) }
func (*Vwap) ProtoMessage()    {}
func (*Vwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{40}
}

func (m *Vwap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vwap.Unmarshal(m, b)
}
func (m *Vwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vwap.Marshal(b, m, deterministic)
}
func (m *Vwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vwap.Merge(m, src)
}
func (m *Vwap) XXX_Size() int {
	return xxx_messageInfo_Vwap.Size(m)
}
func (m *Vwap) XXX_DiscardUnknown() {
	xxx_messageInfo_Vwap.DiscardUnknown(m)
}

var xxx_messageInfo_Vwap proto.InternalMessageInfo

func (m *Vwap) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *Vwap) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *Vwap) GetVwap() int64 {
	if m != nil {
		return m.Vwap
	}
	return 0
}

/// Dividends and Income Distributions
type DividendsIncomeDistributions struct {
	TransactionTime int64  `protobuf:"zigzag64,6,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	InstrumentType  string `protobuf:"bytes,7,opt,name=instrumentType,proto3" json:"instrumentType,omitempty"`
	// Corporate Action
	CorporateAction string `protobuf:"bytes,8,opt,name=corporateAction,proto3" json:"corporateAction,omitempty"`
	// Distribution Type
	DistributionType string `protobuf:"bytes,9,opt,name=distributionType,proto3" json:"distributionType,omitempty"`
	// Date only, format 2012-07-04 -> 20120704
	PayableDate    int32 `protobuf:"zigzag32,10,opt,name=payableDate,proto3" json:"payableDate,omitempty"`
	RecordDate     int32 `protobuf:"zigzag32,11,opt,name=recordDate,proto3" json:"recordDate,omitempty"`
	ExDividendDate int32 `protobuf:"zigzag32,12,opt,name=exDividendDate,proto3" json:"exDividendDate,omitempty"`
	// Cash amount of distribution
	Amount       int64    `protobuf:"zigzag64,13,opt,name=amount,proto3" json:"amount,omitempty"`
	CurrencyCode string   `protobuf:"bytes,14,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	Notes        []string `protobuf:"bytes,15,rep,name=notes,proto3" json:"notes,omitempty"`
	//
	TotalCashDistribution        int64 `protobuf:"zigzag64,16,opt,name=totalCashDistribution,proto3" json:"totalCashDistribution,omitempty"`
	NonQualifiedCashDistribution int64 `protobuf:"zigzag64,17,opt,name=nonQualifiedCashDistribution,proto3" json:"nonQualifiedCashDistribution,omitempty"`
	QualifiedCashDistribution    int64 `protobuf:"zigzag64,18,opt,name=qualifiedCashDistribution,proto3" json:"qualifiedCashDistribution,omitempty"`
	TaxFreeCashDistribution      int64 `protobuf:"zigzag64,19,opt,name=taxFreeCashDistribution,proto3" json:"taxFreeCashDistribution,omitempty"`
	OrdinaryForeignTaxCredit     int64 `protobuf:"zigzag64,20,opt,name=ordinaryForeignTaxCredit,proto3" json:"ordinaryForeignTaxCredit,omitempty"`
	QualifiedForeignTaxCredit    int64 `protobuf:"zigzag64,21,opt,name=qualifiedForeignTaxCredit,proto3" json:"qualifiedForeignTaxCredit,omitempty"`
	StockDividendRatio           int64 `protobuf:"zigzag64,22,opt,name=stockDividendRatio,proto3" json:"stockDividendRatio,omitempty"`
	//
	ReinvestDate         int32    `protobuf:"zigzag32,23,opt,name=reinvestDate,proto3" json:"reinvestDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DividendsIncomeDistributions) Reset()         { *m = DividendsIncomeDistributions{} }
func (m *DividendsIncomeDistributions) String() string { return proto.CompactTextString(m) }
func (*DividendsIncomeDistributions) ProtoMessage()    {}
func (*DividendsIncomeDistributions) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{41}
}

func (m *DividendsIncomeDistributions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DividendsIncomeDistributions.Unmarshal(m, b)
}
func (m *DividendsIncomeDistributions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DividendsIncomeDistributions.Marshal(b, m, deterministic)
}
func (m *DividendsIncomeDistributions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DividendsIncomeDistributions.Merge(m, src)
}
func (m *DividendsIncomeDistributions) XXX_Size() int {
	return xxx_messageInfo_DividendsIncomeDistributions.Size(m)
}
func (m *DividendsIncomeDistributions) XXX_DiscardUnknown() {
	xxx_messageInfo_DividendsIncomeDistributions.DiscardUnknown(m)
}

var xxx_messageInfo_DividendsIncomeDistributions proto.InternalMessageInfo

func (m *DividendsIncomeDistributions) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *DividendsIncomeDistributions) GetInstrumentType() string {
	if m != nil {
		return m.InstrumentType
	}
	return ""
}

func (m *DividendsIncomeDistributions) GetCorporateAction() string {
	if m != nil {
		return m.CorporateAction
	}
	return ""
}

func (m *DividendsIncomeDistributions) GetDistributionType() string {
	if m != nil {
		return m.DistributionType
	}
	return ""
}

func (m *DividendsIncomeDistributions) GetPayableDate() int32 {
	if m != nil {
		return m.PayableDate
	}
	return 0
}

func (m *DividendsIncomeDistributions) GetRecordDate() int32 {
	if m != nil {
		return m.RecordDate
	}
	return 0
}

func (m *DividendsIncomeDistributions) GetExDividendDate() int32 {
	if m != nil {
		return m.ExDividendDate
	}
	return 0
}

func (m *DividendsIncomeDistributions) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *DividendsIncomeDistributions) GetCurrencyCode() string {
	if m != nil {
		return m.CurrencyCode
	}
	return ""
}

func (m *DividendsIncomeDistributions) GetNotes() []string {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *DividendsIncomeDistributions) GetTotalCashDistribution() int64 {
	if m != nil {
		return m.TotalCashDistribution
	}
	return 0
}

func (m *DividendsIncomeDistributions) GetNonQualifiedCashDistribution() int64 {
	if m != nil {
		return m.NonQualifiedCashDistribution
	}
	return 0
}

func (m *DividendsIncomeDistributions) GetQualifiedCashDistribution() int64 {
	if m != nil {
		return m.QualifiedCashDistribution
	}
	return 0
}

func (m *DividendsIncomeDistributions) GetTaxFreeCashDistribution() int64 {
	if m != nil {
		return m.TaxFreeCashDistribution
	}
	return 0
}

func (m *DividendsIncomeDistributions) GetOrdinaryForeignTaxCredit() int64 {
	if m != nil {
		return m.OrdinaryForeignTaxCredit
	}
	return 0
}

func (m *DividendsIncomeDistributions) GetQualifiedForeignTaxCredit() int64 {
	if m != nil {
		return m.QualifiedForeignTaxCredit
	}
	return 0
}

func (m *DividendsIncomeDistributions) GetStockDividendRatio() int64 {
	if m != nil {
		return m.StockDividendRatio
	}
	return 0
}

func (m *DividendsIncomeDistributions) GetReinvestDate() int32 {
	if m != nil {
		return m.ReinvestDate
	}
	return 0
}

/// Capital Distributions
type CapitalDistributions struct {
	TransactionTime int64  `protobuf:"zigzag64,8,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	InstrumentType  string `protobuf:"bytes,9,opt,name=instrumentType,proto3" json:"instrumentType,omitempty"`
	// Corporate Action
	CorporateAction string `protobuf:"bytes,10,opt,name=corporateAction,proto3" json:"corporateAction,omitempty"`
	// Date only, format 2012-07-04 -> 20120704
	PayableDate int32 `protobuf:"zigzag32,11,opt,name=payableDate,proto3" json:"payableDate,omitempty"`
	RecordDate  int32 `protobuf:"zigzag32,12,opt,name=recordDate,proto3" json:"recordDate,omitempty"`
	ExDate      int32 `protobuf:"zigzag32,13,opt,name=exDate,proto3" json:"exDate,omitempty"`
	// Distributions
	ShortTermCapitalGain     int64    `protobuf:"zigzag64,14,opt,name=shortTermCapitalGain,proto3" json:"shortTermCapitalGain,omitempty"`
	LongTermCapitalGain      int64    `protobuf:"zigzag64,15,opt,name=longTermCapitalGain,proto3" json:"longTermCapitalGain,omitempty"`
	UnallocatedDistributions int64    `protobuf:"zigzag64,16,opt,name=unallocatedDistributions,proto3" json:"unallocatedDistributions,omitempty"`
	ReturnOfCapital          int64    `protobuf:"zigzag64,17,opt,name=returnOfCapital,proto3" json:"returnOfCapital,omitempty"`
	CurrencyCode             string   `protobuf:"bytes,18,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	Notes                    []string `protobuf:"bytes,19,rep,name=notes,proto3" json:"notes,omitempty"`
	//
	ReinvestDate         int32    `protobuf:"zigzag32,20,opt,name=reinvestDate,proto3" json:"reinvestDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapitalDistributions) Reset()         { *m = CapitalDistributions{} }
func (m *CapitalDistributions) String() string { return proto.CompactTextString(m) }
func (*CapitalDistributions) ProtoMessage()    {}
func (*CapitalDistributions) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{42}
}

func (m *CapitalDistributions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CapitalDistributions.Unmarshal(m, b)
}
func (m *CapitalDistributions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CapitalDistributions.Marshal(b, m, deterministic)
}
func (m *CapitalDistributions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapitalDistributions.Merge(m, src)
}
func (m *CapitalDistributions) XXX_Size() int {
	return xxx_messageInfo_CapitalDistributions.Size(m)
}
func (m *CapitalDistributions) XXX_DiscardUnknown() {
	xxx_messageInfo_CapitalDistributions.DiscardUnknown(m)
}

var xxx_messageInfo_CapitalDistributions proto.InternalMessageInfo

func (m *CapitalDistributions) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *CapitalDistributions) GetInstrumentType() string {
	if m != nil {
		return m.InstrumentType
	}
	return ""
}

func (m *CapitalDistributions) GetCorporateAction() string {
	if m != nil {
		return m.CorporateAction
	}
	return ""
}

func (m *CapitalDistributions) GetPayableDate() int32 {
	if m != nil {
		return m.PayableDate
	}
	return 0
}

func (m *CapitalDistributions) GetRecordDate() int32 {
	if m != nil {
		return m.RecordDate
	}
	return 0
}

func (m *CapitalDistributions) GetExDate() int32 {
	if m != nil {
		return m.ExDate
	}
	return 0
}

func (m *CapitalDistributions) GetShortTermCapitalGain() int64 {
	if m != nil {
		return m.ShortTermCapitalGain
	}
	return 0
}

func (m *CapitalDistributions) GetLongTermCapitalGain() int64 {
	if m != nil {
		return m.LongTermCapitalGain
	}
	return 0
}

func (m *CapitalDistributions) GetUnallocatedDistributions() int64 {
	if m != nil {
		return m.UnallocatedDistributions
	}
	return 0
}

func (m *CapitalDistributions) GetReturnOfCapital() int64 {
	if m != nil {
		return m.ReturnOfCapital
	}
	return 0
}

func (m *CapitalDistributions) GetCurrencyCode() string {
	if m != nil {
		return m.CurrencyCode
	}
	return ""
}

func (m *CapitalDistributions) GetNotes() []string {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *CapitalDistributions) GetReinvestDate() int32 {
	if m != nil {
		return m.ReinvestDate
	}
	return 0
}

//
type SharesOutstanding struct {
	SharesOutstanding    int64    `protobuf:"zigzag64,1,opt,name=sharesOutstanding,proto3" json:"sharesOutstanding,omitempty"`
	TransactionTime      int64    `protobuf:"zigzag64,2,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SharesOutstanding) Reset()         { *m = SharesOutstanding{} }
func (m *SharesOutstanding) String() string { return proto.CompactTextString(m) }
func (*SharesOutstanding) ProtoMessage()    {}
func (*SharesOutstanding) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{43}
}

func (m *SharesOutstanding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SharesOutstanding.Unmarshal(m, b)
}
func (m *SharesOutstanding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SharesOutstanding.Marshal(b, m, deterministic)
}
func (m *SharesOutstanding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SharesOutstanding.Merge(m, src)
}
func (m *SharesOutstanding) XXX_Size() int {
	return xxx_messageInfo_SharesOutstanding.Size(m)
}
func (m *SharesOutstanding) XXX_DiscardUnknown() {
	xxx_messageInfo_SharesOutstanding.DiscardUnknown(m)
}

var xxx_messageInfo_SharesOutstanding proto.InternalMessageInfo

func (m *SharesOutstanding) GetSharesOutstanding() int64 {
	if m != nil {
		return m.SharesOutstanding
	}
	return 0
}

func (m *SharesOutstanding) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

//
type NetAssetValue struct {
	NetAssetValue        int64    `protobuf:"zigzag64,1,opt,name=netAssetValue,proto3" json:"netAssetValue,omitempty"`
	TransactionTime      int64    `protobuf:"zigzag64,2,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetAssetValue) Reset()         { *m = NetAssetValue{} }
func (m *NetAssetValue) String() string { return proto.CompactTextString(m) }
func (*NetAssetValue) ProtoMessage()    {}
func (*NetAssetValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{44}
}

func (m *NetAssetValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetAssetValue.Unmarshal(m, b)
}
func (m *NetAssetValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetAssetValue.Marshal(b, m, deterministic)
}
func (m *NetAssetValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetAssetValue.Merge(m, src)
}
func (m *NetAssetValue) XXX_Size() int {
	return xxx_messageInfo_NetAssetValue.Size(m)
}
func (m *NetAssetValue) XXX_DiscardUnknown() {
	xxx_messageInfo_NetAssetValue.DiscardUnknown(m)
}

var xxx_messageInfo_NetAssetValue proto.InternalMessageInfo

func (m *NetAssetValue) GetNetAssetValue() int64 {
	if m != nil {
		return m.NetAssetValue
	}
	return 0
}

func (m *NetAssetValue) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

/// Intra and EOD Market Summary
type MarketSummary struct {
	TransactionTime int64 `protobuf:"zigzag64,1,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradingDate int32                  `protobuf:"zigzag32,2,opt,name=tradingDate,proto3" json:"tradingDate,omitempty"`
	StartOfDay  bool                   `protobuf:"varint,3,opt,name=startOfDay,proto3" json:"startOfDay,omitempty"`
	EndOfDay    bool                   `protobuf:"varint,4,opt,name=endOfDay,proto3" json:"endOfDay,omitempty"`
	Clear       MarketSummary_ClearSet `protobuf:"varint,5,opt,name=clear,proto3,enum=org.openfeed.MarketSummary_ClearSet" json:"clear,omitempty"`
	//
	InstrumentStatus *InstrumentStatus `protobuf:"bytes,9,opt,name=instrumentStatus,proto3" json:"instrumentStatus,omitempty"`
	Bbo              *BestBidOffer     `protobuf:"bytes,10,opt,name=bbo,proto3" json:"bbo,omitempty"`
	Open             *Open             `protobuf:"bytes,11,opt,name=open,proto3" json:"open,omitempty"`
	High             *High             `protobuf:"bytes,12,opt,name=high,proto3" json:"high,omitempty"`
	Low              *Low              `protobuf:"bytes,13,opt,name=low,proto3" json:"low,omitempty"`
	Close            *Close            `protobuf:"bytes,14,opt,name=close,proto3" json:"close,omitempty"`
	PrevClose        *PrevClose        `protobuf:"bytes,15,opt,name=prevClose,proto3" json:"prevClose,omitempty"`
	Last             *Last             `protobuf:"bytes,16,opt,name=last,proto3" json:"last,omitempty"`
	Volume           *Volume           `protobuf:"bytes,17,opt,name=volume,proto3" json:"volume,omitempty"`
	Settlement       *Settlement       `protobuf:"bytes,18,opt,name=settlement,proto3" json:"settlement,omitempty"`
	OpenInterest     *OpenInterest     `protobuf:"bytes,19,opt,name=openInterest,proto3" json:"openInterest,omitempty"`
	Vwap             *Vwap             `protobuf:"bytes,20,opt,name=vwap,proto3" json:"vwap,omitempty"`
	/// Used by CME ITC.
	Session              string                    `protobuf:"bytes,21,opt,name=session,proto3" json:"session,omitempty"`
	SummaryType          MarketSummary_SummaryType `protobuf:"varint,22,opt,name=summaryType,proto3,enum=org.openfeed.MarketSummary_SummaryType" json:"summaryType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *MarketSummary) Reset()         { *m = MarketSummary{} }
func (m *MarketSummary) String() string { return proto.CompactTextString(m) }
func (*MarketSummary) ProtoMessage()    {}
func (*MarketSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{45}
}

func (m *MarketSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketSummary.Unmarshal(m, b)
}
func (m *MarketSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketSummary.Marshal(b, m, deterministic)
}
func (m *MarketSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketSummary.Merge(m, src)
}
func (m *MarketSummary) XXX_Size() int {
	return xxx_messageInfo_MarketSummary.Size(m)
}
func (m *MarketSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketSummary.DiscardUnknown(m)
}

var xxx_messageInfo_MarketSummary proto.InternalMessageInfo

func (m *MarketSummary) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *MarketSummary) GetTradingDate() int32 {
	if m != nil {
		return m.TradingDate
	}
	return 0
}

func (m *MarketSummary) GetStartOfDay() bool {
	if m != nil {
		return m.StartOfDay
	}
	return false
}

func (m *MarketSummary) GetEndOfDay() bool {
	if m != nil {
		return m.EndOfDay
	}
	return false
}

func (m *MarketSummary) GetClear() MarketSummary_ClearSet {
	if m != nil {
		return m.Clear
	}
	return MarketSummary_NONE
}

func (m *MarketSummary) GetInstrumentStatus() *InstrumentStatus {
	if m != nil {
		return m.InstrumentStatus
	}
	return nil
}

func (m *MarketSummary) GetBbo() *BestBidOffer {
	if m != nil {
		return m.Bbo
	}
	return nil
}

func (m *MarketSummary) GetOpen() *Open {
	if m != nil {
		return m.Open
	}
	return nil
}

func (m *MarketSummary) GetHigh() *High {
	if m != nil {
		return m.High
	}
	return nil
}

func (m *MarketSummary) GetLow() *Low {
	if m != nil {
		return m.Low
	}
	return nil
}

func (m *MarketSummary) GetClose() *Close {
	if m != nil {
		return m.Close
	}
	return nil
}

func (m *MarketSummary) GetPrevClose() *PrevClose {
	if m != nil {
		return m.PrevClose
	}
	return nil
}

func (m *MarketSummary) GetLast() *Last {
	if m != nil {
		return m.Last
	}
	return nil
}

func (m *MarketSummary) GetVolume() *Volume {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *MarketSummary) GetSettlement() *Settlement {
	if m != nil {
		return m.Settlement
	}
	return nil
}

func (m *MarketSummary) GetOpenInterest() *OpenInterest {
	if m != nil {
		return m.OpenInterest
	}
	return nil
}

func (m *MarketSummary) GetVwap() *Vwap {
	if m != nil {
		return m.Vwap
	}
	return nil
}

func (m *MarketSummary) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *MarketSummary) GetSummaryType() MarketSummary_SummaryType {
	if m != nil {
		return m.SummaryType
	}
	return MarketSummary_EXCHANGE_REFRESH
}

type Context struct {
	Data                 []*ContextData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	TracePoints          []*TracePoint  `protobuf:"bytes,2,rep,name=tracePoints,proto3" json:"tracePoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Context) Reset()         { *m = Context{} }
func (m *Context) String() string { return proto.CompactTextString(m) }
func (*Context) ProtoMessage()    {}
func (*Context) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{46}
}

func (m *Context) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Context.Unmarshal(m, b)
}
func (m *Context) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Context.Marshal(b, m, deterministic)
}
func (m *Context) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Context.Merge(m, src)
}
func (m *Context) XXX_Size() int {
	return xxx_messageInfo_Context.Size(m)
}
func (m *Context) XXX_DiscardUnknown() {
	xxx_messageInfo_Context.DiscardUnknown(m)
}

var xxx_messageInfo_Context proto.InternalMessageInfo

func (m *Context) GetData() []*ContextData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Context) GetTracePoints() []*TracePoint {
	if m != nil {
		return m.TracePoints
	}
	return nil
}

type ContextData struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*ContextData_Vstring
	//	*ContextData_Vbytes
	//	*ContextData_Vbool
	//	*ContextData_Vsint32
	//	*ContextData_Vsint64
	//	*ContextData_Vfloat
	//	*ContextData_Vdouble
	Data                 isContextData_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ContextData) Reset()         { *m = ContextData{} }
func (m *ContextData) String() string { return proto.CompactTextString(m) }
func (*ContextData) ProtoMessage()    {}
func (*ContextData) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{47}
}

func (m *ContextData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContextData.Unmarshal(m, b)
}
func (m *ContextData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContextData.Marshal(b, m, deterministic)
}
func (m *ContextData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContextData.Merge(m, src)
}
func (m *ContextData) XXX_Size() int {
	return xxx_messageInfo_ContextData.Size(m)
}
func (m *ContextData) XXX_DiscardUnknown() {
	xxx_messageInfo_ContextData.DiscardUnknown(m)
}

var xxx_messageInfo_ContextData proto.InternalMessageInfo

func (m *ContextData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type isContextData_Data interface {
	isContextData_Data()
}

type ContextData_Vstring struct {
	Vstring string `protobuf:"bytes,5,opt,name=vstring,proto3,oneof"`
}

type ContextData_Vbytes struct {
	Vbytes []byte `protobuf:"bytes,6,opt,name=vbytes,proto3,oneof"`
}

type ContextData_Vbool struct {
	Vbool bool `protobuf:"varint,7,opt,name=vbool,proto3,oneof"`
}

type ContextData_Vsint32 struct {
	Vsint32 int32 `protobuf:"zigzag32,8,opt,name=vsint32,proto3,oneof"`
}

type ContextData_Vsint64 struct {
	Vsint64 int64 `protobuf:"zigzag64,9,opt,name=vsint64,proto3,oneof"`
}

type ContextData_Vfloat struct {
	Vfloat float32 `protobuf:"fixed32,10,opt,name=vfloat,proto3,oneof"`
}

type ContextData_Vdouble struct {
	Vdouble float64 `protobuf:"fixed64,11,opt,name=vdouble,proto3,oneof"`
}

func (*ContextData_Vstring) isContextData_Data() {}

func (*ContextData_Vbytes) isContextData_Data() {}

func (*ContextData_Vbool) isContextData_Data() {}

func (*ContextData_Vsint32) isContextData_Data() {}

func (*ContextData_Vsint64) isContextData_Data() {}

func (*ContextData_Vfloat) isContextData_Data() {}

func (*ContextData_Vdouble) isContextData_Data() {}

func (m *ContextData) GetData() isContextData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ContextData) GetVstring() string {
	if x, ok := m.GetData().(*ContextData_Vstring); ok {
		return x.Vstring
	}
	return ""
}

func (m *ContextData) GetVbytes() []byte {
	if x, ok := m.GetData().(*ContextData_Vbytes); ok {
		return x.Vbytes
	}
	return nil
}

func (m *ContextData) GetVbool() bool {
	if x, ok := m.GetData().(*ContextData_Vbool); ok {
		return x.Vbool
	}
	return false
}

func (m *ContextData) GetVsint32() int32 {
	if x, ok := m.GetData().(*ContextData_Vsint32); ok {
		return x.Vsint32
	}
	return 0
}

func (m *ContextData) GetVsint64() int64 {
	if x, ok := m.GetData().(*ContextData_Vsint64); ok {
		return x.Vsint64
	}
	return 0
}

func (m *ContextData) GetVfloat() float32 {
	if x, ok := m.GetData().(*ContextData_Vfloat); ok {
		return x.Vfloat
	}
	return 0
}

func (m *ContextData) GetVdouble() float64 {
	if x, ok := m.GetData().(*ContextData_Vdouble); ok {
		return x.Vdouble
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ContextData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ContextData_Vstring)(nil),
		(*ContextData_Vbytes)(nil),
		(*ContextData_Vbool)(nil),
		(*ContextData_Vsint32)(nil),
		(*ContextData_Vsint64)(nil),
		(*ContextData_Vfloat)(nil),
		(*ContextData_Vdouble)(nil),
	}
}

// Tracing
type TracePoint struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ComponentId          string   `protobuf:"bytes,2,opt,name=componentId,proto3" json:"componentId,omitempty"`
	TimestampNs          int64    `protobuf:"zigzag64,3,opt,name=timestampNs,proto3" json:"timestampNs,omitempty"`
	ComponentLatencyNs   int32    `protobuf:"varint,4,opt,name=componentLatencyNs,proto3" json:"componentLatencyNs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracePoint) Reset()         { *m = TracePoint{} }
func (m *TracePoint) String() string { return proto.CompactTextString(m) }
func (*TracePoint) ProtoMessage()    {}
func (*TracePoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{48}
}

func (m *TracePoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracePoint.Unmarshal(m, b)
}
func (m *TracePoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracePoint.Marshal(b, m, deterministic)
}
func (m *TracePoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracePoint.Merge(m, src)
}
func (m *TracePoint) XXX_Size() int {
	return xxx_messageInfo_TracePoint.Size(m)
}
func (m *TracePoint) XXX_DiscardUnknown() {
	xxx_messageInfo_TracePoint.DiscardUnknown(m)
}

var xxx_messageInfo_TracePoint proto.InternalMessageInfo

func (m *TracePoint) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TracePoint) GetComponentId() string {
	if m != nil {
		return m.ComponentId
	}
	return ""
}

func (m *TracePoint) GetTimestampNs() int64 {
	if m != nil {
		return m.TimestampNs
	}
	return 0
}

func (m *TracePoint) GetComponentLatencyNs() int32 {
	if m != nil {
		return m.ComponentLatencyNs
	}
	return 0
}

// TCP replay request.
type TCPHistoricalReplayRequest struct {
	Channel              int32    `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
	ResetNumber          int32    `protobuf:"varint,2,opt,name=resetNumber,proto3" json:"resetNumber,omitempty"`
	Sequence             int64    `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Count                int32    `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	RequestId            string   `protobuf:"bytes,5,opt,name=requestId,proto3" json:"requestId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TCPHistoricalReplayRequest) Reset()         { *m = TCPHistoricalReplayRequest{} }
func (m *TCPHistoricalReplayRequest) String() string { return proto.CompactTextString(m) }
func (*TCPHistoricalReplayRequest) ProtoMessage()    {}
func (*TCPHistoricalReplayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{49}
}

func (m *TCPHistoricalReplayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TCPHistoricalReplayRequest.Unmarshal(m, b)
}
func (m *TCPHistoricalReplayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TCPHistoricalReplayRequest.Marshal(b, m, deterministic)
}
func (m *TCPHistoricalReplayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCPHistoricalReplayRequest.Merge(m, src)
}
func (m *TCPHistoricalReplayRequest) XXX_Size() int {
	return xxx_messageInfo_TCPHistoricalReplayRequest.Size(m)
}
func (m *TCPHistoricalReplayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TCPHistoricalReplayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TCPHistoricalReplayRequest proto.InternalMessageInfo

func (m *TCPHistoricalReplayRequest) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *TCPHistoricalReplayRequest) GetResetNumber() int32 {
	if m != nil {
		return m.ResetNumber
	}
	return 0
}

func (m *TCPHistoricalReplayRequest) GetSequence() int64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *TCPHistoricalReplayRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *TCPHistoricalReplayRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

/// Request for the snapshot to the Market state.
type SnapshotRequest struct {
	Channel              int32                                 `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
	ResetNumber          int32                                 `protobuf:"varint,2,opt,name=resetNumber,proto3" json:"resetNumber,omitempty"`
	RequestId            string                                `protobuf:"bytes,3,opt,name=requestId,proto3" json:"requestId,omitempty"`
	SnapshotRequestTypes []SnapshotRequest_SnapshotRequestType `protobuf:"varint,4,rep,packed,name=snapshotRequestTypes,proto3,enum=org.openfeed.SnapshotRequest_SnapshotRequestType" json:"snapshotRequestTypes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *SnapshotRequest) Reset()         { *m = SnapshotRequest{} }
func (m *SnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*SnapshotRequest) ProtoMessage()    {}
func (*SnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{50}
}

func (m *SnapshotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotRequest.Unmarshal(m, b)
}
func (m *SnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotRequest.Marshal(b, m, deterministic)
}
func (m *SnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotRequest.Merge(m, src)
}
func (m *SnapshotRequest) XXX_Size() int {
	return xxx_messageInfo_SnapshotRequest.Size(m)
}
func (m *SnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotRequest proto.InternalMessageInfo

func (m *SnapshotRequest) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *SnapshotRequest) GetResetNumber() int32 {
	if m != nil {
		return m.ResetNumber
	}
	return 0
}

func (m *SnapshotRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *SnapshotRequest) GetSnapshotRequestTypes() []SnapshotRequest_SnapshotRequestType {
	if m != nil {
		return m.SnapshotRequestTypes
	}
	return nil
}

/// The VolumeAtPrice class encapsulates all of the trades throughout the day,
/// and organizes a table of volume at prices.
type VolumeAtPrice struct {
	MarketId int64  `protobuf:"zigzag64,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	Symbol   string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	/// UTC Timestamp of transaction, nano seconds since Unix epoch
	TransactionTime      int64 `protobuf:"zigzag64,3,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	LastPrice            int64 `protobuf:"zigzag64,4,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`
	LastQuantity         int64 `protobuf:"zigzag64,5,opt,name=lastQuantity,proto3" json:"lastQuantity,omitempty"`
	LastCumulativeVolume int64 `protobuf:"zigzag64,6,opt,name=lastCumulativeVolume,proto3" json:"lastCumulativeVolume,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate            int32                             `protobuf:"zigzag32,7,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	PriceVolumes         []*VolumeAtPrice_PriceLevelVolume `protobuf:"bytes,8,rep,name=priceVolumes,proto3" json:"priceVolumes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *VolumeAtPrice) Reset()         { *m = VolumeAtPrice{} }
func (m *VolumeAtPrice) String() string { return proto.CompactTextString(m) }
func (*VolumeAtPrice) ProtoMessage()    {}
func (*VolumeAtPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{51}
}

func (m *VolumeAtPrice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeAtPrice.Unmarshal(m, b)
}
func (m *VolumeAtPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeAtPrice.Marshal(b, m, deterministic)
}
func (m *VolumeAtPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeAtPrice.Merge(m, src)
}
func (m *VolumeAtPrice) XXX_Size() int {
	return xxx_messageInfo_VolumeAtPrice.Size(m)
}
func (m *VolumeAtPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeAtPrice.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeAtPrice proto.InternalMessageInfo

func (m *VolumeAtPrice) GetMarketId() int64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *VolumeAtPrice) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *VolumeAtPrice) GetTransactionTime() int64 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *VolumeAtPrice) GetLastPrice() int64 {
	if m != nil {
		return m.LastPrice
	}
	return 0
}

func (m *VolumeAtPrice) GetLastQuantity() int64 {
	if m != nil {
		return m.LastQuantity
	}
	return 0
}

func (m *VolumeAtPrice) GetLastCumulativeVolume() int64 {
	if m != nil {
		return m.LastCumulativeVolume
	}
	return 0
}

func (m *VolumeAtPrice) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *VolumeAtPrice) GetPriceVolumes() []*VolumeAtPrice_PriceLevelVolume {
	if m != nil {
		return m.PriceVolumes
	}
	return nil
}

type VolumeAtPrice_PriceLevelVolume struct {
	Price                int64    `protobuf:"zigzag64,1,opt,name=price,proto3" json:"price,omitempty"`
	Volume               int64    `protobuf:"zigzag64,2,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeAtPrice_PriceLevelVolume) Reset()         { *m = VolumeAtPrice_PriceLevelVolume{} }
func (m *VolumeAtPrice_PriceLevelVolume) String() string { return proto.CompactTextString(m) }
func (*VolumeAtPrice_PriceLevelVolume) ProtoMessage()    {}
func (*VolumeAtPrice_PriceLevelVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{51, 0}
}

func (m *VolumeAtPrice_PriceLevelVolume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeAtPrice_PriceLevelVolume.Unmarshal(m, b)
}
func (m *VolumeAtPrice_PriceLevelVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeAtPrice_PriceLevelVolume.Marshal(b, m, deterministic)
}
func (m *VolumeAtPrice_PriceLevelVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeAtPrice_PriceLevelVolume.Merge(m, src)
}
func (m *VolumeAtPrice_PriceLevelVolume) XXX_Size() int {
	return xxx_messageInfo_VolumeAtPrice_PriceLevelVolume.Size(m)
}
func (m *VolumeAtPrice_PriceLevelVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeAtPrice_PriceLevelVolume.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeAtPrice_PriceLevelVolume proto.InternalMessageInfo

func (m *VolumeAtPrice_PriceLevelVolume) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *VolumeAtPrice_PriceLevelVolume) GetVolume() int64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

/// Open,High,Low,Close
type Ohlc struct {
	MarketId int64  `protobuf:"zigzag64,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	Symbol   string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	/// Most recent opening price
	Open *Open `protobuf:"bytes,3,opt,name=open,proto3" json:"open,omitempty"`
	/// High price for the trading session
	High *High `protobuf:"bytes,4,opt,name=high,proto3" json:"high,omitempty"`
	/// Low price for the trading session
	Low *Low `protobuf:"bytes,5,opt,name=low,proto3" json:"low,omitempty"`
	/// Most recent closing price
	Close                *Close   `protobuf:"bytes,6,opt,name=close,proto3" json:"close,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ohlc) Reset()         { *m = Ohlc{} }
func (m *Ohlc) String() string { return proto.CompactTextString(m) }
func (*Ohlc) ProtoMessage()    {}
func (*Ohlc) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a5328316508331, []int{52}
}

func (m *Ohlc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ohlc.Unmarshal(m, b)
}
func (m *Ohlc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ohlc.Marshal(b, m, deterministic)
}
func (m *Ohlc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ohlc.Merge(m, src)
}
func (m *Ohlc) XXX_Size() int {
	return xxx_messageInfo_Ohlc.Size(m)
}
func (m *Ohlc) XXX_DiscardUnknown() {
	xxx_messageInfo_Ohlc.DiscardUnknown(m)
}

var xxx_messageInfo_Ohlc proto.InternalMessageInfo

func (m *Ohlc) GetMarketId() int64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *Ohlc) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Ohlc) GetOpen() *Open {
	if m != nil {
		return m.Open
	}
	return nil
}

func (m *Ohlc) GetHigh() *High {
	if m != nil {
		return m.High
	}
	return nil
}

func (m *Ohlc) GetLow() *Low {
	if m != nil {
		return m.Low
	}
	return nil
}

func (m *Ohlc) GetClose() *Close {
	if m != nil {
		return m.Close
	}
	return nil
}

func init() {
	proto.RegisterEnum("org.openfeed.BookSide", BookSide_name, BookSide_value)
	proto.RegisterEnum("org.openfeed.InstrumentTradingStatus", InstrumentTradingStatus_name, InstrumentTradingStatus_value)
	proto.RegisterEnum("org.openfeed.RegulationSHOShortSalePriceTest", RegulationSHOShortSalePriceTest_name, RegulationSHOShortSalePriceTest_value)
	proto.RegisterEnum("org.openfeed.SettlementTerms", SettlementTerms_name, SettlementTerms_value)
	proto.RegisterEnum("org.openfeed.CrossType", CrossType_name, CrossType_value)
	proto.RegisterEnum("org.openfeed.OpenCloseSettlementFlag", OpenCloseSettlementFlag_name, OpenCloseSettlementFlag_value)
	proto.RegisterEnum("org.openfeed.SettlementSource", SettlementSource_name, SettlementSource_value)
	proto.RegisterEnum("org.openfeed.Service", Service_name, Service_value)
	proto.RegisterEnum("org.openfeed.MarketWideStatus", MarketWideStatus_name, MarketWideStatus_value)
	proto.RegisterEnum("org.openfeed.SnapshotRequestResult", SnapshotRequestResult_name, SnapshotRequestResult_value)
	proto.RegisterEnum("org.openfeed.AdminMessage_Status", AdminMessage_Status_name, AdminMessage_Status_value)
	proto.RegisterEnum("org.openfeed.MarketSummary_ClearSet", MarketSummary_ClearSet_name, MarketSummary_ClearSet_value)
	proto.RegisterEnum("org.openfeed.MarketSummary_SummaryType", MarketSummary_SummaryType_name, MarketSummary_SummaryType_value)
	proto.RegisterEnum("org.openfeed.SnapshotRequest_SnapshotRequestType", SnapshotRequest_SnapshotRequestType_name, SnapshotRequest_SnapshotRequestType_value)
	proto.RegisterType((*OpenfeedMessage)(nil), "org.openfeed.OpenfeedMessage")
	proto.RegisterType((*ChannelReset)(nil), "org.openfeed.ChannelReset")
	proto.RegisterType((*HeartBeat)(nil), "org.openfeed.HeartBeat")
	proto.RegisterType((*AdminMessage)(nil), "org.openfeed.AdminMessage")
	proto.RegisterType((*InstrumentGroupStatus)(nil), "org.openfeed.InstrumentGroupStatus")
	proto.RegisterType((*MarketStatus)(nil), "org.openfeed.MarketStatus")
	proto.RegisterType((*MarketSession)(nil), "org.openfeed.MarketSession")
	proto.RegisterType((*MarketSnapshot)(nil), "org.openfeed.MarketSnapshot")
	proto.RegisterType((*MarketSnapshotResponse)(nil), "org.openfeed.MarketSnapshotResponse")
	proto.RegisterType((*MarketUpdate)(nil), "org.openfeed.MarketUpdate")
	proto.RegisterType((*DepthPriceLevel)(nil), "org.openfeed.DepthPriceLevel")
	proto.RegisterType((*DepthPriceLevel_Entry)(nil), "org.openfeed.DepthPriceLevel.Entry")
	proto.RegisterType((*DepthOrder)(nil), "org.openfeed.DepthOrder")
	proto.RegisterType((*DepthOrder_Entry)(nil), "org.openfeed.DepthOrder.Entry")
	proto.RegisterType((*News)(nil), "org.openfeed.News")
	proto.RegisterType((*ClearBook)(nil), "org.openfeed.ClearBook")
	proto.RegisterType((*InstrumentStatus)(nil), "org.openfeed.InstrumentStatus")
	proto.RegisterType((*BestBidOffer)(nil), "org.openfeed.BestBidOffer")
	proto.RegisterType((*AddPriceLevel)(nil), "org.openfeed.AddPriceLevel")
	proto.RegisterType((*DeletePriceLevel)(nil), "org.openfeed.DeletePriceLevel")
	proto.RegisterType((*ModifyPriceLevel)(nil), "org.openfeed.ModifyPriceLevel")
	proto.RegisterType((*AddOrder)(nil), "org.openfeed.AddOrder")
	proto.RegisterType((*DeleteOrder)(nil), "org.openfeed.DeleteOrder")
	proto.RegisterType((*ModifyOrder)(nil), "org.openfeed.ModifyOrder")
	proto.RegisterType((*IndexValue)(nil), "org.openfeed.IndexValue")
	proto.RegisterType((*Trades)(nil), "org.openfeed.Trades")
	proto.RegisterType((*Trades_Entry)(nil), "org.openfeed.Trades.Entry")
	proto.RegisterType((*Trade)(nil), "org.openfeed.Trade")
	proto.RegisterType((*TradeCorrection)(nil), "org.openfeed.TradeCorrection")
	proto.RegisterType((*TradeCancel)(nil), "org.openfeed.TradeCancel")
	proto.RegisterType((*Open)(nil), "org.openfeed.Open")
	proto.RegisterType((*High)(nil), "org.openfeed.High")
	proto.RegisterType((*Low)(nil), "org.openfeed.Low")
	proto.RegisterType((*Close)(nil), "org.openfeed.Close")
	proto.RegisterType((*PrevClose)(nil), "org.openfeed.PrevClose")
	proto.RegisterType((*Last)(nil), "org.openfeed.Last")
	proto.RegisterType((*YearHigh)(nil), "org.openfeed.YearHigh")
	proto.RegisterType((*YearLow)(nil), "org.openfeed.YearLow")
	proto.RegisterType((*Volume)(nil), "org.openfeed.Volume")
	proto.RegisterType((*NumberOfTrades)(nil), "org.openfeed.NumberOfTrades")
	proto.RegisterType((*MonetaryValue)(nil), "org.openfeed.MonetaryValue")
	proto.RegisterType((*Settlement)(nil), "org.openfeed.Settlement")
	proto.RegisterType((*OpenInterest)(nil), "org.openfeed.OpenInterest")
	proto.RegisterType((*Vwap)(nil), "org.openfeed.Vwap")
	proto.RegisterType((*DividendsIncomeDistributions)(nil), "org.openfeed.DividendsIncomeDistributions")
	proto.RegisterType((*CapitalDistributions)(nil), "org.openfeed.CapitalDistributions")
	proto.RegisterType((*SharesOutstanding)(nil), "org.openfeed.SharesOutstanding")
	proto.RegisterType((*NetAssetValue)(nil), "org.openfeed.NetAssetValue")
	proto.RegisterType((*MarketSummary)(nil), "org.openfeed.MarketSummary")
	proto.RegisterType((*Context)(nil), "org.openfeed.Context")
	proto.RegisterType((*ContextData)(nil), "org.openfeed.ContextData")
	proto.RegisterType((*TracePoint)(nil), "org.openfeed.TracePoint")
	proto.RegisterType((*TCPHistoricalReplayRequest)(nil), "org.openfeed.TCPHistoricalReplayRequest")
	proto.RegisterType((*SnapshotRequest)(nil), "org.openfeed.SnapshotRequest")
	proto.RegisterType((*VolumeAtPrice)(nil), "org.openfeed.VolumeAtPrice")
	proto.RegisterType((*VolumeAtPrice_PriceLevelVolume)(nil), "org.openfeed.VolumeAtPrice.PriceLevelVolume")
	proto.RegisterType((*Ohlc)(nil), "org.openfeed.Ohlc")
}

func init() { proto.RegisterFile("openfeed.proto", fileDescriptor_22a5328316508331) }

var fileDescriptor_22a5328316508331 = []byte{
	// 5334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7c, 0xcb, 0x6f, 0x23, 0x57,
	0x76, 0x37, 0xdf, 0x22, 0x0f, 0x29, 0xaa, 0x74, 0xf5, 0xe8, 0x6a, 0xb9, 0xdd, 0xad, 0x61, 0xdb,
	0x3d, 0x1a, 0xb9, 0xad, 0xb1, 0xdb, 0xaf, 0xf9, 0xfc, 0x65, 0x02, 0x53, 0x64, 0xa9, 0xc9, 0x69,
	0x8a, 0xa5, 0xbe, 0xa4, 0x64, 0x77, 0xb2, 0x20, 0x4a, 0xac, 0xdb, 0x52, 0xa1, 0xc9, 0x2a, 0xba,
	0xaa, 0xa8, 0x6e, 0x01, 0x99, 0x4c, 0x82, 0x60, 0x36, 0x0e, 0x02, 0x24, 0x40, 0x32, 0x9b, 0x20,
	0x41, 0x96, 0xf9, 0x07, 0xe2, 0x45, 0x80, 0x2c, 0x32, 0x03, 0x64, 0x95, 0x75, 0x16, 0xd9, 0xcd,
	0x26, 0x40, 0x76, 0x83, 0x20, 0x40, 0x90, 0xac, 0x82, 0xfb, 0xa8, 0x27, 0x8b, 0x7a, 0xd8, 0xdd,
	0x76, 0x90, 0xcc, 0x8e, 0xf7, 0xdc, 0xdf, 0xb9, 0x8f, 0x53, 0xe7, 0xdc, 0xfb, 0xbb, 0x2f, 0x42,
	0xd5, 0x9a, 0x10, 0xf3, 0x29, 0x21, 0xfa, 0xce, 0xc4, 0xb6, 0x5c, 0x0b, 0x55, 0x2c, 0xfb, 0x64,
	0xc7, 0x93, 0x6d, 0xdc, 0xf4, 0x7e, 0x0d, 0x0c, 0xd3, 0x71, 0xed, 0xe9, 0x98, 0x98, 0x2e, 0x07,
	0xd6, 0x7e, 0x95, 0x87, 0x25, 0x55, 0xe4, 0xee, 0x13, 0xc7, 0xd1, 0x4e, 0x08, 0xda, 0x84, 0xb2,
	0x43, 0x4c, 0xdd, 0x30, 0x4f, 0xfa, 0xc6, 0x98, 0xc8, 0xe9, 0xcd, 0xf4, 0x16, 0xc2, 0x61, 0x11,
	0xba, 0x0d, 0xe0, 0x5a, 0xae, 0x36, 0x6a, 0x58, 0x53, 0xd3, 0x95, 0x33, 0x9b, 0xe9, 0xad, 0x65,
	0x1c, 0x92, 0xa0, 0x1a, 0x54, 0x9c, 0x73, 0x73, 0xd8, 0x23, 0x9f, 0x4f, 0x89, 0x39, 0x24, 0x72,
	0x76, 0x33, 0xbd, 0x95, 0xc5, 0x11, 0x19, 0xfa, 0x3e, 0x2c, 0x0c, 0x2d, 0xd3, 0x25, 0x2f, 0x5c,
	0x39, 0xb7, 0x99, 0xde, 0x2a, 0x3f, 0x58, 0xdb, 0x09, 0x37, 0x7a, 0xa7, 0xc1, 0x33, 0xb1, 0x87,
	0x42, 0x9f, 0x40, 0x65, 0x78, 0xaa, 0x99, 0x26, 0x19, 0x61, 0xe2, 0x10, 0x57, 0x06, 0xa6, 0xb5,
	0x11, 0xd3, 0x0a, 0x21, 0x5a, 0x29, 0x1c, 0xd1, 0x40, 0x1f, 0x41, 0xe9, 0x94, 0x68, 0xb6, 0xbb,
	0x4b, 0x34, 0x57, 0x2e, 0x33, 0xf5, 0x1b, 0x51, 0xf5, 0x96, 0x97, 0xdd, 0x4a, 0xe1, 0x00, 0x4b,
	0xab, 0xd6, 0xf4, 0xb1, 0x61, 0x0a, 0x0b, 0xc9, 0x95, 0xa4, 0xaa, 0xeb, 0x21, 0x04, 0xad, 0x3a,
	0xac, 0x81, 0x3e, 0x83, 0xd5, 0xc0, 0xf6, 0x4d, 0xf2, 0xd4, 0x30, 0x0d, 0xd7, 0xb0, 0x4c, 0x79,
	0x91, 0x95, 0x54, 0x8b, 0x96, 0xd4, 0x4e, 0x40, 0xb6, 0x52, 0x38, 0xb1, 0x04, 0xf4, 0xdb, 0xb0,
	0x16, 0xc8, 0x1f, 0xda, 0xd6, 0x74, 0xd2, 0x73, 0x35, 0x77, 0xea, 0xc8, 0x55, 0x56, 0xf4, 0xdd,
	0x79, 0x45, 0x87, 0xa0, 0xad, 0x14, 0x4e, 0x2e, 0x03, 0xed, 0x41, 0x75, 0xac, 0xd9, 0xcf, 0x88,
	0xdb, 0x33, 0xb5, 0x89, 0x73, 0x6a, 0xb9, 0xf2, 0x12, 0x2b, 0xf5, 0x56, 0xb4, 0xd4, 0xfd, 0x08,
	0xa6, 0x95, 0xc2, 0x31, 0x2d, 0x6a, 0x40, 0x2e, 0x39, 0x9c, 0xe8, 0x9a, 0x4b, 0x64, 0x29, 0xc9,
	0x80, 0xfb, 0x21, 0x04, 0x35, 0x60, 0x58, 0x23, 0x28, 0x41, 0xf4, 0x6e, 0x79, 0x7e, 0x09, 0x7e,
	0xa7, 0x22, 0x1a, 0xbb, 0x05, 0xc8, 0xe9, 0x9a, 0xab, 0xd5, 0x30, 0x54, 0xc2, 0x5e, 0x82, 0x64,
	0x58, 0x10, 0x5e, 0xc2, 0x5c, 0x7d, 0x19, 0x7b, 0x49, 0xb4, 0x05, 0x4b, 0xae, 0xad, 0x99, 0x8e,
	0x36, 0xa4, 0x96, 0x66, 0xc1, 0x90, 0x61, 0xc1, 0x10, 0x17, 0xd7, 0xfe, 0x20, 0x0d, 0x25, 0xdf,
	0x77, 0x92, 0xf4, 0xd2, 0x89, 0x7a, 0x68, 0x1d, 0x0a, 0x0e, 0xef, 0x0f, 0x2d, 0xb8, 0x84, 0x45,
	0x0a, 0x6d, 0x40, 0x91, 0xbc, 0xa0, 0xcd, 0x38, 0xe1, 0xc1, 0x53, 0xc4, 0x7e, 0x3a, 0xdc, 0xde,
	0x5c, 0xa4, 0xbd, 0xb5, 0x3f, 0xcc, 0x40, 0x25, 0xec, 0x85, 0xb4, 0x21, 0x96, 0x6d, 0x9c, 0x18,
	0xa6, 0x16, 0x6f, 0x48, 0x4c, 0xcc, 0x1a, 0x62, 0x4d, 0xed, 0x21, 0xf1, 0x1b, 0xc2, 0x52, 0x34,
	0x92, 0x47, 0x9a, 0x79, 0x32, 0xd5, 0x4e, 0x48, 0xc3, 0xd2, 0x79, 0x63, 0x4a, 0x38, 0x22, 0xa3,
	0x8d, 0x3d, 0x25, 0x9a, 0xde, 0x31, 0x4c, 0xc2, 0x5a, 0x54, 0xc2, 0x7e, 0x1a, 0x21, 0xc8, 0xb1,
	0x10, 0xcf, 0x33, 0x39, 0xfb, 0x8d, 0xfe, 0x9f, 0xdf, 0xe9, 0xc2, 0x66, 0x7a, 0xab, 0xfa, 0xe0,
	0x3b, 0xf3, 0xe3, 0x68, 0x87, 0x7f, 0x3b, 0xdf, 0x2e, 0xa1, 0xbe, 0x2f, 0x44, 0xfb, 0x2e, 0x41,
	0x41, 0xf8, 0x6c, 0x01, 0x32, 0xea, 0x23, 0x29, 0x55, 0xfb, 0xf7, 0x34, 0xac, 0x25, 0xba, 0xfb,
	0x35, 0xbe, 0xcf, 0x7d, 0x58, 0x8e, 0x05, 0x46, 0x5b, 0x17, 0x16, 0x9a, 0xcd, 0x40, 0x8f, 0x60,
	0xd1, 0xb5, 0x35, 0x3a, 0x4a, 0x0a, 0x27, 0xcd, 0xb2, 0xfe, 0xbd, 0x39, 0x2f, 0x04, 0xfb, 0x61,
	0x30, 0x8e, 0xea, 0xa2, 0x5b, 0x50, 0xa2, 0x02, 0xd2, 0xa4, 0xf1, 0xc2, 0x3f, 0x74, 0x20, 0x08,
	0x1b, 0x22, 0x1f, 0x35, 0xc4, 0x5f, 0xa6, 0xa1, 0x12, 0x8e, 0x83, 0x6b, 0xf4, 0x36, 0x54, 0x68,
	0x26, 0x1a, 0x09, 0x3f, 0x02, 0x89, 0xc7, 0xd2, 0xa7, 0x86, 0x4e, 0x22, 0x9d, 0xbb, 0x9d, 0x14,
	0x81, 0x01, 0x0a, 0xcf, 0xe8, 0xd5, 0xfe, 0x2e, 0x07, 0x8b, 0xa2, 0x81, 0xc4, 0x71, 0xe8, 0x10,
	0x76, 0x71, 0x57, 0xef, 0x41, 0x8e, 0x16, 0x2f, 0xdf, 0x66, 0x11, 0x8f, 0xa2, 0xf5, 0xd1, 0xb9,
	0x0b, 0xb3, 0x7c, 0x8a, 0x3b, 0x35, 0x4e, 0x4e, 0xe5, 0x3b, 0x49, 0xb8, 0x96, 0x71, 0x72, 0x8a,
	0x59, 0x3e, 0xba, 0x0b, 0xd9, 0x91, 0xf5, 0x5c, 0xde, 0x64, 0xb0, 0xe5, 0x28, 0xac, 0x63, 0x3d,
	0xc7, 0x34, 0x97, 0x16, 0x36, 0xd2, 0x1c, 0x57, 0xbe, 0x9b, 0x54, 0x58, 0x47, 0x73, 0x5c, 0xcc,
	0xf2, 0xd1, 0x7d, 0x28, 0x9c, 0x59, 0xa3, 0xe9, 0x98, 0xc8, 0xf7, 0x18, 0x72, 0x35, 0x8a, 0x3c,
	0x62, 0x79, 0x58, 0x60, 0xd0, 0x0f, 0x00, 0x1c, 0xe2, 0xba, 0x23, 0x42, 0xbf, 0xbe, 0xfc, 0x5d,
	0xa6, 0x21, 0x47, 0x35, 0x7a, 0x7e, 0x3e, 0x0e, 0x61, 0xd1, 0x27, 0x50, 0x9d, 0xd8, 0xe4, 0x2c,
	0xc8, 0x95, 0xef, 0x5f, 0xa2, 0x1d, 0xc3, 0xa3, 0xdf, 0x84, 0x0a, 0x85, 0xb5, 0x4d, 0x97, 0xd8,
	0xc4, 0x71, 0xe5, 0xad, 0xa4, 0x01, 0x54, 0x0d, 0x21, 0x70, 0x04, 0x8f, 0x9a, 0x50, 0x35, 0xa7,
	0xe3, 0x63, 0x62, 0xab, 0x4f, 0xa9, 0xdf, 0x12, 0x47, 0xfe, 0x5e, 0xd2, 0x54, 0xd0, 0x8d, 0x60,
	0x70, 0x4c, 0x07, 0xd5, 0x61, 0x71, 0x6c, 0x99, 0xc4, 0xd5, 0xec, 0xf3, 0x23, 0x6d, 0x34, 0x25,
	0xf2, 0x36, 0x2b, 0xe4, 0xb5, 0x98, 0x17, 0x85, 0x21, 0x38, 0xaa, 0x51, 0xfb, 0xb7, 0x2a, 0x54,
	0xa3, 0x13, 0x0e, 0x1d, 0x81, 0xb8, 0x9b, 0xb5, 0x75, 0xe1, 0xdb, 0x7e, 0xfa, 0xea, 0x83, 0x38,
	0xba, 0xe7, 0x4f, 0x76, 0x51, 0xde, 0x12, 0x93, 0x5e, 0xe2, 0xae, 0x9b, 0x50, 0xe6, 0x4c, 0xe8,
	0x74, 0x6a, 0x3e, 0x73, 0x44, 0x74, 0x86, 0x45, 0x74, 0x4c, 0x1d, 0x4e, 0x6d, 0x9b, 0x98, 0x2e,
	0x13, 0xb0, 0x51, 0x70, 0x19, 0x47, 0x64, 0x6c, 0x3c, 0x3e, 0x1f, 0x1f, 0x5b, 0x7c, 0x9c, 0xa3,
	0xe3, 0x31, 0x4b, 0xa1, 0x6d, 0x90, 0x26, 0xb6, 0x31, 0x24, 0x4d, 0x62, 0x5a, 0x63, 0x3a, 0x80,
	0x5b, 0xb6, 0x5c, 0x64, 0xfa, 0x33, 0x72, 0xca, 0xb0, 0x1c, 0x62, 0x9f, 0x19, 0x43, 0x22, 0x97,
	0x58, 0xac, 0xae, 0xc5, 0x9d, 0x85, 0x65, 0x62, 0x0f, 0x45, 0xa3, 0x3c, 0x18, 0xd4, 0x44, 0x94,
	0x73, 0x96, 0x75, 0x7b, 0xde, 0x10, 0xe6, 0x45, 0x79, 0x5c, 0x0f, 0xdd, 0x87, 0xec, 0xf1, 0xb1,
	0x25, 0x58, 0x56, 0xcc, 0xcb, 0x76, 0x89, 0xe3, 0xee, 0x1a, 0xba, 0xfa, 0xf4, 0x29, 0xb1, 0x31,
	0x85, 0xa1, 0x1d, 0xc8, 0x1b, 0xa6, 0x4e, 0x5e, 0x08, 0x66, 0x25, 0xc7, 0xab, 0xd3, 0xc9, 0x0b,
	0xee, 0x0b, 0x1c, 0x86, 0x7e, 0x08, 0x65, 0xd6, 0xdd, 0x0e, 0x39, 0x23, 0x23, 0x47, 0x5e, 0xdc,
	0xcc, 0xce, 0x3a, 0x51, 0x5d, 0xd7, 0x0f, 0x7c, 0x0c, 0x0e, 0xe3, 0xd1, 0x0e, 0x14, 0x2c, 0x5b,
	0x27, 0x36, 0x25, 0x49, 0x54, 0x73, 0x7d, 0x46, 0x53, 0xa5, 0xd9, 0x58, 0xa0, 0xe8, 0x68, 0x60,
	0x92, 0xe7, 0x8e, 0x20, 0x3f, 0xb1, 0xd1, 0xa0, 0x4b, 0x9e, 0x3b, 0x98, 0xe5, 0x7f, 0x3b, 0x43,
	0xd5, 0xf7, 0x20, 0x3f, 0x1c, 0x59, 0x0e, 0x91, 0xbf, 0xc3, 0x60, 0x2b, 0x31, 0x42, 0x4c, 0xb3,
	0x30, 0x47, 0xa0, 0x0f, 0xa0, 0x44, 0x47, 0x05, 0x26, 0x93, 0x6b, 0x49, 0x04, 0xf8, 0xc0, 0xcb,
	0xc6, 0x01, 0xf2, 0xca, 0x83, 0xe1, 0x03, 0x28, 0x9e, 0x13, 0xcd, 0xa6, 0x1d, 0x90, 0xdf, 0x60,
	0xd8, 0x98, 0x61, 0x9f, 0x88, 0x5c, 0xec, 0xe3, 0xa8, 0x93, 0xd2, 0xdf, 0x1d, 0xeb, 0xb9, 0xfc,
	0x66, 0xd2, 0x32, 0xe0, 0x09, 0xcf, 0xc4, 0x1e, 0xea, 0x1b, 0x1b, 0x71, 0xbf, 0xee, 0x78, 0x79,
	0x0f, 0x72, 0x67, 0xcf, 0xb5, 0x89, 0x18, 0x25, 0x63, 0x46, 0x3b, 0x7a, 0xae, 0x4d, 0x30, 0xcb,
	0x47, 0x26, 0xdc, 0xd2, 0x8d, 0x33, 0x43, 0x27, 0xa6, 0xee, 0xb4, 0xcd, 0xa1, 0x35, 0x26, 0x4d,
	0xc3, 0x71, 0x6d, 0xe3, 0x78, 0x4a, 0x07, 0x26, 0x47, 0x0c, 0x90, 0xdb, 0x51, 0xfd, 0xe6, 0x05,
	0x1a, 0xf8, 0xc2, 0xf2, 0x12, 0xc6, 0xf1, 0xb7, 0x5e, 0xc6, 0x38, 0x7e, 0xff, 0xba, 0xe3, 0x38,
	0x3a, 0x82, 0xd5, 0xa1, 0x36, 0x31, 0x5c, 0x6d, 0x14, 0xed, 0xf0, 0xdb, 0x49, 0x4b, 0xa2, 0x46,
	0x02, 0x12, 0x27, 0xea, 0xa3, 0x7d, 0x58, 0x76, 0x4e, 0x35, 0x9b, 0x38, 0xea, 0xd4, 0x75, 0x5c,
	0x8d, 0xad, 0x5a, 0xe5, 0x1d, 0x56, 0xe8, 0x9d, 0xd8, 0x97, 0x8f, 0xc3, 0xf0, 0xac, 0x26, 0xed,
	0xa9, 0x49, 0xdc, 0xba, 0xe3, 0x10, 0x97, 0xf7, 0xf4, 0xfb, 0x49, 0x3d, 0xed, 0x86, 0x21, 0x38,
	0xaa, 0x81, 0x14, 0x58, 0xa2, 0xc1, 0x64, 0x58, 0x53, 0x47, 0x50, 0x1e, 0xf9, 0x9d, 0x44, 0x73,
	0x85, 0x59, 0x11, 0x8e, 0xeb, 0xa0, 0x8f, 0xa0, 0xe8, 0x65, 0xca, 0xef, 0x5e, 0xae, 0xef, 0x83,
	0x69, 0x17, 0x78, 0x38, 0xd4, 0x5d, 0x36, 0x22, 0xca, 0x0f, 0x92, 0xb4, 0x8f, 0xc2, 0x10, 0x1c,
	0xd5, 0xa8, 0xfd, 0x4d, 0x1a, 0xd6, 0xa3, 0x93, 0x2e, 0x26, 0xce, 0xc4, 0x32, 0x1d, 0x82, 0xfe,
	0x3f, 0x14, 0x6c, 0xe2, 0x4c, 0x47, 0x2e, 0x9b, 0x7a, 0xab, 0xf1, 0x15, 0x67, 0x80, 0xff, 0x7c,
	0x4a, 0xa3, 0x84, 0x41, 0xb1, 0x50, 0xa1, 0x94, 0x73, 0x2c, 0x16, 0xd5, 0x9c, 0x56, 0x7b, 0x49,
	0xea, 0xa7, 0xb1, 0xa5, 0x67, 0xf6, 0xf2, 0xa5, 0x67, 0x7c, 0xe1, 0x59, 0xfb, 0xd9, 0xb2, 0xc7,
	0x86, 0xc5, 0x3a, 0xf2, 0x22, 0xaa, 0x10, 0x4c, 0xba, 0x99, 0xc8, 0xa4, 0x9b, 0x40, 0x21, 0xb2,
	0xc9, 0x14, 0x62, 0x1b, 0x24, 0x3d, 0xe4, 0x8c, 0x0c, 0x9a, 0x63, 0xd0, 0x19, 0x79, 0x02, 0xdd,
	0xc8, 0x33, 0x64, 0x9c, 0x6e, 0xdc, 0x83, 0x2a, 0x5f, 0x8c, 0xf9, 0xb8, 0x02, 0xc7, 0x45, 0xa5,
	0x94, 0x56, 0x78, 0xab, 0x3a, 0xcb, 0x6e, 0xeb, 0x8c, 0x38, 0x54, 0x70, 0x44, 0xc6, 0xa8, 0x87,
	0x65, 0x3a, 0xd6, 0xc8, 0xa0, 0xc6, 0xd0, 0x19, 0x75, 0x28, 0xe2, 0x88, 0x2c, 0x91, 0x62, 0x94,
	0xe6, 0x53, 0x0c, 0x6f, 0x13, 0x07, 0xae, 0xb4, 0x89, 0xf3, 0x01, 0xe5, 0x24, 0xdc, 0x85, 0xcb,
	0x97, 0xbb, 0xb0, 0x87, 0x8d, 0xb8, 0x7e, 0xe5, 0x3a, 0xae, 0x9f, 0x10, 0x7a, 0x8b, 0x5f, 0x21,
	0xf4, 0xb6, 0x04, 0x01, 0x58, 0x9d, 0x47, 0x00, 0x5a, 0x29, 0x41, 0x01, 0x3e, 0x82, 0xd2, 0x70,
	0x44, 0x34, 0x7b, 0xd7, 0xb2, 0x9e, 0xc9, 0x6b, 0x49, 0x53, 0x6c, 0xc3, 0xcb, 0x6e, 0xa5, 0x70,
	0x80, 0x45, 0x9d, 0x04, 0xf2, 0xb5, 0x7e, 0x15, 0xf2, 0xd5, 0x4a, 0x25, 0xd0, 0xaf, 0x1d, 0x4e,
	0xbf, 0x6e, 0x5c, 0x46, 0xbf, 0x5a, 0x29, 0x4e, 0xc0, 0xda, 0xb0, 0xa4, 0x93, 0x89, 0x7b, 0x1a,
	0x30, 0x26, 0x59, 0x66, 0xba, 0xaf, 0xc7, 0x26, 0x9e, 0x28, 0xa8, 0x95, 0xc2, 0x71, 0x3d, 0xf4,
	0x31, 0x00, 0x13, 0x31, 0x0a, 0x25, 0xdf, 0x4c, 0x9a, 0x72, 0x9b, 0x7e, 0x7e, 0x2b, 0x85, 0x43,
	0x68, 0xf4, 0x8e, 0xc7, 0x03, 0x37, 0x2e, 0xe6, 0x81, 0xad, 0x94, 0xc7, 0x04, 0x77, 0xa0, 0xe0,
	0xf2, 0x69, 0xec, 0xb5, 0x24, 0x3a, 0xc0, 0xa7, 0xab, 0x56, 0x0a, 0x0b, 0x14, 0xfd, 0x92, 0x8c,
	0xa2, 0xdd, 0x9a, 0x47, 0xd1, 0xe8, 0x97, 0x64, 0x24, 0x6d, 0x4b, 0x90, 0xb4, 0xd7, 0xe7, 0x91,
	0x34, 0x8a, 0x64, 0x34, 0xed, 0x4d, 0x4e, 0xd3, 0x6e, 0xcf, 0xa1, 0x69, 0xd4, 0xc6, 0x94, 0xa8,
	0xbd, 0xe5, 0x11, 0xb5, 0x3b, 0x73, 0x89, 0x1a, 0xed, 0x17, 0xa7, 0x6a, 0x1f, 0x85, 0xa9, 0xda,
	0xe6, 0x85, 0x54, 0x8d, 0xfa, 0x51, 0x40, 0xd6, 0xb6, 0x04, 0x59, 0xfb, 0xce, 0x3c, 0xb2, 0x46,
	0x9b, 0xcd, 0xe8, 0xda, 0xfb, 0x21, 0xba, 0x56, 0xbb, 0x88, 0xae, 0xb5, 0x52, 0x21, 0xc2, 0xf6,
	0x6e, 0x40, 0xd8, 0xee, 0x5e, 0x40, 0xd8, 0x5a, 0xa9, 0x80, 0xb2, 0xed, 0xf8, 0x94, 0xed, 0x8d,
	0xf9, 0x94, 0x8d, 0x7e, 0x23, 0x41, 0xda, 0x3e, 0x8e, 0x90, 0xb6, 0x37, 0x2f, 0x26, 0x6d, 0xd4,
	0x83, 0x22, 0x0b, 0xe5, 0x28, 0x6d, 0xbb, 0x77, 0x19, 0x6d, 0x6b, 0xa5, 0x62, 0xc4, 0x6d, 0x4b,
	0x10, 0xb7, 0xef, 0xce, 0x23, 0x6e, 0xd4, 0x80, 0x8c, 0xba, 0x4d, 0x2e, 0xa1, 0x6e, 0x5b, 0xd7,
	0xa5, 0x6e, 0xad, 0xd4, 0x25, 0xe4, 0x6d, 0xef, 0xab, 0x2c, 0xc2, 0x5b, 0xa9, 0x19, 0xfa, 0xd6,
	0xb8, 0xfe, 0x32, 0xbc, 0x95, 0x8a, 0x13, 0xb8, 0xcf, 0xe6, 0x10, 0xb8, 0xb7, 0xae, 0x4a, 0xe0,
	0x5a, 0xa9, 0x39, 0x14, 0x4e, 0x4d, 0xa2, 0x70, 0xf7, 0xaf, 0x44, 0xe1, 0x5a, 0xa9, 0x24, 0x12,
	0xd7, 0x88, 0x93, 0xb8, 0xb7, 0x2f, 0x25, 0x71, 0xb4, 0xbf, 0x51, 0x1a, 0x47, 0x8d, 0xc6, 0xa7,
	0x89, 0xe9, 0x78, 0xac, 0xd9, 0xe7, 0x82, 0x54, 0x26, 0xcf, 0x24, 0x1c, 0xc2, 0x8c, 0x16, 0x16,
	0xf8, 0xbb, 0xd0, 0x7f, 0x9f, 0x81, 0xa5, 0xd8, 0x60, 0x4a, 0x99, 0xd4, 0x88, 0x2f, 0x68, 0xd3,
	0x6c, 0x59, 0x7a, 0xf7, 0xc2, 0xb1, 0x77, 0x47, 0x31, 0x5d, 0xfb, 0x1c, 0x0b, 0x95, 0x8d, 0x5f,
	0xa5, 0x21, 0xcf, 0x24, 0xb4, 0x9d, 0x5a, 0x78, 0xed, 0xcb, 0x78, 0xce, 0xc5, 0xcb, 0x63, 0xda,
	0xce, 0x88, 0x0e, 0x9d, 0x8e, 0x74, 0x32, 0x22, 0x2e, 0x09, 0x95, 0x93, 0x49, 0x9a, 0x8e, 0x9a,
	0x31, 0x14, 0x9d, 0x8e, 0xe2, 0x9a, 0xb4, 0xb4, 0xb1, 0xa5, 0x1b, 0x4f, 0xcf, 0x43, 0xa5, 0x65,
	0x93, 0x4a, 0xdb, 0x8f, 0xa1, 0x68, 0x69, 0x71, 0x4d, 0xdf, 0x86, 0x5f, 0x64, 0x00, 0x82, 0xa9,
	0x04, 0x7d, 0xe8, 0xaf, 0xea, 0xb9, 0xf9, 0x6e, 0xcf, 0x9b, 0x74, 0x3c, 0xcb, 0x71, 0xf4, 0xc6,
	0x2f, 0x7c, 0xcb, 0xbd, 0x0f, 0x45, 0x4d, 0xac, 0xfd, 0x85, 0xd1, 0xe6, 0xec, 0x0c, 0xd0, 0x11,
	0xd1, 0x43, 0xa2, 0x1f, 0x42, 0x99, 0x77, 0x98, 0x2b, 0x72, 0x2b, 0xdd, 0x4c, 0xb2, 0x92, 0xa7,
	0x1b, 0xc6, 0x53, 0x75, 0xde, 0x43, 0xae, 0x9e, 0x4d, 0x52, 0xdf, 0x0f, 0x00, 0x54, 0x3d, 0x84,
	0xf7, 0x8d, 0xf1, 0x65, 0x1a, 0x72, 0x94, 0x89, 0xfc, 0x0f, 0xdd, 0xf4, 0x97, 0x61, 0x81, 0xb3,
	0x69, 0x47, 0x2e, 0x6c, 0x66, 0x29, 0xd1, 0x17, 0xc9, 0xda, 0x63, 0x28, 0xf9, 0x94, 0x88, 0x16,
	0x6b, 0x13, 0x87, 0xd8, 0x67, 0x44, 0x17, 0xa7, 0x31, 0x7e, 0xfa, 0x1a, 0xc7, 0x31, 0xff, 0x94,
	0x01, 0x29, 0x4e, 0x93, 0x92, 0xd4, 0x4b, 0xc9, 0x2c, 0x7e, 0x66, 0x1f, 0x1f, 0xbe, 0xc6, 0x3e,
	0xfe, 0x26, 0x94, 0xa9, 0x8a, 0x77, 0x9a, 0x5a, 0xe6, 0xa7, 0xa9, 0x21, 0x11, 0x35, 0x97, 0x69,
	0xb9, 0xfc, 0x54, 0xb1, 0x84, 0xd9, 0xef, 0xe8, 0x1e, 0xe3, 0x62, 0x7c, 0x8f, 0xf1, 0x39, 0xdc,
	0xb1, 0xc9, 0xc9, 0x74, 0xc4, 0x3e, 0x65, 0xaf, 0xa5, 0xf6, 0x4e, 0x2d, 0xdb, 0xed, 0x69, 0x23,
	0x1e, 0x72, 0x7d, 0x3a, 0xef, 0x55, 0x59, 0x93, 0xdf, 0x8e, 0x36, 0x19, 0x5f, 0xac, 0x84, 0x2f,
	0x2b, 0xb5, 0xf6, 0xa7, 0x39, 0xa8, 0x84, 0xe9, 0xe3, 0x35, 0x8c, 0xba, 0x01, 0xc5, 0x63, 0x83,
	0x8f, 0x30, 0xcc, 0x9e, 0x08, 0xfb, 0x69, 0x6a, 0xa3, 0x63, 0x43, 0x7f, 0x3c, 0xd5, 0x4c, 0xd7,
	0x70, 0xcf, 0x3d, 0x1b, 0x85, 0x44, 0xe8, 0x0d, 0x58, 0x3c, 0x36, 0x78, 0xbc, 0xf1, 0x43, 0xe7,
	0x0a, 0xb3, 0x49, 0x54, 0xe8, 0xa3, 0xbc, 0x15, 0x0f, 0xb3, 0x5c, 0x05, 0x47, 0x85, 0xe8, 0x3e,
	0x2c, 0xb3, 0xa2, 0x2d, 0x97, 0x34, 0x2c, 0x53, 0xe7, 0x07, 0xb1, 0x55, 0x86, 0x9c, 0xcd, 0x40,
	0xb7, 0x01, 0x2c, 0xda, 0x55, 0xde, 0xf2, 0x55, 0xd6, 0xb4, 0x90, 0x84, 0xd6, 0xc9, 0x52, 0x7e,
	0xeb, 0xd7, 0x18, 0x24, 0x2a, 0x64, 0x41, 0x49, 0x05, 0xa1, 0x1e, 0xac, 0xb3, 0x1e, 0xc4, 0xc5,
	0x21, 0xa4, 0xdf, 0x8b, 0x1b, 0xac, 0x6d, 0x71, 0x31, 0x7a, 0x07, 0x56, 0x44, 0x25, 0x91, 0x9e,
	0xc8, 0x0c, 0x9d, 0x94, 0x45, 0x97, 0x92, 0x9f, 0x47, 0xc1, 0xb7, 0x19, 0x38, 0x26, 0x45, 0x3b,
	0x80, 0xf8, 0x30, 0xa1, 0x8d, 0x76, 0x8f, 0x2d, 0xbe, 0x72, 0xd6, 0x19, 0x6d, 0x2d, 0xe2, 0x84,
	0x9c, 0xda, 0x7f, 0xa4, 0x61, 0x31, 0x32, 0x9f, 0x5c, 0xc3, 0x2f, 0x56, 0x21, 0xcf, 0x66, 0x30,
	0xe6, 0x14, 0xcb, 0x98, 0x27, 0xd0, 0x36, 0xe4, 0x1c, 0x43, 0xe7, 0xe1, 0x52, 0x8d, 0x8f, 0xc2,
	0x74, 0xa4, 0xe8, 0x19, 0x3a, 0xc1, 0x0c, 0x43, 0x4b, 0x60, 0x0b, 0x53, 0xe6, 0x13, 0x08, 0xf3,
	0x04, 0xf5, 0xb7, 0xcf, 0xbd, 0x4f, 0xb2, 0xc8, 0xfd, 0xcd, 0x4b, 0xb3, 0x6f, 0x1a, 0x7c, 0x88,
	0x2a, 0xbf, 0xbf, 0x60, 0x45, 0xbe, 0x81, 0x31, 0x9e, 0x8c, 0x0c, 0x12, 0xf8, 0xe4, 0x12, 0x6f,
	0x7d, 0x4c, 0x5c, 0xfb, 0x5d, 0x90, 0xe2, 0x13, 0xe0, 0x37, 0xd9, 0xf7, 0xda, 0x7f, 0xa5, 0x41,
	0x8a, 0xcf, 0x99, 0xff, 0x67, 0x8c, 0xff, 0x2f, 0x69, 0x28, 0x7a, 0x33, 0xf2, 0x35, 0x3a, 0x2d,
	0xc3, 0x02, 0xab, 0xae, 0xad, 0x8b, 0x81, 0xc8, 0x4b, 0xbe, 0xe2, 0x8e, 0xdf, 0x82, 0x92, 0xe1,
	0xb4, 0x79, 0x1f, 0x58, 0xbf, 0x8b, 0x38, 0x10, 0x50, 0xcd, 0x89, 0x6d, 0x58, 0x76, 0xd0, 0x5f,
	0x3f, 0x5d, 0xfb, 0x31, 0x94, 0x43, 0x04, 0xe2, 0x9b, 0xee, 0x6a, 0xed, 0x5f, 0xd3, 0x50, 0x0e,
	0x31, 0x90, 0xff, 0xd5, 0xa6, 0xfe, 0x79, 0x06, 0x20, 0xd8, 0x67, 0xb8, 0x46, 0x57, 0x23, 0x33,
	0x36, 0xc4, 0x67, 0x6c, 0x24, 0x56, 0xe5, 0x7c, 0x6a, 0xe3, 0xeb, 0xef, 0x75, 0x7f, 0x59, 0xcc,
	0xfb, 0xe5, 0x2d, 0x7f, 0x91, 0xd8, 0xa2, 0xe0, 0x9d, 0xf2, 0x4e, 0x8c, 0xaa, 0xc1, 0x22, 0x97,
	0x2e, 0x5f, 0x59, 0xaf, 0x10, 0x8e, 0x49, 0xd9, 0xdd, 0xad, 0x09, 0x19, 0x1a, 0xda, 0x88, 0x81,
	0x96, 0xc4, 0xdd, 0xad, 0x40, 0x44, 0x4b, 0x67, 0xdb, 0x1a, 0x12, 0x2f, 0x9d, 0x6d, 0x60, 0x48,
	0x7c, 0x03, 0x63, 0x99, 0x89, 0xd8, 0x5e, 0xc5, 0xaa, 0xb7, 0x57, 0x81, 0xb8, 0xc9, 0xf9, 0xa6,
	0x84, 0x04, 0xd9, 0x63, 0x43, 0x97, 0x57, 0x38, 0xee, 0xd8, 0xd0, 0x29, 0x8e, 0x4d, 0x34, 0x62,
	0x62, 0xe4, 0x89, 0xda, 0x4f, 0x33, 0x50, 0x10, 0x2b, 0xcd, 0x07, 0xfe, 0xfe, 0x0c, 0x27, 0xe5,
	0x1b, 0x49, 0xfb, 0x33, 0x1e, 0x21, 0xe7, 0xc8, 0x8d, 0x7f, 0xf0, 0x09, 0xf9, 0x5b, 0x90, 0x67,
	0x32, 0xc1, 0xc6, 0x57, 0x12, 0x94, 0x5b, 0x29, 0xcc, 0x31, 0xa8, 0xcd, 0xbe, 0x95, 0x4e, 0x1a,
	0x96, 0x6d, 0x13, 0xf6, 0x61, 0x04, 0x17, 0x7f, 0x3d, 0x41, 0x2d, 0x00, 0xb5, 0x52, 0x38, 0xae,
	0x47, 0x39, 0x39, 0x17, 0x69, 0xe6, 0xd0, 0x5f, 0xaa, 0xdc, 0x4c, 0x2a, 0x86, 0x01, 0x28, 0x27,
	0x0f, 0xe1, 0x7d, 0x4e, 0xfe, 0x27, 0x0b, 0x90, 0x67, 0xb0, 0x99, 0xcd, 0xd9, 0x62, 0xc2, 0xe6,
	0xec, 0xb5, 0x86, 0xed, 0x49, 0x88, 0x48, 0x25, 0x04, 0x44, 0x39, 0x16, 0x10, 0x32, 0x2c, 0xb0,
	0x06, 0xb6, 0x75, 0xe6, 0x6c, 0x15, 0xec, 0x25, 0xfd, 0x40, 0x5c, 0xbc, 0x42, 0x20, 0x46, 0x7c,
	0xbc, 0x9a, 0x70, 0x27, 0xe5, 0x78, 0x7a, 0xce, 0x82, 0x7d, 0x89, 0xd7, 0x21, 0x92, 0xb4, 0x65,
	0x0e, 0x19, 0x8d, 0x58, 0x96, 0xc4, 0xb2, 0xfc, 0x34, 0xb3, 0x8c, 0x20, 0xc3, 0xec, 0x4b, 0x2f,
	0xf3, 0x2d, 0xe9, 0xb0, 0x8c, 0xdf, 0x27, 0x74, 0x5c, 0x32, 0x66, 0x93, 0x9c, 0xce, 0x9c, 0xb2,
	0x88, 0x23, 0x32, 0xca, 0xc3, 0xf8, 0x4a, 0x5b, 0x35, 0xf9, 0xa6, 0xd9, 0x0a, 0x03, 0x45, 0x85,
	0x34, 0xe6, 0x2c, 0x5d, 0xef, 0x58, 0x2e, 0x73, 0xd8, 0x22, 0x16, 0x29, 0xf4, 0x10, 0x96, 0x82,
	0x48, 0xea, 0x13, 0x7b, 0xec, 0x30, 0x1e, 0x57, 0x8d, 0xfb, 0x4e, 0x2f, 0x0a, 0xc2, 0x71, 0x2d,
	0xf4, 0x01, 0x94, 0x86, 0xb6, 0xe5, 0x38, 0xfd, 0xf3, 0x09, 0x61, 0x14, 0xaf, 0x3a, 0xb3, 0xff,
	0xeb, 0x65, 0xe3, 0x00, 0x49, 0xdb, 0x75, 0x7c, 0x7e, 0xa0, 0x39, 0x0e, 0x23, 0x7b, 0x45, 0x2c,
	0x52, 0xd4, 0xe2, 0x74, 0xac, 0xe0, 0xe4, 0x53, 0x66, 0x1f, 0x35, 0x10, 0xd0, 0x3e, 0x3b, 0xda,
	0x28, 0x44, 0xe7, 0x6e, 0x72, 0xbe, 0x1b, 0x11, 0x52, 0xeb, 0xf3, 0xbb, 0x05, 0xc3, 0x73, 0xb6,
	0xaf, 0x5a, 0xc2, 0x7e, 0x9a, 0x72, 0x61, 0xdd, 0x22, 0x4e, 0xd7, 0x12, 0xe7, 0x23, 0x1d, 0x3a,
	0x48, 0xbd, 0xc6, 0x9a, 0x30, 0x9b, 0x41, 0x19, 0x67, 0x44, 0xc8, 0x77, 0xee, 0xd8, 0x5e, 0x6a,
	0x11, 0x27, 0x65, 0xb1, 0x65, 0x9f, 0xd8, 0x77, 0xbf, 0xcd, 0xcf, 0x77, 0xbc, 0x2d, 0xfd, 0xdb,
	0x00, 0xc7, 0x23, 0x6b, 0xf8, 0x8c, 0x7f, 0x75, 0xce, 0x2d, 0x43, 0x92, 0xc4, 0xa3, 0x94, 0xcd,
	0x39, 0x47, 0x29, 0xdb, 0x20, 0xc5, 0x42, 0xe4, 0x01, 0xdb, 0xff, 0x44, 0x78, 0x46, 0x5e, 0xfb,
	0xa3, 0x02, 0x2c, 0xc5, 0x46, 0x80, 0x5f, 0x47, 0xe7, 0xaf, 0xa3, 0xf3, 0x2b, 0x45, 0x67, 0xb0,
	0xd5, 0x32, 0xea, 0x8b, 0xef, 0x27, 0x8b, 0xb5, 0x5a, 0x54, 0xfc, 0x12, 0x22, 0x35, 0x29, 0x1e,
	0x5e, 0xbb, 0x46, 0x3c, 0xdc, 0x9a, 0x13, 0x0f, 0xff, 0x99, 0x81, 0x72, 0x68, 0x2a, 0x7b, 0xc9,
	0xb1, 0xf0, 0x0e, 0xac, 0x0c, 0x79, 0x9c, 0x11, 0x9d, 0xd5, 0x12, 0xde, 0x00, 0x48, 0xca, 0x42,
	0x1f, 0xc2, 0x7a, 0x54, 0x1c, 0xdb, 0x16, 0x98, 0x93, 0x7b, 0x41, 0x0c, 0xcd, 0xd8, 0x7e, 0xf1,
	0x32, 0xdb, 0x57, 0xaf, 0x60, 0xfb, 0xa5, 0x6b, 0xd8, 0x5e, 0x9a, 0x63, 0xfb, 0x5f, 0xa6, 0x21,
	0xa7, 0xf2, 0xb3, 0xa6, 0x97, 0x43, 0x33, 0xfd, 0xa1, 0xa7, 0x1c, 0x1e, 0x7a, 0x06, 0x70, 0x83,
	0xd6, 0xc2, 0x62, 0x2c, 0x08, 0x91, 0xbd, 0x91, 0x76, 0xc2, 0x4c, 0x35, 0xb3, 0xb3, 0x35, 0x07,
	0x8c, 0xe7, 0x95, 0x12, 0xb1, 0xdd, 0x62, 0xd4, 0x76, 0xb5, 0xdf, 0x4b, 0x43, 0x8e, 0x1d, 0x1c,
	0xbd, 0xda, 0x3e, 0x86, 0x9b, 0x50, 0x89, 0x35, 0xe1, 0x27, 0x90, 0xed, 0x58, 0xcf, 0xbf, 0xc5,
	0x06, 0xfc, 0x7e, 0x1a, 0xf2, 0xde, 0xe9, 0xdc, 0xb7, 0xd5, 0x86, 0x9f, 0xa6, 0xa1, 0x74, 0x10,
	0x3a, 0x25, 0xfc, 0xb6, 0xda, 0xf1, 0x65, 0x1a, 0x72, 0x8c, 0x4c, 0xbc, 0xf2, 0x26, 0xf8, 0xd3,
	0x6d, 0x25, 0x36, 0xdd, 0x5e, 0xe0, 0xae, 0xf3, 0x09, 0x4b, 0xed, 0x29, 0x14, 0xbd, 0x03, 0xd1,
	0x97, 0x41, 0x06, 0xfc, 0x16, 0x94, 0x63, 0x06, 0x22, 0xb0, 0x20, 0xce, 0x50, 0x5f, 0x69, 0x35,
	0xa7, 0x50, 0x10, 0x1c, 0xed, 0x65, 0x7d, 0x88, 0x60, 0x3d, 0x5b, 0x0e, 0xaf, 0x67, 0x6b, 0xbf,
	0x03, 0xd5, 0xe8, 0x81, 0xe4, 0x4b, 0xab, 0xb1, 0x06, 0x15, 0x7e, 0xb0, 0x29, 0x0e, 0x43, 0x79,
	0xbd, 0x11, 0x59, 0xed, 0xcf, 0xd3, 0xb0, 0x18, 0x39, 0xc8, 0x7c, 0x99, 0x8e, 0x77, 0xc6, 0x0e,
	0x13, 0x85, 0xe3, 0xb1, 0x04, 0x65, 0xd4, 0xec, 0x47, 0x43, 0x18, 0x9a, 0x9d, 0xa0, 0xf0, 0x20,
	0x98, 0xcd, 0xa8, 0x7d, 0x99, 0x01, 0x08, 0x5d, 0xd2, 0x7e, 0xb5, 0x31, 0x71, 0x1f, 0x96, 0x27,
	0x36, 0x19, 0x19, 0x63, 0xc3, 0xd4, 0xec, 0x73, 0x5e, 0x2d, 0x6b, 0x5a, 0x11, 0xcf, 0x66, 0x5c,
	0x18, 0x25, 0x3f, 0x02, 0x29, 0xa0, 0x56, 0x3d, 0x7e, 0x86, 0x54, 0x4d, 0x7a, 0x0f, 0xd0, 0x8b,
	0xa1, 0xf0, 0x8c, 0x5e, 0x38, 0xe2, 0x96, 0xa2, 0x4b, 0x84, 0xf0, 0x61, 0xd0, 0x4f, 0xf8, 0x2b,
	0x18, 0x2f, 0x5d, 0x33, 0xa1, 0xa2, 0x46, 0x4f, 0xed, 0x5f, 0xad, 0x13, 0x1f, 0x43, 0xee, 0xe8,
	0xb9, 0x36, 0x79, 0x99, 0x1b, 0x42, 0xec, 0x96, 0x81, 0xd8, 0x10, 0xa2, 0xbf, 0x6b, 0x3f, 0x2f,
	0xc0, 0xad, 0x8b, 0xae, 0x07, 0x24, 0x55, 0x5e, 0x98, 0x7b, 0x97, 0x3d, 0xb8, 0x13, 0xc4, 0xd8,
	0x2e, 0xbf, 0x47, 0x1e, 0x93, 0xd2, 0x12, 0x87, 0x96, 0x3d, 0xb1, 0x6c, 0xcd, 0x25, 0x75, 0xbe,
	0x67, 0x52, 0x64, 0xc0, 0xb8, 0x78, 0x86, 0x03, 0xd1, 0x32, 0x4b, 0x0c, 0x3a, 0x23, 0x47, 0x9b,
	0x50, 0x9e, 0x68, 0xe7, 0xda, 0xf1, 0x28, 0xdc, 0xf9, 0xb0, 0x88, 0xae, 0xfe, 0x6c, 0x32, 0xb4,
	0x6c, 0x9d, 0x01, 0xca, 0x7c, 0x13, 0x38, 0x90, 0xd0, 0xf6, 0x93, 0x17, 0x9e, 0x2d, 0x18, 0x86,
	0x1f, 0xf8, 0xc4, 0xa4, 0xf4, 0x73, 0x69, 0x63, 0xb6, 0x91, 0xcc, 0x77, 0xcb, 0x44, 0x2a, 0xb8,
	0x63, 0x2f, 0x02, 0x90, 0x33, 0xba, 0x88, 0x8c, 0x06, 0x89, 0x69, 0xb9, 0xc4, 0x91, 0x97, 0xd8,
	0x81, 0x24, 0x4f, 0xa0, 0xf7, 0x61, 0x8d, 0x5f, 0xd6, 0xd7, 0x9c, 0xd3, 0xb0, 0xf5, 0x05, 0x89,
	0x4b, 0xce, 0x44, 0xbb, 0x70, 0xcb, 0xb4, 0xcc, 0xc7, 0x53, 0x6d, 0x64, 0x3c, 0x35, 0x88, 0x3e,
	0xa3, 0xcc, 0xb7, 0xd6, 0x2e, 0xc4, 0xa0, 0xdf, 0x80, 0x9b, 0x9f, 0xcf, 0x2d, 0x80, 0xef, 0xc3,
	0xcd, 0x07, 0xa0, 0x1f, 0xc0, 0x0d, 0x57, 0x7b, 0xb1, 0x67, 0x13, 0x32, 0xa3, 0xcb, 0xf7, 0xeb,
	0xe6, 0x65, 0xa3, 0x8f, 0x41, 0xb6, 0x6c, 0x9d, 0x85, 0xfe, 0x9e, 0x65, 0x13, 0xe3, 0xc4, 0xec,
	0x6b, 0x2f, 0x1a, 0x36, 0xd1, 0x0d, 0x57, 0x6c, 0xeb, 0xcd, 0xcd, 0x8f, 0xb4, 0x79, 0x46, 0x79,
	0x2d, 0xd6, 0xe6, 0x19, 0xed, 0x1d, 0x40, 0x8e, 0x6b, 0x0d, 0x9f, 0x79, 0x9f, 0x14, 0x6b, 0xae,
	0x61, 0xb1, 0x75, 0x19, 0xc2, 0x09, 0x39, 0xf4, 0xab, 0xda, 0xc4, 0x30, 0xcf, 0x88, 0xe3, 0x32,
	0x9f, 0xb8, 0xc1, 0x5f, 0x4e, 0x84, 0x65, 0xb5, 0x9f, 0xe5, 0x60, 0x35, 0xe9, 0xb2, 0x49, 0x52,
	0xf0, 0x14, 0xaf, 0x1a, 0x3c, 0xa5, 0xab, 0x06, 0x0f, 0x24, 0x07, 0x4f, 0x2c, 0x20, 0xca, 0x97,
	0x05, 0x44, 0x65, 0x26, 0x20, 0xd6, 0xa1, 0x40, 0x5e, 0x84, 0x4e, 0x83, 0x45, 0x0a, 0x3d, 0x80,
	0x55, 0xe7, 0xd4, 0xb2, 0xd9, 0xfa, 0x56, 0x74, 0xfb, 0xa1, 0x66, 0x78, 0xdb, 0xc3, 0x89, 0x79,
	0x74, 0x51, 0x36, 0xb2, 0xcc, 0x93, 0xb8, 0x0a, 0x5f, 0xd1, 0x24, 0x65, 0x51, 0x17, 0x99, 0x9a,
	0xda, 0x68, 0x64, 0x0d, 0x35, 0x97, 0xe8, 0xd1, 0xeb, 0x3e, 0x3c, 0x2e, 0xe6, 0xe6, 0x53, 0x2b,
	0xd9, 0xc4, 0x9d, 0xda, 0xa6, 0xfa, 0x54, 0x14, 0x29, 0xa2, 0x21, 0x2e, 0x9e, 0x09, 0x5a, 0x74,
	0x51, 0xd0, 0xae, 0x84, 0x83, 0x36, 0xee, 0x18, 0xab, 0x09, 0x8e, 0xf1, 0x0c, 0x96, 0x67, 0x6e,
	0x0b, 0xd1, 0x29, 0x71, 0xf6, 0xa6, 0x11, 0xbf, 0x2e, 0x91, 0x70, 0x8d, 0xe8, 0xea, 0x37, 0x10,
	0x06, 0xb0, 0x18, 0xb9, 0x4d, 0x44, 0x17, 0xa1, 0xd1, 0x1b, 0x48, 0xbc, 0x92, 0xd8, 0x15, 0xa3,
	0xab, 0x57, 0xf0, 0x8b, 0xa2, 0xff, 0x8a, 0x8e, 0xdf, 0x2c, 0xba, 0xc6, 0x3b, 0xbf, 0x4d, 0xbe,
	0xbb, 0x6d, 0x98, 0x27, 0xcc, 0x58, 0x19, 0xf1, 0x44, 0x29, 0x10, 0x51, 0x6f, 0x74, 0x5c, 0xcd,
	0x76, 0xd5, 0xa7, 0x4d, 0xed, 0x5c, 0xbc, 0x40, 0x0d, 0x49, 0xd8, 0xfb, 0x54, 0x53, 0xe7, 0xb9,
	0x39, 0xf1, 0x3e, 0x55, 0xa4, 0xd1, 0xc7, 0x90, 0x67, 0xb7, 0x5a, 0xd9, 0xf5, 0x8f, 0xea, 0x83,
	0x37, 0x2e, 0xb8, 0x1e, 0xc5, 0xef, 0xc2, 0xf6, 0x88, 0x8b, 0xb9, 0x4a, 0xe2, 0x0b, 0xa4, 0xd2,
	0xd7, 0x7b, 0x81, 0x04, 0x57, 0x7b, 0x81, 0xe4, 0x3d, 0xdd, 0x29, 0x5f, 0xf1, 0xe9, 0x4e, 0xe5,
	0x6a, 0x4f, 0x77, 0x16, 0xaf, 0xf6, 0x74, 0xa7, 0x7a, 0xbd, 0xa7, 0x3b, 0x4b, 0xd7, 0x7e, 0xba,
	0x23, 0x5d, 0xf9, 0x1d, 0xe3, 0xf2, 0xb5, 0x5f, 0xd5, 0xa0, 0xaf, 0xf1, 0xaa, 0x66, 0xe5, 0x2b,
	0xbe, 0xaa, 0x59, 0xbd, 0xe4, 0x55, 0x4d, 0x88, 0x54, 0xae, 0x45, 0x49, 0x65, 0x1b, 0xca, 0x0e,
	0xf7, 0xbe, 0xd0, 0x26, 0xe0, 0x77, 0x2f, 0x72, 0xd2, 0x5e, 0x00, 0xc7, 0x61, 0xdd, 0xda, 0x7b,
	0x50, 0xf4, 0x1c, 0x18, 0x15, 0x21, 0xd7, 0x55, 0xbb, 0x8a, 0x94, 0x42, 0x0b, 0x90, 0xad, 0x77,
	0x3a, 0x52, 0x1a, 0x15, 0x20, 0xb3, 0x5b, 0x97, 0x32, 0xa8, 0x02, 0xc5, 0xc6, 0x61, 0xaf, 0xaf,
	0xee, 0x0f, 0xde, 0x95, 0xb2, 0xb5, 0x2f, 0xd2, 0x50, 0x0e, 0x95, 0x88, 0x56, 0x41, 0x52, 0x3e,
	0x6b, 0xb4, 0xea, 0xdd, 0x87, 0xca, 0x00, 0x2b, 0x7b, 0x58, 0xe9, 0xb5, 0xa4, 0x14, 0x5a, 0x07,
	0x24, 0x12, 0x83, 0x4e, 0xfb, 0x48, 0x19, 0x1c, 0xe0, 0x76, 0x43, 0x91, 0xd2, 0x48, 0x86, 0x55,
	0x45, 0x6d, 0x0e, 0x1a, 0xea, 0xfe, 0xbe, 0xda, 0x6c, 0xf7, 0x9f, 0xf0, 0x8c, 0x9e, 0x94, 0x41,
	0x1b, 0xb0, 0x4e, 0x73, 0x7a, 0x7d, 0xb5, 0xf1, 0x68, 0xb0, 0xa7, 0x62, 0xe5, 0x33, 0x2f, 0x2f,
	0x8b, 0x6e, 0xc0, 0x4a, 0x54, 0xab, 0xd7, 0xaf, 0xf7, 0x7b, 0x52, 0xae, 0xe6, 0xc2, 0x82, 0xb8,
	0xa2, 0x8f, 0xde, 0xe6, 0x67, 0x56, 0xe2, 0x98, 0xee, 0x66, 0xe2, 0x3d, 0xfe, 0xa6, 0xe6, 0x6a,
	0x98, 0xc1, 0xd0, 0xc7, 0x6c, 0x0c, 0x19, 0x92, 0x03, 0xcb, 0x30, 0x5d, 0x47, 0xce, 0x30, 0x2d,
	0x79, 0xe6, 0x84, 0x4c, 0x00, 0x70, 0x18, 0x5c, 0xfb, 0x65, 0x1a, 0xca, 0xa1, 0x12, 0x51, 0x15,
	0x32, 0x06, 0xbf, 0xee, 0x55, 0xc2, 0x19, 0x43, 0x47, 0x1b, 0xb0, 0x70, 0x46, 0x67, 0x10, 0xf3,
	0x84, 0x5f, 0x21, 0x6b, 0xa5, 0xb0, 0x27, 0x40, 0x32, 0x14, 0xce, 0x8e, 0xcf, 0xe9, 0x04, 0x40,
	0x99, 0x6f, 0x85, 0xdd, 0x1a, 0x66, 0x69, 0xb4, 0x0e, 0xf9, 0xb3, 0x63, 0x4b, 0xbc, 0x98, 0x2c,
	0xb6, 0x52, 0x98, 0x27, 0x79, 0x69, 0x86, 0xe9, 0xbe, 0xf7, 0x80, 0xbf, 0x94, 0xe4, 0xa5, 0x31,
	0x81, 0x9f, 0xf7, 0xe1, 0xfb, 0x9c, 0xc5, 0xfb, 0x79, 0x1f, 0xbe, 0xcf, 0x6a, 0x7a, 0x3a, 0xb2,
	0x34, 0xfe, 0xb4, 0x21, 0xc3, 0x6a, 0x62, 0x69, 0xa6, 0xa5, 0x5b, 0xd3, 0xe3, 0x11, 0x9f, 0xc9,
	0xd3, 0x4c, 0x8b, 0x0b, 0xfc, 0xa3, 0xbf, 0x3f, 0x4e, 0x03, 0x04, 0xfd, 0x9f, 0xe9, 0xe2, 0x26,
	0x94, 0x87, 0xd6, 0x78, 0x62, 0x99, 0xc4, 0x74, 0xfd, 0x27, 0xe5, 0x61, 0x11, 0x1b, 0xa4, 0x8d,
	0x31, 0x71, 0x5c, 0x6d, 0x3c, 0xe9, 0x3a, 0xe2, 0xc1, 0x49, 0x58, 0x44, 0xd9, 0x93, 0xaf, 0xd0,
	0xd1, 0x5c, 0x3a, 0x45, 0x76, 0x1d, 0x36, 0x1c, 0xe7, 0x71, 0x42, 0x4e, 0xed, 0xaf, 0xd3, 0xb0,
	0xd1, 0x6f, 0x1c, 0xb4, 0x0c, 0xc7, 0xb5, 0x6c, 0x63, 0xa8, 0x8d, 0x30, 0x99, 0x8c, 0xb4, 0x73,
	0xf1, 0x30, 0x27, 0xfe, 0x3f, 0x08, 0xf9, 0xe0, 0xf5, 0xf7, 0x26, 0x94, 0xe9, 0xba, 0xcb, 0xe5,
	0xab, 0x78, 0xd6, 0xd8, 0x3c, 0x0e, 0x8b, 0xf8, 0x11, 0x42, 0xe4, 0xd1, 0xac, 0x9f, 0x66, 0x47,
	0xc9, 0x8c, 0xa1, 0xf3, 0x96, 0xf1, 0x04, 0x5d, 0x1d, 0xd9, 0xbc, 0xe2, 0xb6, 0x2e, 0x2e, 0x0a,
	0x06, 0x82, 0xda, 0x5f, 0x64, 0x60, 0x29, 0xf6, 0x70, 0xe8, 0x6b, 0xb5, 0x2f, 0x52, 0x5b, 0x36,
	0x56, 0x1b, 0x22, 0xb0, 0xea, 0x44, 0x2b, 0xa3, 0x91, 0x49, 0x4d, 0x99, 0xdd, 0xaa, 0x3e, 0x78,
	0xf7, 0xc2, 0xf7, 0x4c, 0xf1, 0x34, 0x1b, 0x25, 0x12, 0x8b, 0xab, 0xb5, 0x61, 0x25, 0x01, 0xec,
	0x8d, 0x17, 0x29, 0x54, 0x82, 0xfc, 0xe3, 0x43, 0xb5, 0x4f, 0xc3, 0xbc, 0x04, 0xf9, 0xa6, 0x72,
	0xd0, 0x6f, 0x49, 0x19, 0xb4, 0x02, 0x4b, 0x47, 0x6a, 0xe7, 0x70, 0x5f, 0x19, 0xd4, 0xfb, 0x62,
	0x18, 0xc8, 0xd6, 0xfe, 0x2c, 0x0b, 0x8b, 0x91, 0xf7, 0x5a, 0xaf, 0xf8, 0x5d, 0x53, 0xe4, 0x18,
	0x32, 0x17, 0x3f, 0x86, 0x64, 0xf7, 0x45, 0x1d, 0xd7, 0xdf, 0xa8, 0xe7, 0xef, 0x98, 0x22, 0x32,
	0xca, 0x53, 0x69, 0xba, 0x31, 0x1d, 0xb3, 0x0b, 0x86, 0x67, 0xde, 0xd9, 0x21, 0x5f, 0xbf, 0x26,
	0xe6, 0x45, 0x57, 0xd0, 0x0b, 0xf1, 0x15, 0xf4, 0x01, 0x54, 0xd8, 0xb6, 0x06, 0x07, 0x3b, 0x72,
	0x91, 0x0d, 0x41, 0xf7, 0x2f, 0x78, 0xd4, 0xb6, 0x13, 0xdc, 0x91, 0x12, 0x13, 0x5a, 0xa4, 0x84,
	0x8d, 0x4f, 0x40, 0x8a, 0x23, 0x82, 0x9d, 0x94, 0x74, 0x78, 0x27, 0x25, 0xd8, 0x25, 0xc8, 0x44,
	0x76, 0x09, 0xfe, 0x39, 0x0d, 0x39, 0xf5, 0x74, 0x34, 0xfc, 0x4a, 0x9f, 0xc3, 0xa3, 0x20, 0xd9,
	0x2b, 0x52, 0x90, 0xdc, 0xd5, 0x28, 0x48, 0xfe, 0x6a, 0x14, 0xa4, 0x70, 0x19, 0x05, 0xd9, 0xfe,
	0x00, 0x8a, 0xde, 0x89, 0x23, 0x5a, 0x83, 0xe5, 0xc3, 0xee, 0xa3, 0xae, 0xfa, 0x69, 0x77, 0xb0,
	0xab, 0xaa, 0x8f, 0x06, 0xbd, 0x76, 0x53, 0xcc, 0x7d, 0xbb, 0xed, 0x26, 0x77, 0x60, 0x75, 0x6f,
	0x4f, 0xc1, 0x52, 0x66, 0xfb, 0x6f, 0xb3, 0x70, 0x63, 0xce, 0x5d, 0x59, 0x3a, 0x69, 0x79, 0xc5,
	0xf4, 0x71, 0xbd, 0xd9, 0xee, 0x3e, 0x64, 0x53, 0xd3, 0x61, 0x4f, 0x4a, 0x21, 0x04, 0x55, 0x4f,
	0x86, 0x95, 0xde, 0xe1, 0x3e, 0x8d, 0x8b, 0x0a, 0x14, 0x0f, 0xb0, 0x32, 0x50, 0x0f, 0x94, 0xae,
	0x94, 0xa1, 0x73, 0x2e, 0xfb, 0x95, 0x45, 0x8b, 0x50, 0xa2, 0xf2, 0x46, 0x47, 0xed, 0x29, 0x52,
	0x8e, 0xd6, 0xce, 0x7f, 0xe6, 0x91, 0x04, 0x15, 0xaf, 0x94, 0x56, 0xbd, 0xd3, 0x97, 0x0a, 0x74,
	0xc2, 0xa5, 0x61, 0x56, 0xef, 0xb7, 0xd5, 0xae, 0x57, 0xf2, 0x02, 0xaa, 0x02, 0xd0, 0xb2, 0x06,
	0x4d, 0xa5, 0x53, 0x7f, 0x22, 0x15, 0x69, 0x07, 0xbb, 0x2a, 0xab, 0x68, 0xd0, 0x55, 0x3d, 0x58,
	0x09, 0x2d, 0x41, 0x79, 0xaf, 0xde, 0xeb, 0x0f, 0xf6, 0xeb, 0xf8, 0x91, 0xd2, 0x97, 0x80, 0x86,
	0x67, 0x48, 0x30, 0x50, 0xba, 0x4d, 0xa9, 0x4c, 0x51, 0x9d, 0x7a, 0x5f, 0xf1, 0x50, 0x15, 0x8a,
	0x0a, 0x09, 0x18, 0x6a, 0x91, 0x36, 0xed, 0x40, 0xed, 0xf5, 0x07, 0x3d, 0xa5, 0xd7, 0x6b, 0xab,
	0x5d, 0xa9, 0x4a, 0x9b, 0x16, 0x96, 0x30, 0xdc, 0x12, 0x9d, 0xf3, 0xbb, 0xca, 0xa7, 0x3c, 0xf6,
	0x07, 0xed, 0x6e, 0xb3, 0xdd, 0x60, 0x6d, 0x97, 0x24, 0xf4, 0x3a, 0xdc, 0xec, 0xaa, 0xfd, 0x41,
	0xfd, 0xa8, 0xde, 0xee, 0xd4, 0x77, 0x3b, 0x0a, 0x9d, 0xf7, 0x3d, 0x43, 0x4a, 0xcb, 0xbe, 0x55,
	0xb0, 0xda, 0xeb, 0x49, 0x88, 0x59, 0x85, 0xfd, 0x5c, 0xa1, 0xbd, 0x65, 0x15, 0x71, 0x2b, 0xad,
	0x52, 0x64, 0x57, 0x1d, 0x70, 0x16, 0x22, 0xad, 0x31, 0x32, 0x53, 0xdf, 0xeb, 0x4b, 0xeb, 0xdb,
	0x5f, 0xa4, 0xe1, 0xce, 0x25, 0xb7, 0x86, 0x29, 0x57, 0xf1, 0x3e, 0x22, 0x6f, 0x63, 0x5f, 0xe9,
	0xf5, 0xa5, 0x14, 0xed, 0x74, 0x90, 0x1e, 0x30, 0x76, 0xc4, 0x08, 0x4c, 0x48, 0xd8, 0xee, 0x0e,
	0x94, 0xbd, 0x3d, 0xa5, 0xd1, 0x97, 0x32, 0x68, 0x13, 0x6e, 0x85, 0x72, 0xb0, 0xb2, 0x5f, 0x6f,
	0x77, 0x7b, 0x21, 0x44, 0x76, 0xfb, 0x0c, 0x96, 0x62, 0x27, 0xbc, 0xe8, 0x16, 0xc8, 0x5e, 0xdd,
	0x3d, 0xa5, 0xdf, 0xef, 0x28, 0xfb, 0x4a, 0xb7, 0x3f, 0xe8, 0x2b, 0x78, 0x9f, 0xba, 0x50, 0x11,
	0x72, 0x8d, 0x7a, 0xaf, 0x25, 0xa5, 0x51, 0x19, 0x16, 0xba, 0x6a, 0x77, 0xd0, 0x55, 0x68, 0x4d,
	0xab, 0x20, 0x35, 0xd4, 0x6e, 0xbf, 0xdd, 0x7d, 0xc8, 0xc0, 0xb8, 0xde, 0x54, 0xa4, 0x2c, 0xb5,
	0x09, 0x05, 0x0f, 0xfa, 0x6a, 0xb3, 0xfe, 0x44, 0xca, 0x51, 0xe5, 0x66, 0xbd, 0xaf, 0x48, 0xf9,
	0xed, 0x1f, 0x43, 0xa9, 0x11, 0x3a, 0x0b, 0xf6, 0x7b, 0xcb, 0xac, 0x39, 0xe8, 0x3f, 0x39, 0xa0,
	0xae, 0x5f, 0x86, 0x85, 0xa6, 0xb2, 0x57, 0x3f, 0xec, 0xf4, 0xb9, 0x9f, 0xb6, 0xbb, 0x7d, 0x05,
	0x77, 0xeb, 0x1d, 0x29, 0x43, 0x0d, 0xbf, 0x5b, 0xef, 0xb5, 0x7b, 0xa2, 0x12, 0xbf, 0x6a, 0x29,
	0x47, 0xb5, 0x7a, 0x07, 0x4a, 0xa3, 0x5d, 0xef, 0x48, 0x79, 0x5a, 0xe3, 0xd1, 0xa7, 0xf5, 0x03,
	0xa9, 0x40, 0xc5, 0x58, 0x79, 0x78, 0xd8, 0xa9, 0x63, 0x69, 0x61, 0xfb, 0xf1, 0xdc, 0xe3, 0x3b,
	0x8a, 0x13, 0x8d, 0x91, 0x52, 0xb4, 0xec, 0x66, 0xbd, 0xdd, 0x79, 0xc2, 0xc3, 0x23, 0x8d, 0x6e,
	0xc2, 0x9a, 0xe7, 0x2d, 0x47, 0x3c, 0x66, 0xc4, 0xfc, 0x91, 0xd9, 0xc6, 0x20, 0xc5, 0x77, 0x66,
	0xa9, 0x33, 0x25, 0x98, 0xb2, 0xa7, 0x1e, 0xe2, 0x06, 0xed, 0x1f, 0x40, 0xe1, 0x61, 0x47, 0xdd,
	0x55, 0x3e, 0x93, 0xd2, 0x34, 0xcc, 0xdb, 0xfd, 0x86, 0x94, 0xa1, 0xc2, 0xfd, 0x7a, 0xf7, 0xb0,
	0xde, 0x91, 0xb2, 0xdb, 0x2f, 0x60, 0x41, 0xfc, 0xa3, 0x04, 0xfd, 0xf2, 0x41, 0x51, 0xf8, 0xa8,
	0xcd, 0x0a, 0x58, 0x84, 0x12, 0x56, 0xea, 0x9d, 0x41, 0xbf, 0xcd, 0x42, 0x99, 0xd9, 0xab, 0x53,
	0x7f, 0xa2, 0x34, 0xa5, 0x0c, 0xa7, 0xbb, 0x22, 0x6f, 0xd0, 0xeb, 0xd6, 0x0f, 0x7a, 0x2d, 0xb5,
	0x2f, 0x65, 0xe9, 0x97, 0x12, 0xa0, 0x40, 0x9a, 0xa3, 0x1d, 0x55, 0xba, 0xcd, 0x81, 0xba, 0x37,
	0xa0, 0x5f, 0x2a, 0xbf, 0x7d, 0x0e, 0x52, 0xfc, 0x7f, 0x67, 0xe8, 0xe8, 0xc1, 0x47, 0x92, 0x41,
	0x60, 0xa0, 0x1b, 0xb0, 0x22, 0x64, 0xbd, 0x7e, 0x1d, 0xf7, 0xbd, 0x02, 0xd2, 0x34, 0xd8, 0x45,
	0x46, 0xa8, 0xdc, 0x0c, 0x0d, 0x63, 0x21, 0x16, 0xc3, 0x8c, 0x04, 0x15, 0x21, 0x10, 0x23, 0xcd,
	0xf6, 0x3f, 0xa6, 0x61, 0x2d, 0xf1, 0x85, 0x33, 0xba, 0x0b, 0x77, 0xbc, 0x26, 0x0f, 0xb0, 0xf2,
	0xf8, 0x90, 0x3a, 0xb5, 0x67, 0x14, 0x3a, 0x9c, 0x74, 0x68, 0x88, 0xdc, 0x02, 0x79, 0x06, 0xd4,
	0x3b, 0x6c, 0x34, 0x94, 0x5e, 0x4f, 0x4a, 0xa3, 0xdb, 0xb0, 0x31, 0x93, 0x4b, 0xe3, 0x7d, 0x4f,
	0x3d, 0xec, 0x52, 0xab, 0x6d, 0xc3, 0xbd, 0x59, 0x6d, 0x6e, 0xef, 0x41, 0x64, 0x5c, 0x90, 0xb2,
	0xe8, 0x0d, 0xd8, 0x9c, 0xc1, 0x3e, 0x54, 0xba, 0x0a, 0x6e, 0x37, 0x06, 0x7b, 0xf5, 0x76, 0xe7,
	0x10, 0x2b, 0x52, 0x6e, 0x77, 0xb9, 0x95, 0x3e, 0x48, 0xff, 0x56, 0xd1, 0x1b, 0xff, 0xff, 0x2a,
	0x9d, 0x3e, 0x2e, 0xb0, 0x3f, 0x8a, 0x7b, 0xef, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x78, 0xc8,
	0x24, 0xa4, 0x63, 0x4e, 0x00, 0x00,
}
