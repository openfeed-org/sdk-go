//*
// Copyright (C) 2011-2017 Barchart, Inc. <http://www.barchart.com/>
//
// All rights reserved. Licensed under the OSI BSD License.
//
// http://www.opensource.org/licenses/bsd-license.php

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: openfeed.proto

package openfeed

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

/// Book side
type BookSide int32

const (
	BookSide_UNKNOWN_BOOK_SIDE BookSide = 0
	BookSide_BID               BookSide = 1
	BookSide_OFFER             BookSide = 2
)

// Enum value maps for BookSide.
var (
	BookSide_name = map[int32]string{
		0: "UNKNOWN_BOOK_SIDE",
		1: "BID",
		2: "OFFER",
	}
	BookSide_value = map[string]int32{
		"UNKNOWN_BOOK_SIDE": 0,
		"BID":               1,
		"OFFER":             2,
	}
)

func (x BookSide) Enum() *BookSide {
	p := new(BookSide)
	*p = x
	return p
}

func (x BookSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookSide) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_proto_enumTypes[0].Descriptor()
}

func (BookSide) Type() protoreflect.EnumType {
	return &file_openfeed_proto_enumTypes[0]
}

func (x BookSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookSide.Descriptor instead.
func (BookSide) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{0}
}

type InstrumentTradingStatus int32

const (
	InstrumentTradingStatus_UNKNOWN_TRADING_STATUS    InstrumentTradingStatus = 0
	InstrumentTradingStatus_TRADING_RESUME            InstrumentTradingStatus = 1
	InstrumentTradingStatus_PRE_OPEN                  InstrumentTradingStatus = 2
	InstrumentTradingStatus_OPEN                      InstrumentTradingStatus = 3
	InstrumentTradingStatus_PRE_CLOSE                 InstrumentTradingStatus = 4
	InstrumentTradingStatus_CLOSE                     InstrumentTradingStatus = 5
	InstrumentTradingStatus_TRADING_HALT              InstrumentTradingStatus = 6
	InstrumentTradingStatus_QUOTATION_RESUME          InstrumentTradingStatus = 7
	InstrumentTradingStatus_OPEN_DELAY                InstrumentTradingStatus = 8
	InstrumentTradingStatus_NO_OPEN_NO_RESUME         InstrumentTradingStatus = 9
	InstrumentTradingStatus_FAST_MARKET               InstrumentTradingStatus = 10
	InstrumentTradingStatus_FAST_MARKET_END           InstrumentTradingStatus = 11
	InstrumentTradingStatus_LATE_MARKET               InstrumentTradingStatus = 12
	InstrumentTradingStatus_LATE_MARKET_END           InstrumentTradingStatus = 13
	InstrumentTradingStatus_POST_SESSION              InstrumentTradingStatus = 14
	InstrumentTradingStatus_POST_SESSION_END          InstrumentTradingStatus = 15
	InstrumentTradingStatus_NEW_PRICE_INDICATION      InstrumentTradingStatus = 16
	InstrumentTradingStatus_NOT_AVAILABLE_FOR_TRADING InstrumentTradingStatus = 17
	InstrumentTradingStatus_PRE_CROSS                 InstrumentTradingStatus = 18
	InstrumentTradingStatus_CROSS                     InstrumentTradingStatus = 19
	InstrumentTradingStatus_POST_CLOSE                InstrumentTradingStatus = 20
	InstrumentTradingStatus_NO_CHANGE                 InstrumentTradingStatus = 21
	InstrumentTradingStatus_NAFT                      InstrumentTradingStatus = 22 // Not available for trading.
	InstrumentTradingStatus_TRADING_RANGE_INDICATION  InstrumentTradingStatus = 23
	InstrumentTradingStatus_MARKET_IMBALANCE_BUY      InstrumentTradingStatus = 24
	InstrumentTradingStatus_MARKET_IMBALANCE_SELL     InstrumentTradingStatus = 25
	InstrumentTradingStatus_MOC_IMBALANCE_BUY         InstrumentTradingStatus = 26 // Market On Close Imbalance Buy
	InstrumentTradingStatus_MOC_IMBALANCE_SELL        InstrumentTradingStatus = 27
	InstrumentTradingStatus_NO_MARKET_IMBALANCE       InstrumentTradingStatus = 28
	InstrumentTradingStatus_NO_MOC_IMBALANCE          InstrumentTradingStatus = 29
	InstrumentTradingStatus_SHORT_SELL_RESTRICTION    InstrumentTradingStatus = 30
	InstrumentTradingStatus_LIMIT_UP_LIMIT_DOWN       InstrumentTradingStatus = 31
)

// Enum value maps for InstrumentTradingStatus.
var (
	InstrumentTradingStatus_name = map[int32]string{
		0:  "UNKNOWN_TRADING_STATUS",
		1:  "TRADING_RESUME",
		2:  "PRE_OPEN",
		3:  "OPEN",
		4:  "PRE_CLOSE",
		5:  "CLOSE",
		6:  "TRADING_HALT",
		7:  "QUOTATION_RESUME",
		8:  "OPEN_DELAY",
		9:  "NO_OPEN_NO_RESUME",
		10: "FAST_MARKET",
		11: "FAST_MARKET_END",
		12: "LATE_MARKET",
		13: "LATE_MARKET_END",
		14: "POST_SESSION",
		15: "POST_SESSION_END",
		16: "NEW_PRICE_INDICATION",
		17: "NOT_AVAILABLE_FOR_TRADING",
		18: "PRE_CROSS",
		19: "CROSS",
		20: "POST_CLOSE",
		21: "NO_CHANGE",
		22: "NAFT",
		23: "TRADING_RANGE_INDICATION",
		24: "MARKET_IMBALANCE_BUY",
		25: "MARKET_IMBALANCE_SELL",
		26: "MOC_IMBALANCE_BUY",
		27: "MOC_IMBALANCE_SELL",
		28: "NO_MARKET_IMBALANCE",
		29: "NO_MOC_IMBALANCE",
		30: "SHORT_SELL_RESTRICTION",
		31: "LIMIT_UP_LIMIT_DOWN",
	}
	InstrumentTradingStatus_value = map[string]int32{
		"UNKNOWN_TRADING_STATUS":    0,
		"TRADING_RESUME":            1,
		"PRE_OPEN":                  2,
		"OPEN":                      3,
		"PRE_CLOSE":                 4,
		"CLOSE":                     5,
		"TRADING_HALT":              6,
		"QUOTATION_RESUME":          7,
		"OPEN_DELAY":                8,
		"NO_OPEN_NO_RESUME":         9,
		"FAST_MARKET":               10,
		"FAST_MARKET_END":           11,
		"LATE_MARKET":               12,
		"LATE_MARKET_END":           13,
		"POST_SESSION":              14,
		"POST_SESSION_END":          15,
		"NEW_PRICE_INDICATION":      16,
		"NOT_AVAILABLE_FOR_TRADING": 17,
		"PRE_CROSS":                 18,
		"CROSS":                     19,
		"POST_CLOSE":                20,
		"NO_CHANGE":                 21,
		"NAFT":                      22,
		"TRADING_RANGE_INDICATION":  23,
		"MARKET_IMBALANCE_BUY":      24,
		"MARKET_IMBALANCE_SELL":     25,
		"MOC_IMBALANCE_BUY":         26,
		"MOC_IMBALANCE_SELL":        27,
		"NO_MARKET_IMBALANCE":       28,
		"NO_MOC_IMBALANCE":          29,
		"SHORT_SELL_RESTRICTION":    30,
		"LIMIT_UP_LIMIT_DOWN":       31,
	}
)

func (x InstrumentTradingStatus) Enum() *InstrumentTradingStatus {
	p := new(InstrumentTradingStatus)
	*p = x
	return p
}

func (x InstrumentTradingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentTradingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_proto_enumTypes[1].Descriptor()
}

func (InstrumentTradingStatus) Type() protoreflect.EnumType {
	return &file_openfeed_proto_enumTypes[1]
}

func (x InstrumentTradingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentTradingStatus.Descriptor instead.
func (InstrumentTradingStatus) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{1}
}

type RegulationSHOShortSalePriceTest int32

const (
	RegulationSHOShortSalePriceTest_UNKNOWN_PRICE_TEST           RegulationSHOShortSalePriceTest = 0
	RegulationSHOShortSalePriceTest_PRICE_TEST_NONE              RegulationSHOShortSalePriceTest = 1
	RegulationSHOShortSalePriceTest_PRICE_TEST_IN_EFFECT         RegulationSHOShortSalePriceTest = 2
	RegulationSHOShortSalePriceTest_PRICE_TEST_REMAINS_IN_EFFECT RegulationSHOShortSalePriceTest = 3
)

// Enum value maps for RegulationSHOShortSalePriceTest.
var (
	RegulationSHOShortSalePriceTest_name = map[int32]string{
		0: "UNKNOWN_PRICE_TEST",
		1: "PRICE_TEST_NONE",
		2: "PRICE_TEST_IN_EFFECT",
		3: "PRICE_TEST_REMAINS_IN_EFFECT",
	}
	RegulationSHOShortSalePriceTest_value = map[string]int32{
		"UNKNOWN_PRICE_TEST":           0,
		"PRICE_TEST_NONE":              1,
		"PRICE_TEST_IN_EFFECT":         2,
		"PRICE_TEST_REMAINS_IN_EFFECT": 3,
	}
)

func (x RegulationSHOShortSalePriceTest) Enum() *RegulationSHOShortSalePriceTest {
	p := new(RegulationSHOShortSalePriceTest)
	*p = x
	return p
}

func (x RegulationSHOShortSalePriceTest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegulationSHOShortSalePriceTest) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_proto_enumTypes[2].Descriptor()
}

func (RegulationSHOShortSalePriceTest) Type() protoreflect.EnumType {
	return &file_openfeed_proto_enumTypes[2]
}

func (x RegulationSHOShortSalePriceTest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegulationSHOShortSalePriceTest.Descriptor instead.
func (RegulationSHOShortSalePriceTest) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{2}
}

type SettlementTerms int32

const (
	SettlementTerms_UNKNOWN_SETTLEMENT_TERMS SettlementTerms = 0
	SettlementTerms_CASH                     SettlementTerms = 1
	SettlementTerms_NON_NET                  SettlementTerms = 2
	SettlementTerms_CONTINGENT_TRADE         SettlementTerms = 3
	SettlementTerms_CASH_TODAY               SettlementTerms = 4
	SettlementTerms_DATE                     SettlementTerms = 5
)

// Enum value maps for SettlementTerms.
var (
	SettlementTerms_name = map[int32]string{
		0: "UNKNOWN_SETTLEMENT_TERMS",
		1: "CASH",
		2: "NON_NET",
		3: "CONTINGENT_TRADE",
		4: "CASH_TODAY",
		5: "DATE",
	}
	SettlementTerms_value = map[string]int32{
		"UNKNOWN_SETTLEMENT_TERMS": 0,
		"CASH":                     1,
		"NON_NET":                  2,
		"CONTINGENT_TRADE":         3,
		"CASH_TODAY":               4,
		"DATE":                     5,
	}
)

func (x SettlementTerms) Enum() *SettlementTerms {
	p := new(SettlementTerms)
	*p = x
	return p
}

func (x SettlementTerms) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SettlementTerms) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_proto_enumTypes[3].Descriptor()
}

func (SettlementTerms) Type() protoreflect.EnumType {
	return &file_openfeed_proto_enumTypes[3]
}

func (x SettlementTerms) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SettlementTerms.Descriptor instead.
func (SettlementTerms) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{3}
}

type CrossType int32

const (
	CrossType_UNKNOWN_CROSS_TYPE CrossType = 0
	CrossType_DEFAULT            CrossType = 1
	CrossType_INTERNAL           CrossType = 2
	CrossType_BASIS              CrossType = 3
	CrossType_CONTINGENT         CrossType = 4
	CrossType_SPECIAL            CrossType = 5
	CrossType_VWAP               CrossType = 6
	CrossType_REGULAR            CrossType = 7
)

// Enum value maps for CrossType.
var (
	CrossType_name = map[int32]string{
		0: "UNKNOWN_CROSS_TYPE",
		1: "DEFAULT",
		2: "INTERNAL",
		3: "BASIS",
		4: "CONTINGENT",
		5: "SPECIAL",
		6: "VWAP",
		7: "REGULAR",
	}
	CrossType_value = map[string]int32{
		"UNKNOWN_CROSS_TYPE": 0,
		"DEFAULT":            1,
		"INTERNAL":           2,
		"BASIS":              3,
		"CONTINGENT":         4,
		"SPECIAL":            5,
		"VWAP":               6,
		"REGULAR":            7,
	}
)

func (x CrossType) Enum() *CrossType {
	p := new(CrossType)
	*p = x
	return p
}

func (x CrossType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrossType) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_proto_enumTypes[4].Descriptor()
}

func (CrossType) Type() protoreflect.EnumType {
	return &file_openfeed_proto_enumTypes[4]
}

func (x CrossType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrossType.Descriptor instead.
func (CrossType) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{4}
}

type OpenCloseSettlementFlag int32

const (
	OpenCloseSettlementFlag_UNKNOWN               OpenCloseSettlementFlag = 0
	OpenCloseSettlementFlag_DAILY_OPEN            OpenCloseSettlementFlag = 1
	OpenCloseSettlementFlag_INDICATIVE_OPEN_PRICE OpenCloseSettlementFlag = 2
)

// Enum value maps for OpenCloseSettlementFlag.
var (
	OpenCloseSettlementFlag_name = map[int32]string{
		0: "UNKNOWN",
		1: "DAILY_OPEN",
		2: "INDICATIVE_OPEN_PRICE",
	}
	OpenCloseSettlementFlag_value = map[string]int32{
		"UNKNOWN":               0,
		"DAILY_OPEN":            1,
		"INDICATIVE_OPEN_PRICE": 2,
	}
)

func (x OpenCloseSettlementFlag) Enum() *OpenCloseSettlementFlag {
	p := new(OpenCloseSettlementFlag)
	*p = x
	return p
}

func (x OpenCloseSettlementFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenCloseSettlementFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_proto_enumTypes[5].Descriptor()
}

func (OpenCloseSettlementFlag) Type() protoreflect.EnumType {
	return &file_openfeed_proto_enumTypes[5]
}

func (x OpenCloseSettlementFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenCloseSettlementFlag.Descriptor instead.
func (OpenCloseSettlementFlag) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{5}
}

type SettlementSource int32

const (
	SettlementSource_UNKNOWN_SETTLEMENT_SOURCE SettlementSource = 0
	SettlementSource_GLOBEX                    SettlementSource = 1
	SettlementSource_ITC                       SettlementSource = 2
	SettlementSource_MANUAL                    SettlementSource = 3
)

// Enum value maps for SettlementSource.
var (
	SettlementSource_name = map[int32]string{
		0: "UNKNOWN_SETTLEMENT_SOURCE",
		1: "GLOBEX",
		2: "ITC",
		3: "MANUAL",
	}
	SettlementSource_value = map[string]int32{
		"UNKNOWN_SETTLEMENT_SOURCE": 0,
		"GLOBEX":                    1,
		"ITC":                       2,
		"MANUAL":                    3,
	}
)

func (x SettlementSource) Enum() *SettlementSource {
	p := new(SettlementSource)
	*p = x
	return p
}

func (x SettlementSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SettlementSource) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_proto_enumTypes[6].Descriptor()
}

func (SettlementSource) Type() protoreflect.EnumType {
	return &file_openfeed_proto_enumTypes[6]
}

func (x SettlementSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SettlementSource.Descriptor instead.
func (SettlementSource) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{6}
}

type Service int32

const (
	Service_UNKNOWN_SERVICE    Service = 0
	Service_REAL_TIME          Service = 1
	Service_DELAYED            Service = 2
	Service_REAL_TIME_SNAPSHOT Service = 3
	Service_DELAYED_SNAPSHOT   Service = 4
	Service_END_OF_DAY         Service = 5
)

// Enum value maps for Service.
var (
	Service_name = map[int32]string{
		0: "UNKNOWN_SERVICE",
		1: "REAL_TIME",
		2: "DELAYED",
		3: "REAL_TIME_SNAPSHOT",
		4: "DELAYED_SNAPSHOT",
		5: "END_OF_DAY",
	}
	Service_value = map[string]int32{
		"UNKNOWN_SERVICE":    0,
		"REAL_TIME":          1,
		"DELAYED":            2,
		"REAL_TIME_SNAPSHOT": 3,
		"DELAYED_SNAPSHOT":   4,
		"END_OF_DAY":         5,
	}
)

func (x Service) Enum() *Service {
	p := new(Service)
	*p = x
	return p
}

func (x Service) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_proto_enumTypes[7].Descriptor()
}

func (Service) Type() protoreflect.EnumType {
	return &file_openfeed_proto_enumTypes[7]
}

func (x Service) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service.Descriptor instead.
func (Service) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{7}
}

type MarketWideStatus int32

const (
	MarketWideStatus_STATUS_UNKNOWN      MarketWideStatus = 0
	MarketWideStatus_STATUS_START_OF_DAY MarketWideStatus = 1
	MarketWideStatus_STATUS_END_OF_DAY   MarketWideStatus = 2
	MarketWideStatus_STATUS_OPEN         MarketWideStatus = 3
	MarketWideStatus_STATUS_CLOSE        MarketWideStatus = 4
)

// Enum value maps for MarketWideStatus.
var (
	MarketWideStatus_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_START_OF_DAY",
		2: "STATUS_END_OF_DAY",
		3: "STATUS_OPEN",
		4: "STATUS_CLOSE",
	}
	MarketWideStatus_value = map[string]int32{
		"STATUS_UNKNOWN":      0,
		"STATUS_START_OF_DAY": 1,
		"STATUS_END_OF_DAY":   2,
		"STATUS_OPEN":         3,
		"STATUS_CLOSE":        4,
	}
)

func (x MarketWideStatus) Enum() *MarketWideStatus {
	p := new(MarketWideStatus)
	*p = x
	return p
}

func (x MarketWideStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketWideStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_proto_enumTypes[8].Descriptor()
}

func (MarketWideStatus) Type() protoreflect.EnumType {
	return &file_openfeed_proto_enumTypes[8]
}

func (x MarketWideStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketWideStatus.Descriptor instead.
func (MarketWideStatus) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{8}
}

type SnapshotRequestResult int32

const (
	SnapshotRequestResult_SNAPSHOT_REQUEST_UNKNOWN_RESULT        SnapshotRequestResult = 0
	SnapshotRequestResult_SNAPSHOT_REQUEST_SUCCESS               SnapshotRequestResult = 1
	SnapshotRequestResult_SNAPSHOT_REQUEST_NOT_FOUND             SnapshotRequestResult = 2
	SnapshotRequestResult_SNAPSHOT_REQUEST_SERVICE_NOT_AVAILABLE SnapshotRequestResult = 3
	SnapshotRequestResult_SNAPSHOT_REQUEST_GENERIC_FAILURE       SnapshotRequestResult = 4
)

// Enum value maps for SnapshotRequestResult.
var (
	SnapshotRequestResult_name = map[int32]string{
		0: "SNAPSHOT_REQUEST_UNKNOWN_RESULT",
		1: "SNAPSHOT_REQUEST_SUCCESS",
		2: "SNAPSHOT_REQUEST_NOT_FOUND",
		3: "SNAPSHOT_REQUEST_SERVICE_NOT_AVAILABLE",
		4: "SNAPSHOT_REQUEST_GENERIC_FAILURE",
	}
	SnapshotRequestResult_value = map[string]int32{
		"SNAPSHOT_REQUEST_UNKNOWN_RESULT":        0,
		"SNAPSHOT_REQUEST_SUCCESS":               1,
		"SNAPSHOT_REQUEST_NOT_FOUND":             2,
		"SNAPSHOT_REQUEST_SERVICE_NOT_AVAILABLE": 3,
		"SNAPSHOT_REQUEST_GENERIC_FAILURE":       4,
	}
)

func (x SnapshotRequestResult) Enum() *SnapshotRequestResult {
	p := new(SnapshotRequestResult)
	*p = x
	return p
}

func (x SnapshotRequestResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SnapshotRequestResult) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_proto_enumTypes[9].Descriptor()
}

func (SnapshotRequestResult) Type() protoreflect.EnumType {
	return &file_openfeed_proto_enumTypes[9]
}

func (x SnapshotRequestResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SnapshotRequestResult.Descriptor instead.
func (SnapshotRequestResult) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{9}
}

/// Instrument Actions
type ActionType int32

const (
	ActionType_UNKNOWN_ACTION ActionType = 0
	ActionType_LISTING        ActionType = 1
	ActionType_DELISTING      ActionType = 2
	ActionType_EXCHANGE_MOVE  ActionType = 3
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "UNKNOWN_ACTION",
		1: "LISTING",
		2: "DELISTING",
		3: "EXCHANGE_MOVE",
	}
	ActionType_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"LISTING":        1,
		"DELISTING":      2,
		"EXCHANGE_MOVE":  3,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_proto_enumTypes[10].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_openfeed_proto_enumTypes[10]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{10}
}

type AdminMessage_Status int32

const (
	AdminMessage_OK AdminMessage_Status = 0
)

// Enum value maps for AdminMessage_Status.
var (
	AdminMessage_Status_name = map[int32]string{
		0: "OK",
	}
	AdminMessage_Status_value = map[string]int32{
		"OK": 0,
	}
)

func (x AdminMessage_Status) Enum() *AdminMessage_Status {
	p := new(AdminMessage_Status)
	*p = x
	return p
}

func (x AdminMessage_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminMessage_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_proto_enumTypes[11].Descriptor()
}

func (AdminMessage_Status) Type() protoreflect.EnumType {
	return &file_openfeed_proto_enumTypes[11]
}

func (x AdminMessage_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminMessage_Status.Descriptor instead.
func (AdminMessage_Status) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{3, 0}
}

// Clears sets of fields
type MarketSummary_ClearSet int32

const (
	MarketSummary_NONE     MarketSummary_ClearSet = 0
	MarketSummary_ALL      MarketSummary_ClearSet = 1
	MarketSummary_BA       MarketSummary_ClearSet = 2
	MarketSummary_CUSTOM_1 MarketSummary_ClearSet = 3
)

// Enum value maps for MarketSummary_ClearSet.
var (
	MarketSummary_ClearSet_name = map[int32]string{
		0: "NONE",
		1: "ALL",
		2: "BA",
		3: "CUSTOM_1",
	}
	MarketSummary_ClearSet_value = map[string]int32{
		"NONE":     0,
		"ALL":      1,
		"BA":       2,
		"CUSTOM_1": 3,
	}
)

func (x MarketSummary_ClearSet) Enum() *MarketSummary_ClearSet {
	p := new(MarketSummary_ClearSet)
	*p = x
	return p
}

func (x MarketSummary_ClearSet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketSummary_ClearSet) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_proto_enumTypes[12].Descriptor()
}

func (MarketSummary_ClearSet) Type() protoreflect.EnumType {
	return &file_openfeed_proto_enumTypes[12]
}

func (x MarketSummary_ClearSet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketSummary_ClearSet.Descriptor instead.
func (MarketSummary_ClearSet) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{48, 0}
}

/// Used to differentiate various ddf messages.
type MarketSummary_SummaryType int32

const (
	// DDF 2/1 Exchange refresh
	MarketSummary_EXCHANGE_REFRESH MarketSummary_SummaryType = 0
	// DDF 2/6 Live Prices refresh
	MarketSummary_REFRESH_LIVE_PRICE MarketSummary_SummaryType = 1
	// DDF 3/C end-of-day commodity prices
	MarketSummary_EOD_COMMODITY_PRICES MarketSummary_SummaryType = 2
	// DDF 3/S end-of-day stock and forex prices and volume
	MarketSummary_EOD_STOCK_FOREX_PRICES MarketSummary_SummaryType = 3
	// DDF 3/I end-of-day commodity volume and open interest message
	MarketSummary_EOD_COMMODITY_STATS MarketSummary_SummaryType = 4
)

// Enum value maps for MarketSummary_SummaryType.
var (
	MarketSummary_SummaryType_name = map[int32]string{
		0: "EXCHANGE_REFRESH",
		1: "REFRESH_LIVE_PRICE",
		2: "EOD_COMMODITY_PRICES",
		3: "EOD_STOCK_FOREX_PRICES",
		4: "EOD_COMMODITY_STATS",
	}
	MarketSummary_SummaryType_value = map[string]int32{
		"EXCHANGE_REFRESH":       0,
		"REFRESH_LIVE_PRICE":     1,
		"EOD_COMMODITY_PRICES":   2,
		"EOD_STOCK_FOREX_PRICES": 3,
		"EOD_COMMODITY_STATS":    4,
	}
)

func (x MarketSummary_SummaryType) Enum() *MarketSummary_SummaryType {
	p := new(MarketSummary_SummaryType)
	*p = x
	return p
}

func (x MarketSummary_SummaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketSummary_SummaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_proto_enumTypes[13].Descriptor()
}

func (MarketSummary_SummaryType) Type() protoreflect.EnumType {
	return &file_openfeed_proto_enumTypes[13]
}

func (x MarketSummary_SummaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketSummary_SummaryType.Descriptor instead.
func (MarketSummary_SummaryType) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{48, 1}
}

type SnapshotRequest_SnapshotRequestType int32

const (
	SnapshotRequest_ALL             SnapshotRequest_SnapshotRequestType = 0
	SnapshotRequest_QUOTE           SnapshotRequest_SnapshotRequestType = 1
	SnapshotRequest_DEPTH           SnapshotRequest_SnapshotRequestType = 2
	SnapshotRequest_VOLUME_AT_PRICE SnapshotRequest_SnapshotRequestType = 3
)

// Enum value maps for SnapshotRequest_SnapshotRequestType.
var (
	SnapshotRequest_SnapshotRequestType_name = map[int32]string{
		0: "ALL",
		1: "QUOTE",
		2: "DEPTH",
		3: "VOLUME_AT_PRICE",
	}
	SnapshotRequest_SnapshotRequestType_value = map[string]int32{
		"ALL":             0,
		"QUOTE":           1,
		"DEPTH":           2,
		"VOLUME_AT_PRICE": 3,
	}
)

func (x SnapshotRequest_SnapshotRequestType) Enum() *SnapshotRequest_SnapshotRequestType {
	p := new(SnapshotRequest_SnapshotRequestType)
	*p = x
	return p
}

func (x SnapshotRequest_SnapshotRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SnapshotRequest_SnapshotRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_proto_enumTypes[14].Descriptor()
}

func (SnapshotRequest_SnapshotRequestType) Type() protoreflect.EnumType {
	return &file_openfeed_proto_enumTypes[14]
}

func (x SnapshotRequest_SnapshotRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SnapshotRequest_SnapshotRequestType.Descriptor instead.
func (SnapshotRequest_SnapshotRequestType) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{53, 0}
}

/// A wrapper for Openfeed data.  Will contain exactly one of the supported
// message types
type OpenfeedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Nanoecond unix epoch at time of message transmission (UTC)
	SendingTime int64 `protobuf:"zigzag64,1,opt,name=sendingTime,proto3" json:"sendingTime,omitempty"`
	/// The total number of markets available on this channel
	// at the time the message was sent.  For UDP snapshot and definition feeds.
	TotalCount int32 `protobuf:"zigzag32,2,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	/// The most recent packet sequence number sent on the incremental feed
	// at the time this message was sent.  For UDP snapshot and definition feeds.
	SyncSequence int64 `protobuf:"varint,3,opt,name=syncSequence,proto3" json:"syncSequence,omitempty"`
	// Feed specific context data
	Context *Context `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	// Types that are assignable to Data:
	//	*OpenfeedMessage_ChannelReset
	//	*OpenfeedMessage_HeartBeat
	//	*OpenfeedMessage_AdminMessage
	//	*OpenfeedMessage_InstrumentDefinition
	//	*OpenfeedMessage_InstrumentGroupStatus
	//	*OpenfeedMessage_MarketSnapshot
	//	*OpenfeedMessage_MarketUpdate
	//	*OpenfeedMessage_MarketStatus
	//	*OpenfeedMessage_EodCommoditySummary
	//	*OpenfeedMessage_InstrumentAction
	Data isOpenfeedMessage_Data `protobuf_oneof:"data"`
}

func (x *OpenfeedMessage) Reset() {
	*x = OpenfeedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenfeedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenfeedMessage) ProtoMessage() {}

func (x *OpenfeedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenfeedMessage.ProtoReflect.Descriptor instead.
func (*OpenfeedMessage) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{0}
}

func (x *OpenfeedMessage) GetSendingTime() int64 {
	if x != nil {
		return x.SendingTime
	}
	return 0
}

func (x *OpenfeedMessage) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *OpenfeedMessage) GetSyncSequence() int64 {
	if x != nil {
		return x.SyncSequence
	}
	return 0
}

func (x *OpenfeedMessage) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (m *OpenfeedMessage) GetData() isOpenfeedMessage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *OpenfeedMessage) GetChannelReset() *ChannelReset {
	if x, ok := x.GetData().(*OpenfeedMessage_ChannelReset); ok {
		return x.ChannelReset
	}
	return nil
}

func (x *OpenfeedMessage) GetHeartBeat() *HeartBeat {
	if x, ok := x.GetData().(*OpenfeedMessage_HeartBeat); ok {
		return x.HeartBeat
	}
	return nil
}

func (x *OpenfeedMessage) GetAdminMessage() *AdminMessage {
	if x, ok := x.GetData().(*OpenfeedMessage_AdminMessage); ok {
		return x.AdminMessage
	}
	return nil
}

func (x *OpenfeedMessage) GetInstrumentDefinition() *InstrumentDefinition {
	if x, ok := x.GetData().(*OpenfeedMessage_InstrumentDefinition); ok {
		return x.InstrumentDefinition
	}
	return nil
}

func (x *OpenfeedMessage) GetInstrumentGroupStatus() *InstrumentGroupStatus {
	if x, ok := x.GetData().(*OpenfeedMessage_InstrumentGroupStatus); ok {
		return x.InstrumentGroupStatus
	}
	return nil
}

func (x *OpenfeedMessage) GetMarketSnapshot() *MarketSnapshot {
	if x, ok := x.GetData().(*OpenfeedMessage_MarketSnapshot); ok {
		return x.MarketSnapshot
	}
	return nil
}

func (x *OpenfeedMessage) GetMarketUpdate() *MarketUpdate {
	if x, ok := x.GetData().(*OpenfeedMessage_MarketUpdate); ok {
		return x.MarketUpdate
	}
	return nil
}

func (x *OpenfeedMessage) GetMarketStatus() *MarketStatus {
	if x, ok := x.GetData().(*OpenfeedMessage_MarketStatus); ok {
		return x.MarketStatus
	}
	return nil
}

func (x *OpenfeedMessage) GetEodCommoditySummary() *EODCommoditySummary {
	if x, ok := x.GetData().(*OpenfeedMessage_EodCommoditySummary); ok {
		return x.EodCommoditySummary
	}
	return nil
}

func (x *OpenfeedMessage) GetInstrumentAction() *InstrumentAction {
	if x, ok := x.GetData().(*OpenfeedMessage_InstrumentAction); ok {
		return x.InstrumentAction
	}
	return nil
}

type isOpenfeedMessage_Data interface {
	isOpenfeedMessage_Data()
}

type OpenfeedMessage_ChannelReset struct {
	ChannelReset *ChannelReset `protobuf:"bytes,10,opt,name=channelReset,proto3,oneof"`
}

type OpenfeedMessage_HeartBeat struct {
	HeartBeat *HeartBeat `protobuf:"bytes,11,opt,name=heartBeat,proto3,oneof"`
}

type OpenfeedMessage_AdminMessage struct {
	AdminMessage *AdminMessage `protobuf:"bytes,12,opt,name=adminMessage,proto3,oneof"`
}

type OpenfeedMessage_InstrumentDefinition struct {
	InstrumentDefinition *InstrumentDefinition `protobuf:"bytes,13,opt,name=instrumentDefinition,proto3,oneof"`
}

type OpenfeedMessage_InstrumentGroupStatus struct {
	InstrumentGroupStatus *InstrumentGroupStatus `protobuf:"bytes,14,opt,name=instrumentGroupStatus,proto3,oneof"`
}

type OpenfeedMessage_MarketSnapshot struct {
	MarketSnapshot *MarketSnapshot `protobuf:"bytes,15,opt,name=marketSnapshot,proto3,oneof"`
}

type OpenfeedMessage_MarketUpdate struct {
	MarketUpdate *MarketUpdate `protobuf:"bytes,16,opt,name=marketUpdate,proto3,oneof"`
}

type OpenfeedMessage_MarketStatus struct {
	MarketStatus *MarketStatus `protobuf:"bytes,17,opt,name=marketStatus,proto3,oneof"`
}

type OpenfeedMessage_EodCommoditySummary struct {
	EodCommoditySummary *EODCommoditySummary `protobuf:"bytes,18,opt,name=eodCommoditySummary,proto3,oneof"`
}

type OpenfeedMessage_InstrumentAction struct {
	InstrumentAction *InstrumentAction `protobuf:"bytes,19,opt,name=instrumentAction,proto3,oneof"`
}

func (*OpenfeedMessage_ChannelReset) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_HeartBeat) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_AdminMessage) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_InstrumentDefinition) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_InstrumentGroupStatus) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_MarketSnapshot) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_MarketUpdate) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_MarketStatus) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_EodCommoditySummary) isOpenfeedMessage_Data() {}

func (*OpenfeedMessage_InstrumentAction) isOpenfeedMessage_Data() {}

// Channel Reset
type ChannelReset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel         int32 `protobuf:"zigzag32,1,opt,name=channel,proto3" json:"channel,omitempty"`
	TransactionTime int64 `protobuf:"zigzag64,2,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
}

func (x *ChannelReset) Reset() {
	*x = ChannelReset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelReset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelReset) ProtoMessage() {}

func (x *ChannelReset) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelReset.ProtoReflect.Descriptor instead.
func (*ChannelReset) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelReset) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *ChannelReset) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

/// Heart Beat
type HeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// UTC timestamp of transaction, nano seconds since Unix epoch
	TransactionTime int64  `protobuf:"zigzag64,1,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	Status          string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Exchange        bool   `protobuf:"varint,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Channel         int32  `protobuf:"zigzag32,4,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *HeartBeat) Reset() {
	*x = HeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeat) ProtoMessage() {}

func (x *HeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeat.ProtoReflect.Descriptor instead.
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{2}
}

func (x *HeartBeat) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *HeartBeat) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HeartBeat) GetExchange() bool {
	if x != nil {
		return x.Exchange
	}
	return false
}

func (x *HeartBeat) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

// Administrative Message
type AdminMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Origination time = UTC timestamp nano seconds since Unix epoch
	OriginationTime int64               `protobuf:"zigzag64,1,opt,name=originationTime,proto3" json:"originationTime,omitempty"`
	Source          string              `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	LanguageCode    string              `protobuf:"bytes,3,opt,name=languageCode,proto3" json:"languageCode,omitempty"`
	HeadLine        string              `protobuf:"bytes,4,opt,name=headLine,proto3" json:"headLine,omitempty"`
	Text            string              `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	Status          AdminMessage_Status `protobuf:"varint,6,opt,name=status,proto3,enum=org.openfeed.AdminMessage_Status" json:"status,omitempty"`
	Channel         int32               `protobuf:"zigzag32,7,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *AdminMessage) Reset() {
	*x = AdminMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminMessage) ProtoMessage() {}

func (x *AdminMessage) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminMessage.ProtoReflect.Descriptor instead.
func (*AdminMessage) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{3}
}

func (x *AdminMessage) GetOriginationTime() int64 {
	if x != nil {
		return x.OriginationTime
	}
	return 0
}

func (x *AdminMessage) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AdminMessage) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *AdminMessage) GetHeadLine() string {
	if x != nil {
		return x.HeadLine
	}
	return ""
}

func (x *AdminMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AdminMessage) GetStatus() AdminMessage_Status {
	if x != nil {
		return x.Status
	}
	return AdminMessage_OK
}

func (x *AdminMessage) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

/// Instrument Group Status
type InstrumentGroupStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// UTC Timestamp of transaction, nano seconds since Unix epoch
	TransactionTime   int64                   `protobuf:"zigzag64,1,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	InstrumentGroupId string                  `protobuf:"bytes,2,opt,name=instrumentGroupId,proto3" json:"instrumentGroupId,omitempty"`
	TradingStatus     InstrumentTradingStatus `protobuf:"varint,3,opt,name=tradingStatus,proto3,enum=org.openfeed.InstrumentTradingStatus" json:"tradingStatus,omitempty"`
	TradeDate         int32                   `protobuf:"zigzag32,4,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	Channel           int32                   `protobuf:"zigzag32,5,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *InstrumentGroupStatus) Reset() {
	*x = InstrumentGroupStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentGroupStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentGroupStatus) ProtoMessage() {}

func (x *InstrumentGroupStatus) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentGroupStatus.ProtoReflect.Descriptor instead.
func (*InstrumentGroupStatus) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{4}
}

func (x *InstrumentGroupStatus) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *InstrumentGroupStatus) GetInstrumentGroupId() string {
	if x != nil {
		return x.InstrumentGroupId
	}
	return ""
}

func (x *InstrumentGroupStatus) GetTradingStatus() InstrumentTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return InstrumentTradingStatus_UNKNOWN_TRADING_STATUS
}

func (x *InstrumentGroupStatus) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *InstrumentGroupStatus) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

/// Market Status
type MarketStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// UTC Timestamp of transaction, nano seconds since Unix epoch
	TransactionTime  int64            `protobuf:"zigzag64,1,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	Channel          int32            `protobuf:"zigzag32,2,opt,name=channel,proto3" json:"channel,omitempty"`
	MarketWideStatus MarketWideStatus `protobuf:"varint,3,opt,name=marketWideStatus,proto3,enum=org.openfeed.MarketWideStatus" json:"marketWideStatus,omitempty"`
}

func (x *MarketStatus) Reset() {
	*x = MarketStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketStatus) ProtoMessage() {}

func (x *MarketStatus) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketStatus.ProtoReflect.Descriptor instead.
func (*MarketStatus) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{5}
}

func (x *MarketStatus) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *MarketStatus) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *MarketStatus) GetMarketWideStatus() MarketWideStatus {
	if x != nil {
		return x.MarketWideStatus
	}
	return MarketWideStatus_STATUS_UNKNOWN
}

/// EOD commodity summary. Used to represent consolidated total values for the group of contracts. Total volume for
/// all ES futures, for example.
type EODCommoditySummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Trade date in the format YYYYMMDD
	TradeDate int32 `protobuf:"zigzag32,1,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Contract root, for example ES.
	ContractRoot string `protobuf:"bytes,2,opt,name=contractRoot,proto3" json:"contractRoot,omitempty"`
	/// Consolidated volume.
	ConsolidatedVolume int64 `protobuf:"zigzag64,3,opt,name=consolidatedVolume,proto3" json:"consolidatedVolume,omitempty"`
	// Consolidated open interest.
	ConsolidatedOpenInterest int64 `protobuf:"zigzag64,4,opt,name=consolidatedOpenInterest,proto3" json:"consolidatedOpenInterest,omitempty"`
	/// For internal use only.   Ignore
	AuxiliaryData []byte `protobuf:"bytes,99,opt,name=auxiliaryData,proto3" json:"auxiliaryData,omitempty"`
}

func (x *EODCommoditySummary) Reset() {
	*x = EODCommoditySummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EODCommoditySummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EODCommoditySummary) ProtoMessage() {}

func (x *EODCommoditySummary) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EODCommoditySummary.ProtoReflect.Descriptor instead.
func (*EODCommoditySummary) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{6}
}

func (x *EODCommoditySummary) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *EODCommoditySummary) GetContractRoot() string {
	if x != nil {
		return x.ContractRoot
	}
	return ""
}

func (x *EODCommoditySummary) GetConsolidatedVolume() int64 {
	if x != nil {
		return x.ConsolidatedVolume
	}
	return 0
}

func (x *EODCommoditySummary) GetConsolidatedOpenInterest() int64 {
	if x != nil {
		return x.ConsolidatedOpenInterest
	}
	return 0
}

func (x *EODCommoditySummary) GetAuxiliaryData() []byte {
	if x != nil {
		return x.AuxiliaryData
	}
	return nil
}

/// Session used in snapshot.
type MarketSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,4,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Most recent opening price
	Open *Open `protobuf:"bytes,30,opt,name=open,proto3" json:"open,omitempty"`
	/// High price for the trading session
	High *High `protobuf:"bytes,31,opt,name=high,proto3" json:"high,omitempty"`
	/// Low price for the trading session
	Low *Low `protobuf:"bytes,32,opt,name=low,proto3" json:"low,omitempty"`
	/// Most recent traded price and quantity
	Last *Last `protobuf:"bytes,35,opt,name=last,proto3" json:"last,omitempty"`
	/// Total traded volume
	Volume *Volume `protobuf:"bytes,38,opt,name=volume,proto3" json:"volume,omitempty"`
	/// Most recent settlement price
	Settlement *Settlement `protobuf:"bytes,39,opt,name=settlement,proto3" json:"settlement,omitempty"`
	/// Most recent settlement price
	PrevSettlement *Settlement `protobuf:"bytes,44,opt,name=prevSettlement,proto3" json:"prevSettlement,omitempty"`
	/// Most recent open interest
	OpenInterest *OpenInterest `protobuf:"bytes,40,opt,name=openInterest,proto3" json:"openInterest,omitempty"`
	/// Number of trades
	NumberOfTrades *NumberOfTrades `protobuf:"bytes,41,opt,name=numberOfTrades,proto3" json:"numberOfTrades,omitempty"`
	/// Monetary value
	MonetaryValue *MonetaryValue `protobuf:"bytes,42,opt,name=monetaryValue,proto3" json:"monetaryValue,omitempty"`
	// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,43,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
}

func (x *MarketSession) Reset() {
	*x = MarketSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSession) ProtoMessage() {}

func (x *MarketSession) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSession.ProtoReflect.Descriptor instead.
func (*MarketSession) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{7}
}

func (x *MarketSession) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *MarketSession) GetOpen() *Open {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *MarketSession) GetHigh() *High {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *MarketSession) GetLow() *Low {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *MarketSession) GetLast() *Last {
	if x != nil {
		return x.Last
	}
	return nil
}

func (x *MarketSession) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *MarketSession) GetSettlement() *Settlement {
	if x != nil {
		return x.Settlement
	}
	return nil
}

func (x *MarketSession) GetPrevSettlement() *Settlement {
	if x != nil {
		return x.PrevSettlement
	}
	return nil
}

func (x *MarketSession) GetOpenInterest() *OpenInterest {
	if x != nil {
		return x.OpenInterest
	}
	return nil
}

func (x *MarketSession) GetNumberOfTrades() *NumberOfTrades {
	if x != nil {
		return x.NumberOfTrades
	}
	return nil
}

func (x *MarketSession) GetMonetaryValue() *MonetaryValue {
	if x != nil {
		return x.MonetaryValue
	}
	return nil
}

func (x *MarketSession) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

/// Snapshot for a market
type MarketSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Unique id identifying the market
	MarketId int64 `protobuf:"zigzag64,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	// UTC Timestamp of transaction, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,2,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	// Instrument level sequence number
	MarketSequence int64 `protobuf:"varint,3,opt,name=marketSequence,proto3" json:"marketSequence,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,4,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// A snapshot with market depth may exceed the maximum message size.
	//  In that case, the snapshot will be broken up across multiple
	//  snapshot messages.
	TotalChunks  int32 `protobuf:"zigzag32,5,opt,name=totalChunks,proto3" json:"totalChunks,omitempty"`
	CurrentChunk int32 `protobuf:"zigzag32,6,opt,name=currentChunk,proto3" json:"currentChunk,omitempty"`
	// Optional symbol identifier
	Symbol string `protobuf:"bytes,7,opt,name=symbol,proto3" json:"symbol,omitempty"`
	/// Divide prices by this value to get real price values.  Optional, use value
	/// from InstrumentDefinition if not set.
	PriceDenominator int32 `protobuf:"zigzag32,8,opt,name=priceDenominator,proto3" json:"priceDenominator,omitempty"`
	//
	Service Service `protobuf:"varint,9,opt,name=service,proto3,enum=org.openfeed.Service" json:"service,omitempty"`
	//
	InstrumentStatus *InstrumentStatus `protobuf:"bytes,10,opt,name=instrumentStatus,proto3" json:"instrumentStatus,omitempty"`
	// Best Bid Offer
	Bbo *BestBidOffer `protobuf:"bytes,11,opt,name=bbo,proto3" json:"bbo,omitempty"`
	// Index Value
	Index *IndexValue `protobuf:"bytes,12,opt,name=index,proto3" json:"index,omitempty"`
	// Price Level Book
	PriceLevels []*AddPriceLevel `protobuf:"bytes,13,rep,name=priceLevels,proto3" json:"priceLevels,omitempty"`
	// Order Book
	Orders []*AddOrder `protobuf:"bytes,14,rep,name=orders,proto3" json:"orders,omitempty"`
	News   *News       `protobuf:"bytes,15,opt,name=news,proto3" json:"news,omitempty"`
	/// Most recent opening price
	Open *Open `protobuf:"bytes,30,opt,name=open,proto3" json:"open,omitempty"`
	/// High price for the trading session
	High *High `protobuf:"bytes,31,opt,name=high,proto3" json:"high,omitempty"`
	/// Low price for the trading session
	Low *Low `protobuf:"bytes,32,opt,name=low,proto3" json:"low,omitempty"`
	/// Most recent closing price
	Close *Close `protobuf:"bytes,33,opt,name=close,proto3" json:"close,omitempty"`
	/// Previous closing price
	PrevClose *PrevClose `protobuf:"bytes,34,opt,name=prevClose,proto3" json:"prevClose,omitempty"`
	/// Most recent traded price and quantity
	Last *Last `protobuf:"bytes,35,opt,name=last,proto3" json:"last,omitempty"`
	/// Year high price
	YearHigh *YearHigh `protobuf:"bytes,36,opt,name=yearHigh,proto3" json:"yearHigh,omitempty"`
	/// Year low price
	YearLow *YearLow `protobuf:"bytes,37,opt,name=yearLow,proto3" json:"yearLow,omitempty"`
	/// Total traded volume
	Volume *Volume `protobuf:"bytes,38,opt,name=volume,proto3" json:"volume,omitempty"`
	/// Most recent settlement price
	Settlement *Settlement `protobuf:"bytes,39,opt,name=settlement,proto3" json:"settlement,omitempty"`
	/// Most recent open interest
	OpenInterest *OpenInterest `protobuf:"bytes,40,opt,name=openInterest,proto3" json:"openInterest,omitempty"`
	/// Most recent volume weighted average price
	Vwap                         *Vwap                         `protobuf:"bytes,41,opt,name=vwap,proto3" json:"vwap,omitempty"`
	DividendsIncomeDistributions *DividendsIncomeDistributions `protobuf:"bytes,42,opt,name=dividendsIncomeDistributions,proto3" json:"dividendsIncomeDistributions,omitempty"`
	NumberOfTrades               *NumberOfTrades               `protobuf:"bytes,43,opt,name=numberOfTrades,proto3" json:"numberOfTrades,omitempty"`
	MonetaryValue                *MonetaryValue                `protobuf:"bytes,44,opt,name=monetaryValue,proto3" json:"monetaryValue,omitempty"`
	CapitalDistributions         *CapitalDistributions         `protobuf:"bytes,45,opt,name=capitalDistributions,proto3" json:"capitalDistributions,omitempty"`
	SharesOutstanding            *SharesOutstanding            `protobuf:"bytes,46,opt,name=sharesOutstanding,proto3" json:"sharesOutstanding,omitempty"`
	NetAssetValue                *NetAssetValue                `protobuf:"bytes,47,opt,name=netAssetValue,proto3" json:"netAssetValue,omitempty"`
	/// Previous session.
	PreviousSession *MarketSession `protobuf:"bytes,48,opt,name=previousSession,proto3" json:"previousSession,omitempty"`
	/// 'T' session.
	TSession *MarketSession `protobuf:"bytes,49,opt,name=tSession,proto3" json:"tSession,omitempty"`
	/// Volume at price. Used by the market state/ JERQ.
	VolumeAtPrice *VolumeAtPrice `protobuf:"bytes,50,opt,name=volumeAtPrice,proto3" json:"volumeAtPrice,omitempty"`
	HighRolling   *HighRolling   `protobuf:"bytes,51,opt,name=highRolling,proto3" json:"highRolling,omitempty"`
	LowRolling    *LowRolling    `protobuf:"bytes,52,opt,name=lowRolling,proto3" json:"lowRolling,omitempty"`
	/// 'Z' session. Includes all trades, even the ones that do not update Last.
	ZSession *MarketSession `protobuf:"bytes,53,opt,name=zSession,proto3" json:"zSession,omitempty"`
}

func (x *MarketSnapshot) Reset() {
	*x = MarketSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSnapshot) ProtoMessage() {}

func (x *MarketSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSnapshot.ProtoReflect.Descriptor instead.
func (*MarketSnapshot) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{8}
}

func (x *MarketSnapshot) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *MarketSnapshot) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *MarketSnapshot) GetMarketSequence() int64 {
	if x != nil {
		return x.MarketSequence
	}
	return 0
}

func (x *MarketSnapshot) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *MarketSnapshot) GetTotalChunks() int32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

func (x *MarketSnapshot) GetCurrentChunk() int32 {
	if x != nil {
		return x.CurrentChunk
	}
	return 0
}

func (x *MarketSnapshot) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketSnapshot) GetPriceDenominator() int32 {
	if x != nil {
		return x.PriceDenominator
	}
	return 0
}

func (x *MarketSnapshot) GetService() Service {
	if x != nil {
		return x.Service
	}
	return Service_UNKNOWN_SERVICE
}

func (x *MarketSnapshot) GetInstrumentStatus() *InstrumentStatus {
	if x != nil {
		return x.InstrumentStatus
	}
	return nil
}

func (x *MarketSnapshot) GetBbo() *BestBidOffer {
	if x != nil {
		return x.Bbo
	}
	return nil
}

func (x *MarketSnapshot) GetIndex() *IndexValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *MarketSnapshot) GetPriceLevels() []*AddPriceLevel {
	if x != nil {
		return x.PriceLevels
	}
	return nil
}

func (x *MarketSnapshot) GetOrders() []*AddOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *MarketSnapshot) GetNews() *News {
	if x != nil {
		return x.News
	}
	return nil
}

func (x *MarketSnapshot) GetOpen() *Open {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *MarketSnapshot) GetHigh() *High {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *MarketSnapshot) GetLow() *Low {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *MarketSnapshot) GetClose() *Close {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *MarketSnapshot) GetPrevClose() *PrevClose {
	if x != nil {
		return x.PrevClose
	}
	return nil
}

func (x *MarketSnapshot) GetLast() *Last {
	if x != nil {
		return x.Last
	}
	return nil
}

func (x *MarketSnapshot) GetYearHigh() *YearHigh {
	if x != nil {
		return x.YearHigh
	}
	return nil
}

func (x *MarketSnapshot) GetYearLow() *YearLow {
	if x != nil {
		return x.YearLow
	}
	return nil
}

func (x *MarketSnapshot) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *MarketSnapshot) GetSettlement() *Settlement {
	if x != nil {
		return x.Settlement
	}
	return nil
}

func (x *MarketSnapshot) GetOpenInterest() *OpenInterest {
	if x != nil {
		return x.OpenInterest
	}
	return nil
}

func (x *MarketSnapshot) GetVwap() *Vwap {
	if x != nil {
		return x.Vwap
	}
	return nil
}

func (x *MarketSnapshot) GetDividendsIncomeDistributions() *DividendsIncomeDistributions {
	if x != nil {
		return x.DividendsIncomeDistributions
	}
	return nil
}

func (x *MarketSnapshot) GetNumberOfTrades() *NumberOfTrades {
	if x != nil {
		return x.NumberOfTrades
	}
	return nil
}

func (x *MarketSnapshot) GetMonetaryValue() *MonetaryValue {
	if x != nil {
		return x.MonetaryValue
	}
	return nil
}

func (x *MarketSnapshot) GetCapitalDistributions() *CapitalDistributions {
	if x != nil {
		return x.CapitalDistributions
	}
	return nil
}

func (x *MarketSnapshot) GetSharesOutstanding() *SharesOutstanding {
	if x != nil {
		return x.SharesOutstanding
	}
	return nil
}

func (x *MarketSnapshot) GetNetAssetValue() *NetAssetValue {
	if x != nil {
		return x.NetAssetValue
	}
	return nil
}

func (x *MarketSnapshot) GetPreviousSession() *MarketSession {
	if x != nil {
		return x.PreviousSession
	}
	return nil
}

func (x *MarketSnapshot) GetTSession() *MarketSession {
	if x != nil {
		return x.TSession
	}
	return nil
}

func (x *MarketSnapshot) GetVolumeAtPrice() *VolumeAtPrice {
	if x != nil {
		return x.VolumeAtPrice
	}
	return nil
}

func (x *MarketSnapshot) GetHighRolling() *HighRolling {
	if x != nil {
		return x.HighRolling
	}
	return nil
}

func (x *MarketSnapshot) GetLowRolling() *LowRolling {
	if x != nil {
		return x.LowRolling
	}
	return nil
}

func (x *MarketSnapshot) GetZSession() *MarketSession {
	if x != nil {
		return x.ZSession
	}
	return nil
}

// Used by market state to return snapshot.
type MarketSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         SnapshotRequestResult `protobuf:"varint,1,opt,name=result,proto3,enum=org.openfeed.SnapshotRequestResult" json:"result,omitempty"`
	Message        string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	MarketSnapshot *MarketSnapshot       `protobuf:"bytes,3,opt,name=marketSnapshot,proto3" json:"marketSnapshot,omitempty"`
}

func (x *MarketSnapshotResponse) Reset() {
	*x = MarketSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSnapshotResponse) ProtoMessage() {}

func (x *MarketSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSnapshotResponse.ProtoReflect.Descriptor instead.
func (*MarketSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{9}
}

func (x *MarketSnapshotResponse) GetResult() SnapshotRequestResult {
	if x != nil {
		return x.Result
	}
	return SnapshotRequestResult_SNAPSHOT_REQUEST_UNKNOWN_RESULT
}

func (x *MarketSnapshotResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MarketSnapshotResponse) GetMarketSnapshot() *MarketSnapshot {
	if x != nil {
		return x.MarketSnapshot
	}
	return nil
}

//
// Market Update for an instrument
//
type MarketUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Unique id identifying the market
	MarketId int64 `protobuf:"zigzag64,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	// Optional symbol identifier
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	/// UTC Timestamp of transaction, nano seconds since Unix epoch
	/// This is usually the execution venue timestamp.
	TransactionTime int64 `protobuf:"zigzag64,3,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Distribution time in nano seconds since epoch.
	DistributionTime int64 `protobuf:"zigzag64,4,opt,name=distributionTime,proto3" json:"distributionTime,omitempty"`
	/// Market level sequencing number
	MarketSequence int64 `protobuf:"zigzag64,5,opt,name=marketSequence,proto3" json:"marketSequence,omitempty"`
	/// Data source sequence number
	SourceSequence int64 `protobuf:"zigzag64,6,opt,name=sourceSequence,proto3" json:"sourceSequence,omitempty"`
	// Market participant/originator
	OriginatorId []byte `protobuf:"bytes,7,opt,name=originatorId,proto3" json:"originatorId,omitempty"`
	/// Divide prices by this value to get real price values.  Optional, use value
	/// from InstrumentDefinition if not set.
	PriceDenominator int32 `protobuf:"zigzag32,9,opt,name=priceDenominator,proto3" json:"priceDenominator,omitempty"`
	// Feed specific context data set as required.
	Context *Context `protobuf:"bytes,10,opt,name=context,proto3" json:"context,omitempty"`
	/// Current session. This is used to 'enhance' updates from the translator in the Market State
	Session *MarketSession `protobuf:"bytes,11,opt,name=session,proto3" json:"session,omitempty"`
	/// 'T' session. This is used to 'enhance' updates from the translator in the Market State
	TSession *MarketSession `protobuf:"bytes,12,opt,name=tSession,proto3" json:"tSession,omitempty"`
	/// Previous session. This is used to 'enhance' updates from the translator in the Market State
	PreviousSession *MarketSession `protobuf:"bytes,13,opt,name=previousSession,proto3" json:"previousSession,omitempty"`
	/// True if message applies to regional/participant member
	Regional bool `protobuf:"varint,14,opt,name=regional,proto3" json:"regional,omitempty"`
	/// 'Z' session. Includes all trades, even the ones that do not update Last.
	ZSession *MarketSession `protobuf:"bytes,15,opt,name=zSession,proto3" json:"zSession,omitempty"`
	// Types that are assignable to Data:
	//	*MarketUpdate_News
	//	*MarketUpdate_ClearBook
	//	*MarketUpdate_InstrumentStatus
	//	*MarketUpdate_Bbo
	//	*MarketUpdate_DepthPriceLevel
	//	*MarketUpdate_DepthOrder
	//	*MarketUpdate_Index
	//	*MarketUpdate_Trades
	//	*MarketUpdate_Open
	//	*MarketUpdate_High
	//	*MarketUpdate_Low
	//	*MarketUpdate_Close
	//	*MarketUpdate_PrevClose
	//	*MarketUpdate_Last
	//	*MarketUpdate_YearHigh
	//	*MarketUpdate_YearLow
	//	*MarketUpdate_Volume
	//	*MarketUpdate_Settlement
	//	*MarketUpdate_OpenInterest
	//	*MarketUpdate_Vwap
	//	*MarketUpdate_DividendsIncomeDistributions
	//	*MarketUpdate_NumberOfTrades
	//	*MarketUpdate_MonetaryValue
	//	*MarketUpdate_CapitalDistributions
	//	*MarketUpdate_SharesOutstanding
	//	*MarketUpdate_NetAssetValue
	//	*MarketUpdate_MarketSummary
	//	*MarketUpdate_HighRolling
	//	*MarketUpdate_LowRolling
	Data isMarketUpdate_Data `protobuf_oneof:"data"`
}

func (x *MarketUpdate) Reset() {
	*x = MarketUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketUpdate) ProtoMessage() {}

func (x *MarketUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketUpdate.ProtoReflect.Descriptor instead.
func (*MarketUpdate) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{10}
}

func (x *MarketUpdate) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *MarketUpdate) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketUpdate) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *MarketUpdate) GetDistributionTime() int64 {
	if x != nil {
		return x.DistributionTime
	}
	return 0
}

func (x *MarketUpdate) GetMarketSequence() int64 {
	if x != nil {
		return x.MarketSequence
	}
	return 0
}

func (x *MarketUpdate) GetSourceSequence() int64 {
	if x != nil {
		return x.SourceSequence
	}
	return 0
}

func (x *MarketUpdate) GetOriginatorId() []byte {
	if x != nil {
		return x.OriginatorId
	}
	return nil
}

func (x *MarketUpdate) GetPriceDenominator() int32 {
	if x != nil {
		return x.PriceDenominator
	}
	return 0
}

func (x *MarketUpdate) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *MarketUpdate) GetSession() *MarketSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *MarketUpdate) GetTSession() *MarketSession {
	if x != nil {
		return x.TSession
	}
	return nil
}

func (x *MarketUpdate) GetPreviousSession() *MarketSession {
	if x != nil {
		return x.PreviousSession
	}
	return nil
}

func (x *MarketUpdate) GetRegional() bool {
	if x != nil {
		return x.Regional
	}
	return false
}

func (x *MarketUpdate) GetZSession() *MarketSession {
	if x != nil {
		return x.ZSession
	}
	return nil
}

func (m *MarketUpdate) GetData() isMarketUpdate_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *MarketUpdate) GetNews() *News {
	if x, ok := x.GetData().(*MarketUpdate_News); ok {
		return x.News
	}
	return nil
}

func (x *MarketUpdate) GetClearBook() *ClearBook {
	if x, ok := x.GetData().(*MarketUpdate_ClearBook); ok {
		return x.ClearBook
	}
	return nil
}

func (x *MarketUpdate) GetInstrumentStatus() *InstrumentStatus {
	if x, ok := x.GetData().(*MarketUpdate_InstrumentStatus); ok {
		return x.InstrumentStatus
	}
	return nil
}

func (x *MarketUpdate) GetBbo() *BestBidOffer {
	if x, ok := x.GetData().(*MarketUpdate_Bbo); ok {
		return x.Bbo
	}
	return nil
}

func (x *MarketUpdate) GetDepthPriceLevel() *DepthPriceLevel {
	if x, ok := x.GetData().(*MarketUpdate_DepthPriceLevel); ok {
		return x.DepthPriceLevel
	}
	return nil
}

func (x *MarketUpdate) GetDepthOrder() *DepthOrder {
	if x, ok := x.GetData().(*MarketUpdate_DepthOrder); ok {
		return x.DepthOrder
	}
	return nil
}

func (x *MarketUpdate) GetIndex() *IndexValue {
	if x, ok := x.GetData().(*MarketUpdate_Index); ok {
		return x.Index
	}
	return nil
}

func (x *MarketUpdate) GetTrades() *Trades {
	if x, ok := x.GetData().(*MarketUpdate_Trades); ok {
		return x.Trades
	}
	return nil
}

func (x *MarketUpdate) GetOpen() *Open {
	if x, ok := x.GetData().(*MarketUpdate_Open); ok {
		return x.Open
	}
	return nil
}

func (x *MarketUpdate) GetHigh() *High {
	if x, ok := x.GetData().(*MarketUpdate_High); ok {
		return x.High
	}
	return nil
}

func (x *MarketUpdate) GetLow() *Low {
	if x, ok := x.GetData().(*MarketUpdate_Low); ok {
		return x.Low
	}
	return nil
}

func (x *MarketUpdate) GetClose() *Close {
	if x, ok := x.GetData().(*MarketUpdate_Close); ok {
		return x.Close
	}
	return nil
}

func (x *MarketUpdate) GetPrevClose() *PrevClose {
	if x, ok := x.GetData().(*MarketUpdate_PrevClose); ok {
		return x.PrevClose
	}
	return nil
}

func (x *MarketUpdate) GetLast() *Last {
	if x, ok := x.GetData().(*MarketUpdate_Last); ok {
		return x.Last
	}
	return nil
}

func (x *MarketUpdate) GetYearHigh() *YearHigh {
	if x, ok := x.GetData().(*MarketUpdate_YearHigh); ok {
		return x.YearHigh
	}
	return nil
}

func (x *MarketUpdate) GetYearLow() *YearLow {
	if x, ok := x.GetData().(*MarketUpdate_YearLow); ok {
		return x.YearLow
	}
	return nil
}

func (x *MarketUpdate) GetVolume() *Volume {
	if x, ok := x.GetData().(*MarketUpdate_Volume); ok {
		return x.Volume
	}
	return nil
}

func (x *MarketUpdate) GetSettlement() *Settlement {
	if x, ok := x.GetData().(*MarketUpdate_Settlement); ok {
		return x.Settlement
	}
	return nil
}

func (x *MarketUpdate) GetOpenInterest() *OpenInterest {
	if x, ok := x.GetData().(*MarketUpdate_OpenInterest); ok {
		return x.OpenInterest
	}
	return nil
}

func (x *MarketUpdate) GetVwap() *Vwap {
	if x, ok := x.GetData().(*MarketUpdate_Vwap); ok {
		return x.Vwap
	}
	return nil
}

func (x *MarketUpdate) GetDividendsIncomeDistributions() *DividendsIncomeDistributions {
	if x, ok := x.GetData().(*MarketUpdate_DividendsIncomeDistributions); ok {
		return x.DividendsIncomeDistributions
	}
	return nil
}

func (x *MarketUpdate) GetNumberOfTrades() *NumberOfTrades {
	if x, ok := x.GetData().(*MarketUpdate_NumberOfTrades); ok {
		return x.NumberOfTrades
	}
	return nil
}

func (x *MarketUpdate) GetMonetaryValue() *MonetaryValue {
	if x, ok := x.GetData().(*MarketUpdate_MonetaryValue); ok {
		return x.MonetaryValue
	}
	return nil
}

func (x *MarketUpdate) GetCapitalDistributions() *CapitalDistributions {
	if x, ok := x.GetData().(*MarketUpdate_CapitalDistributions); ok {
		return x.CapitalDistributions
	}
	return nil
}

func (x *MarketUpdate) GetSharesOutstanding() *SharesOutstanding {
	if x, ok := x.GetData().(*MarketUpdate_SharesOutstanding); ok {
		return x.SharesOutstanding
	}
	return nil
}

func (x *MarketUpdate) GetNetAssetValue() *NetAssetValue {
	if x, ok := x.GetData().(*MarketUpdate_NetAssetValue); ok {
		return x.NetAssetValue
	}
	return nil
}

func (x *MarketUpdate) GetMarketSummary() *MarketSummary {
	if x, ok := x.GetData().(*MarketUpdate_MarketSummary); ok {
		return x.MarketSummary
	}
	return nil
}

func (x *MarketUpdate) GetHighRolling() *HighRolling {
	if x, ok := x.GetData().(*MarketUpdate_HighRolling); ok {
		return x.HighRolling
	}
	return nil
}

func (x *MarketUpdate) GetLowRolling() *LowRolling {
	if x, ok := x.GetData().(*MarketUpdate_LowRolling); ok {
		return x.LowRolling
	}
	return nil
}

type isMarketUpdate_Data interface {
	isMarketUpdate_Data()
}

type MarketUpdate_News struct {
	News *News `protobuf:"bytes,20,opt,name=news,proto3,oneof"`
}

type MarketUpdate_ClearBook struct {
	ClearBook *ClearBook `protobuf:"bytes,21,opt,name=clearBook,proto3,oneof"`
}

type MarketUpdate_InstrumentStatus struct {
	InstrumentStatus *InstrumentStatus `protobuf:"bytes,22,opt,name=instrumentStatus,proto3,oneof"`
}

type MarketUpdate_Bbo struct {
	Bbo *BestBidOffer `protobuf:"bytes,23,opt,name=bbo,proto3,oneof"`
}

type MarketUpdate_DepthPriceLevel struct {
	DepthPriceLevel *DepthPriceLevel `protobuf:"bytes,24,opt,name=depthPriceLevel,proto3,oneof"`
}

type MarketUpdate_DepthOrder struct {
	DepthOrder *DepthOrder `protobuf:"bytes,25,opt,name=depthOrder,proto3,oneof"`
}

type MarketUpdate_Index struct {
	Index *IndexValue `protobuf:"bytes,26,opt,name=index,proto3,oneof"`
}

type MarketUpdate_Trades struct {
	Trades *Trades `protobuf:"bytes,27,opt,name=trades,proto3,oneof"`
}

type MarketUpdate_Open struct {
	Open *Open `protobuf:"bytes,28,opt,name=open,proto3,oneof"`
}

type MarketUpdate_High struct {
	High *High `protobuf:"bytes,29,opt,name=high,proto3,oneof"`
}

type MarketUpdate_Low struct {
	Low *Low `protobuf:"bytes,30,opt,name=low,proto3,oneof"`
}

type MarketUpdate_Close struct {
	Close *Close `protobuf:"bytes,31,opt,name=close,proto3,oneof"`
}

type MarketUpdate_PrevClose struct {
	PrevClose *PrevClose `protobuf:"bytes,32,opt,name=prevClose,proto3,oneof"`
}

type MarketUpdate_Last struct {
	Last *Last `protobuf:"bytes,33,opt,name=last,proto3,oneof"`
}

type MarketUpdate_YearHigh struct {
	YearHigh *YearHigh `protobuf:"bytes,34,opt,name=yearHigh,proto3,oneof"`
}

type MarketUpdate_YearLow struct {
	YearLow *YearLow `protobuf:"bytes,35,opt,name=yearLow,proto3,oneof"`
}

type MarketUpdate_Volume struct {
	Volume *Volume `protobuf:"bytes,36,opt,name=volume,proto3,oneof"`
}

type MarketUpdate_Settlement struct {
	Settlement *Settlement `protobuf:"bytes,37,opt,name=settlement,proto3,oneof"`
}

type MarketUpdate_OpenInterest struct {
	OpenInterest *OpenInterest `protobuf:"bytes,38,opt,name=openInterest,proto3,oneof"`
}

type MarketUpdate_Vwap struct {
	Vwap *Vwap `protobuf:"bytes,39,opt,name=vwap,proto3,oneof"`
}

type MarketUpdate_DividendsIncomeDistributions struct {
	DividendsIncomeDistributions *DividendsIncomeDistributions `protobuf:"bytes,40,opt,name=dividendsIncomeDistributions,proto3,oneof"`
}

type MarketUpdate_NumberOfTrades struct {
	NumberOfTrades *NumberOfTrades `protobuf:"bytes,41,opt,name=numberOfTrades,proto3,oneof"`
}

type MarketUpdate_MonetaryValue struct {
	MonetaryValue *MonetaryValue `protobuf:"bytes,42,opt,name=monetaryValue,proto3,oneof"`
}

type MarketUpdate_CapitalDistributions struct {
	CapitalDistributions *CapitalDistributions `protobuf:"bytes,43,opt,name=capitalDistributions,proto3,oneof"`
}

type MarketUpdate_SharesOutstanding struct {
	SharesOutstanding *SharesOutstanding `protobuf:"bytes,44,opt,name=sharesOutstanding,proto3,oneof"`
}

type MarketUpdate_NetAssetValue struct {
	NetAssetValue *NetAssetValue `protobuf:"bytes,45,opt,name=netAssetValue,proto3,oneof"`
}

type MarketUpdate_MarketSummary struct {
	MarketSummary *MarketSummary `protobuf:"bytes,46,opt,name=marketSummary,proto3,oneof"`
}

type MarketUpdate_HighRolling struct {
	HighRolling *HighRolling `protobuf:"bytes,47,opt,name=highRolling,proto3,oneof"`
}

type MarketUpdate_LowRolling struct {
	LowRolling *LowRolling `protobuf:"bytes,48,opt,name=lowRolling,proto3,oneof"`
}

func (*MarketUpdate_News) isMarketUpdate_Data() {}

func (*MarketUpdate_ClearBook) isMarketUpdate_Data() {}

func (*MarketUpdate_InstrumentStatus) isMarketUpdate_Data() {}

func (*MarketUpdate_Bbo) isMarketUpdate_Data() {}

func (*MarketUpdate_DepthPriceLevel) isMarketUpdate_Data() {}

func (*MarketUpdate_DepthOrder) isMarketUpdate_Data() {}

func (*MarketUpdate_Index) isMarketUpdate_Data() {}

func (*MarketUpdate_Trades) isMarketUpdate_Data() {}

func (*MarketUpdate_Open) isMarketUpdate_Data() {}

func (*MarketUpdate_High) isMarketUpdate_Data() {}

func (*MarketUpdate_Low) isMarketUpdate_Data() {}

func (*MarketUpdate_Close) isMarketUpdate_Data() {}

func (*MarketUpdate_PrevClose) isMarketUpdate_Data() {}

func (*MarketUpdate_Last) isMarketUpdate_Data() {}

func (*MarketUpdate_YearHigh) isMarketUpdate_Data() {}

func (*MarketUpdate_YearLow) isMarketUpdate_Data() {}

func (*MarketUpdate_Volume) isMarketUpdate_Data() {}

func (*MarketUpdate_Settlement) isMarketUpdate_Data() {}

func (*MarketUpdate_OpenInterest) isMarketUpdate_Data() {}

func (*MarketUpdate_Vwap) isMarketUpdate_Data() {}

func (*MarketUpdate_DividendsIncomeDistributions) isMarketUpdate_Data() {}

func (*MarketUpdate_NumberOfTrades) isMarketUpdate_Data() {}

func (*MarketUpdate_MonetaryValue) isMarketUpdate_Data() {}

func (*MarketUpdate_CapitalDistributions) isMarketUpdate_Data() {}

func (*MarketUpdate_SharesOutstanding) isMarketUpdate_Data() {}

func (*MarketUpdate_NetAssetValue) isMarketUpdate_Data() {}

func (*MarketUpdate_MarketSummary) isMarketUpdate_Data() {}

func (*MarketUpdate_HighRolling) isMarketUpdate_Data() {}

func (*MarketUpdate_LowRolling) isMarketUpdate_Data() {}

/// Depth Price Level
type DepthPriceLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Levels []*DepthPriceLevel_Entry `protobuf:"bytes,1,rep,name=levels,proto3" json:"levels,omitempty"`
}

func (x *DepthPriceLevel) Reset() {
	*x = DepthPriceLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepthPriceLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepthPriceLevel) ProtoMessage() {}

func (x *DepthPriceLevel) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepthPriceLevel.ProtoReflect.Descriptor instead.
func (*DepthPriceLevel) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{11}
}

func (x *DepthPriceLevel) GetLevels() []*DepthPriceLevel_Entry {
	if x != nil {
		return x.Levels
	}
	return nil
}

/// Depth By Order
type DepthOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*DepthOrder_Entry `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *DepthOrder) Reset() {
	*x = DepthOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepthOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepthOrder) ProtoMessage() {}

func (x *DepthOrder) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepthOrder.ProtoReflect.Descriptor instead.
func (*DepthOrder) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{12}
}

func (x *DepthOrder) GetOrders() []*DepthOrder_Entry {
	if x != nil {
		return x.Orders
	}
	return nil
}

/// News or informational message
type News struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Origination time = UTC timestamp nano seconds since Unix epoch
	OriginationTime int64    `protobuf:"zigzag64,1,opt,name=originationTime,proto3" json:"originationTime,omitempty"`
	Source          string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	LanguageCode    string   `protobuf:"bytes,3,opt,name=languageCode,proto3" json:"languageCode,omitempty"`
	HeadLine        string   `protobuf:"bytes,4,opt,name=headLine,proto3" json:"headLine,omitempty"`
	Text            string   `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	Symbols         []string `protobuf:"bytes,6,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *News) Reset() {
	*x = News{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *News) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*News) ProtoMessage() {}

func (x *News) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use News.ProtoReflect.Descriptor instead.
func (*News) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{13}
}

func (x *News) GetOriginationTime() int64 {
	if x != nil {
		return x.OriginationTime
	}
	return 0
}

func (x *News) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *News) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *News) GetHeadLine() string {
	if x != nil {
		return x.HeadLine
	}
	return ""
}

func (x *News) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *News) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

/// Clear all data from the order books that are configured for this market.
type ClearBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserved        int32 `protobuf:"zigzag32,1,opt,name=reserved,proto3" json:"reserved,omitempty"`
	TransactionTime int64 `protobuf:"zigzag64,2,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
}

func (x *ClearBook) Reset() {
	*x = ClearBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearBook) ProtoMessage() {}

func (x *ClearBook) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearBook.ProtoReflect.Descriptor instead.
func (*ClearBook) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{14}
}

func (x *ClearBook) GetReserved() int32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *ClearBook) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

//
// Instrument Status
//
type InstrumentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64                   `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	TradingStatus   InstrumentTradingStatus `protobuf:"varint,10,opt,name=tradingStatus,proto3,enum=org.openfeed.InstrumentTradingStatus" json:"tradingStatus,omitempty"`
	// UTC Timestamp, nano seconds since Unix epoch
	OpeningTime int64  `protobuf:"zigzag64,11,opt,name=openingTime,proto3" json:"openingTime,omitempty"`
	Note        string `protobuf:"bytes,12,opt,name=note,proto3" json:"note,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate                       int32                           `protobuf:"zigzag32,13,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	RegulationSHOShortSalePriceTest RegulationSHOShortSalePriceTest `protobuf:"varint,14,opt,name=regulationSHOShortSalePriceTest,proto3,enum=org.openfeed.RegulationSHOShortSalePriceTest" json:"regulationSHOShortSalePriceTest,omitempty"`
}

func (x *InstrumentStatus) Reset() {
	*x = InstrumentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentStatus) ProtoMessage() {}

func (x *InstrumentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentStatus.ProtoReflect.Descriptor instead.
func (*InstrumentStatus) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{15}
}

func (x *InstrumentStatus) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *InstrumentStatus) GetTradingStatus() InstrumentTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return InstrumentTradingStatus_UNKNOWN_TRADING_STATUS
}

func (x *InstrumentStatus) GetOpeningTime() int64 {
	if x != nil {
		return x.OpeningTime
	}
	return 0
}

func (x *InstrumentStatus) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *InstrumentStatus) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *InstrumentStatus) GetRegulationSHOShortSalePriceTest() RegulationSHOShortSalePriceTest {
	if x != nil {
		return x.RegulationSHOShortSalePriceTest
	}
	return RegulationSHOShortSalePriceTest_UNKNOWN_PRICE_TEST
}

/// Best Bid and Offer.
/// If a side is not present, then that side has been deleted.
/// By default this value is the NBBO, if regional/participant quote then regional = true
type BestBidOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Divide by priceDenominator
	BidPrice int64 `protobuf:"zigzag64,10,opt,name=bidPrice,proto3" json:"bidPrice,omitempty"`
	/// Divide by quantityDenominator
	BidQuantity   int64 `protobuf:"zigzag64,11,opt,name=bidQuantity,proto3" json:"bidQuantity,omitempty"`
	BidOrderCount int32 `protobuf:"zigzag32,12,opt,name=bidOrderCount,proto3" json:"bidOrderCount,omitempty"`
	/// Liquidity provider information
	// For Forex: BANK:CITY
	// For Equities: EXCHANGE_MIC
	BidOriginator     []byte `protobuf:"bytes,13,opt,name=bidOriginator,proto3" json:"bidOriginator,omitempty"`
	BidQuoteCondition []byte `protobuf:"bytes,14,opt,name=bidQuoteCondition,proto3" json:"bidQuoteCondition,omitempty"`
	/// Divide by priceDenominator
	OfferPrice int64 `protobuf:"zigzag64,20,opt,name=offerPrice,proto3" json:"offerPrice,omitempty"`
	/// Divide by quantityDenominator
	OfferQuantity   int64 `protobuf:"zigzag64,21,opt,name=offerQuantity,proto3" json:"offerQuantity,omitempty"`
	OfferOrderCount int32 `protobuf:"zigzag32,22,opt,name=offerOrderCount,proto3" json:"offerOrderCount,omitempty"`
	/// Liquidity provider information
	// For Forex: BANK:CITY
	// For Equities: EXCHANGE_MIC
	OfferOriginator     []byte `protobuf:"bytes,23,opt,name=offerOriginator,proto3" json:"offerOriginator,omitempty"`
	OfferQuoteCondition []byte `protobuf:"bytes,24,opt,name=offerQuoteCondition,proto3" json:"offerQuoteCondition,omitempty"`
	QuoteCondition      []byte `protobuf:"bytes,30,opt,name=quoteCondition,proto3" json:"quoteCondition,omitempty"`
	/// True if regional/participant member quote
	Regional bool `protobuf:"varint,32,opt,name=regional,proto3" json:"regional,omitempty"`
	/// True if not persisted in the EOD database.
	Transient bool `protobuf:"varint,33,opt,name=transient,proto3" json:"transient,omitempty"`
}

func (x *BestBidOffer) Reset() {
	*x = BestBidOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BestBidOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BestBidOffer) ProtoMessage() {}

func (x *BestBidOffer) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BestBidOffer.ProtoReflect.Descriptor instead.
func (*BestBidOffer) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{16}
}

func (x *BestBidOffer) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *BestBidOffer) GetBidPrice() int64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *BestBidOffer) GetBidQuantity() int64 {
	if x != nil {
		return x.BidQuantity
	}
	return 0
}

func (x *BestBidOffer) GetBidOrderCount() int32 {
	if x != nil {
		return x.BidOrderCount
	}
	return 0
}

func (x *BestBidOffer) GetBidOriginator() []byte {
	if x != nil {
		return x.BidOriginator
	}
	return nil
}

func (x *BestBidOffer) GetBidQuoteCondition() []byte {
	if x != nil {
		return x.BidQuoteCondition
	}
	return nil
}

func (x *BestBidOffer) GetOfferPrice() int64 {
	if x != nil {
		return x.OfferPrice
	}
	return 0
}

func (x *BestBidOffer) GetOfferQuantity() int64 {
	if x != nil {
		return x.OfferQuantity
	}
	return 0
}

func (x *BestBidOffer) GetOfferOrderCount() int32 {
	if x != nil {
		return x.OfferOrderCount
	}
	return 0
}

func (x *BestBidOffer) GetOfferOriginator() []byte {
	if x != nil {
		return x.OfferOriginator
	}
	return nil
}

func (x *BestBidOffer) GetOfferQuoteCondition() []byte {
	if x != nil {
		return x.OfferQuoteCondition
	}
	return nil
}

func (x *BestBidOffer) GetQuoteCondition() []byte {
	if x != nil {
		return x.QuoteCondition
	}
	return nil
}

func (x *BestBidOffer) GetRegional() bool {
	if x != nil {
		return x.Regional
	}
	return false
}

func (x *BestBidOffer) GetTransient() bool {
	if x != nil {
		return x.Transient
	}
	return false
}

/// Insert a new price level, pushing existing levels down
type AddPriceLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// price level index, starting at 1
	Level int32    `protobuf:"zigzag32,10,opt,name=level,proto3" json:"level,omitempty"`
	Side  BookSide `protobuf:"varint,11,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
	/// Divide by priceDenominator
	Price int64 `protobuf:"zigzag64,12,opt,name=price,proto3" json:"price,omitempty"`
	/// Divide by quantityDenominator
	Quantity        int64 `protobuf:"zigzag64,13,opt,name=quantity,proto3" json:"quantity,omitempty"`
	OrderCount      int32 `protobuf:"zigzag32,14,opt,name=orderCount,proto3" json:"orderCount,omitempty"`
	ImpliedQuantity int64 `protobuf:"zigzag64,15,opt,name=impliedQuantity,proto3" json:"impliedQuantity,omitempty"`
}

func (x *AddPriceLevel) Reset() {
	*x = AddPriceLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPriceLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPriceLevel) ProtoMessage() {}

func (x *AddPriceLevel) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPriceLevel.ProtoReflect.Descriptor instead.
func (*AddPriceLevel) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{17}
}

func (x *AddPriceLevel) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *AddPriceLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AddPriceLevel) GetSide() BookSide {
	if x != nil {
		return x.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

func (x *AddPriceLevel) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AddPriceLevel) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *AddPriceLevel) GetOrderCount() int32 {
	if x != nil {
		return x.OrderCount
	}
	return 0
}

func (x *AddPriceLevel) GetImpliedQuantity() int64 {
	if x != nil {
		return x.ImpliedQuantity
	}
	return 0
}

/// Delete an existing price level, pulling existing levels up
type DeletePriceLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// price level index, starting at 1
	Level int32    `protobuf:"zigzag32,10,opt,name=level,proto3" json:"level,omitempty"`
	Side  BookSide `protobuf:"varint,11,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
}

func (x *DeletePriceLevel) Reset() {
	*x = DeletePriceLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePriceLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePriceLevel) ProtoMessage() {}

func (x *DeletePriceLevel) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePriceLevel.ProtoReflect.Descriptor instead.
func (*DeletePriceLevel) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{18}
}

func (x *DeletePriceLevel) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *DeletePriceLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *DeletePriceLevel) GetSide() BookSide {
	if x != nil {
		return x.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

/// Modify the quantity or orderCount of an existing price level.
/// The price itself will not change.
type ModifyPriceLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// price level index, starting at 1
	Level int32    `protobuf:"zigzag32,10,opt,name=level,proto3" json:"level,omitempty"`
	Side  BookSide `protobuf:"varint,11,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
	/// Divide by priceDenominator
	Price int64 `protobuf:"zigzag64,12,opt,name=price,proto3" json:"price,omitempty"`
	/// Divide by quantityDenominator
	Quantity        int64 `protobuf:"zigzag64,13,opt,name=quantity,proto3" json:"quantity,omitempty"`
	OrderCount      int32 `protobuf:"zigzag32,14,opt,name=orderCount,proto3" json:"orderCount,omitempty"`
	ImpliedQuantity int64 `protobuf:"zigzag64,15,opt,name=impliedQuantity,proto3" json:"impliedQuantity,omitempty"`
}

func (x *ModifyPriceLevel) Reset() {
	*x = ModifyPriceLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPriceLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPriceLevel) ProtoMessage() {}

func (x *ModifyPriceLevel) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPriceLevel.ProtoReflect.Descriptor instead.
func (*ModifyPriceLevel) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{19}
}

func (x *ModifyPriceLevel) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *ModifyPriceLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ModifyPriceLevel) GetSide() BookSide {
	if x != nil {
		return x.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

func (x *ModifyPriceLevel) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ModifyPriceLevel) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ModifyPriceLevel) GetOrderCount() int32 {
	if x != nil {
		return x.OrderCount
	}
	return 0
}

func (x *ModifyPriceLevel) GetImpliedQuantity() int64 {
	if x != nil {
		return x.ImpliedQuantity
	}
	return 0
}

// Add an order to the order book.  Indexed by orderId, which is unique per channel
type AddOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64    `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	OrderId         int64    `protobuf:"zigzag64,10,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Side            BookSide `protobuf:"varint,11,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
	Price           int64    `protobuf:"zigzag64,12,opt,name=price,proto3" json:"price,omitempty"`
	Quantity        int64    `protobuf:"zigzag64,13,opt,name=quantity,proto3" json:"quantity,omitempty"`
	IsImplied       bool     `protobuf:"varint,14,opt,name=isImplied,proto3" json:"isImplied,omitempty"`
	Priority        int64    `protobuf:"zigzag64,15,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *AddOrder) Reset() {
	*x = AddOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrder) ProtoMessage() {}

func (x *AddOrder) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrder.ProtoReflect.Descriptor instead.
func (*AddOrder) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{20}
}

func (x *AddOrder) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *AddOrder) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *AddOrder) GetSide() BookSide {
	if x != nil {
		return x.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

func (x *AddOrder) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AddOrder) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *AddOrder) GetIsImplied() bool {
	if x != nil {
		return x.IsImplied
	}
	return false
}

func (x *AddOrder) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

/// Delete an order from the order book. Indexed by orderId, which is unique per channel
type DeleteOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64    `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	OrderId         int64    `protobuf:"zigzag64,10,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Side            BookSide `protobuf:"varint,11,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
}

func (x *DeleteOrder) Reset() {
	*x = DeleteOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrder) ProtoMessage() {}

func (x *DeleteOrder) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrder.ProtoReflect.Descriptor instead.
func (*DeleteOrder) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteOrder) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *DeleteOrder) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *DeleteOrder) GetSide() BookSide {
	if x != nil {
		return x.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

/// Modify the price or quantity of an order.  The side and implied flag cannot change
type ModifyOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64    `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	OrderId         int64    `protobuf:"zigzag64,10,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Side            BookSide `protobuf:"varint,11,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
	Price           int64    `protobuf:"zigzag64,12,opt,name=price,proto3" json:"price,omitempty"`
	Quantity        int64    `protobuf:"zigzag64,13,opt,name=quantity,proto3" json:"quantity,omitempty"`
	IsImplied       bool     `protobuf:"varint,14,opt,name=isImplied,proto3" json:"isImplied,omitempty"`
	Priority        int64    `protobuf:"zigzag64,15,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *ModifyOrder) Reset() {
	*x = ModifyOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyOrder) ProtoMessage() {}

func (x *ModifyOrder) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyOrder.ProtoReflect.Descriptor instead.
func (*ModifyOrder) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{22}
}

func (x *ModifyOrder) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *ModifyOrder) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ModifyOrder) GetSide() BookSide {
	if x != nil {
		return x.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

func (x *ModifyOrder) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ModifyOrder) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ModifyOrder) GetIsImplied() bool {
	if x != nil {
		return x.IsImplied
	}
	return false
}

func (x *ModifyOrder) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

/// For non-tradable index products
type IndexValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	// Date only, format 2012-07-04 -> 20120704
	TradeDate      int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	Last           int64 `protobuf:"zigzag64,11,opt,name=last,proto3" json:"last,omitempty"`
	Volume         int64 `protobuf:"zigzag64,12,opt,name=volume,proto3" json:"volume,omitempty"`
	Open           int64 `protobuf:"zigzag64,13,opt,name=open,proto3" json:"open,omitempty"`
	SettlementOpen int64 `protobuf:"zigzag64,14,opt,name=settlementOpen,proto3" json:"settlementOpen,omitempty"`
	SpecialOpen    int64 `protobuf:"zigzag64,15,opt,name=specialOpen,proto3" json:"specialOpen,omitempty"`
	High           int64 `protobuf:"zigzag64,16,opt,name=high,proto3" json:"high,omitempty"`
	Low            int64 `protobuf:"zigzag64,17,opt,name=low,proto3" json:"low,omitempty"`
	Close          int64 `protobuf:"zigzag64,18,opt,name=close,proto3" json:"close,omitempty"`
	Bid            int64 `protobuf:"zigzag64,19,opt,name=bid,proto3" json:"bid,omitempty"`
	Offer          int64 `protobuf:"zigzag64,20,opt,name=offer,proto3" json:"offer,omitempty"`
}

func (x *IndexValue) Reset() {
	*x = IndexValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexValue) ProtoMessage() {}

func (x *IndexValue) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexValue.ProtoReflect.Descriptor instead.
func (*IndexValue) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{23}
}

func (x *IndexValue) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *IndexValue) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *IndexValue) GetLast() int64 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *IndexValue) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *IndexValue) GetOpen() int64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *IndexValue) GetSettlementOpen() int64 {
	if x != nil {
		return x.SettlementOpen
	}
	return 0
}

func (x *IndexValue) GetSpecialOpen() int64 {
	if x != nil {
		return x.SpecialOpen
	}
	return 0
}

func (x *IndexValue) GetHigh() int64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *IndexValue) GetLow() int64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *IndexValue) GetClose() int64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *IndexValue) GetBid() int64 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *IndexValue) GetOffer() int64 {
	if x != nil {
		return x.Offer
	}
	return 0
}

/// Trades
type Trades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trades []*Trades_Entry `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *Trades) Reset() {
	*x = Trades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trades) ProtoMessage() {}

func (x *Trades) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trades.ProtoReflect.Descriptor instead.
func (*Trades) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{24}
}

func (x *Trades) GetTrades() []*Trades_Entry {
	if x != nil {
		return x.Trades
	}
	return nil
}

/// A live trade.  When received, update the "last" field
type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market participant/originator
	OriginatorId []byte `protobuf:"bytes,8,opt,name=originatorId,proto3" json:"originatorId,omitempty"`
	// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Divide by priceDenominator
	Price int64 `protobuf:"zigzag64,10,opt,name=price,proto3" json:"price,omitempty"`
	/// Divide by quantityDenominator
	Quantity int64  `protobuf:"zigzag64,11,opt,name=quantity,proto3" json:"quantity,omitempty"`
	TradeId  []byte `protobuf:"bytes,12,opt,name=tradeId,proto3" json:"tradeId,omitempty"`
	/// The side of the aggressing order that caused the trade
	Side BookSide `protobuf:"varint,13,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate       int32           `protobuf:"zigzag32,14,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	BuyerId         []byte          `protobuf:"bytes,15,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	SellerId        []byte          `protobuf:"bytes,16,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	OpeningTrade    bool            `protobuf:"varint,17,opt,name=openingTrade,proto3" json:"openingTrade,omitempty"`
	SystemPriced    bool            `protobuf:"varint,18,opt,name=systemPriced,proto3" json:"systemPriced,omitempty"`
	MarketOnClose   bool            `protobuf:"varint,19,opt,name=marketOnClose,proto3" json:"marketOnClose,omitempty"`
	OddLot          bool            `protobuf:"varint,20,opt,name=oddLot,proto3" json:"oddLot,omitempty"`
	SettlementTerms SettlementTerms `protobuf:"varint,21,opt,name=settlementTerms,proto3,enum=org.openfeed.SettlementTerms" json:"settlementTerms,omitempty"`
	CrossType       CrossType       `protobuf:"varint,22,opt,name=crossType,proto3,enum=org.openfeed.CrossType" json:"crossType,omitempty"`
	ByPass          bool            `protobuf:"varint,23,opt,name=byPass,proto3" json:"byPass,omitempty"`
	LastPrice       int64           `protobuf:"zigzag64,24,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`
	SaleCondition   []byte          `protobuf:"bytes,25,opt,name=saleCondition,proto3" json:"saleCondition,omitempty"`
	Currency        string          `protobuf:"bytes,26,opt,name=currency,proto3" json:"currency,omitempty"`
	// Does not update Last
	DoesNotUpdateLast bool `protobuf:"varint,27,opt,name=doesNotUpdateLast,proto3" json:"doesNotUpdateLast,omitempty"`
	// Does not update Volume
	DoesNotUpdateVolume bool   `protobuf:"varint,28,opt,name=doesNotUpdateVolume,proto3" json:"doesNotUpdateVolume,omitempty"`
	Session             string `protobuf:"bytes,30,opt,name=session,proto3" json:"session,omitempty"`
	// Is this a block trade.
	BlockTrade bool `protobuf:"varint,31,opt,name=blockTrade,proto3" json:"blockTrade,omitempty"`
	/// Distribution time in nano seconds since epoch.
	DistributionTime int64 `protobuf:"zigzag64,32,opt,name=distributionTime,proto3" json:"distributionTime,omitempty"`
	/// time in nano seconds since epoch.
	TransactionTime2           int64  `protobuf:"zigzag64,33,opt,name=transactionTime2,proto3" json:"transactionTime2,omitempty"`
	ConsolidatedPriceIndicator string `protobuf:"bytes,34,opt,name=consolidatedPriceIndicator,proto3" json:"consolidatedPriceIndicator,omitempty"`
	/// True if not persisted in the EOD database.
	Transient bool `protobuf:"varint,35,opt,name=transient,proto3" json:"transient,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{25}
}

func (x *Trade) GetOriginatorId() []byte {
	if x != nil {
		return x.OriginatorId
	}
	return nil
}

func (x *Trade) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *Trade) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Trade) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Trade) GetTradeId() []byte {
	if x != nil {
		return x.TradeId
	}
	return nil
}

func (x *Trade) GetSide() BookSide {
	if x != nil {
		return x.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

func (x *Trade) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *Trade) GetBuyerId() []byte {
	if x != nil {
		return x.BuyerId
	}
	return nil
}

func (x *Trade) GetSellerId() []byte {
	if x != nil {
		return x.SellerId
	}
	return nil
}

func (x *Trade) GetOpeningTrade() bool {
	if x != nil {
		return x.OpeningTrade
	}
	return false
}

func (x *Trade) GetSystemPriced() bool {
	if x != nil {
		return x.SystemPriced
	}
	return false
}

func (x *Trade) GetMarketOnClose() bool {
	if x != nil {
		return x.MarketOnClose
	}
	return false
}

func (x *Trade) GetOddLot() bool {
	if x != nil {
		return x.OddLot
	}
	return false
}

func (x *Trade) GetSettlementTerms() SettlementTerms {
	if x != nil {
		return x.SettlementTerms
	}
	return SettlementTerms_UNKNOWN_SETTLEMENT_TERMS
}

func (x *Trade) GetCrossType() CrossType {
	if x != nil {
		return x.CrossType
	}
	return CrossType_UNKNOWN_CROSS_TYPE
}

func (x *Trade) GetByPass() bool {
	if x != nil {
		return x.ByPass
	}
	return false
}

func (x *Trade) GetLastPrice() int64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *Trade) GetSaleCondition() []byte {
	if x != nil {
		return x.SaleCondition
	}
	return nil
}

func (x *Trade) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Trade) GetDoesNotUpdateLast() bool {
	if x != nil {
		return x.DoesNotUpdateLast
	}
	return false
}

func (x *Trade) GetDoesNotUpdateVolume() bool {
	if x != nil {
		return x.DoesNotUpdateVolume
	}
	return false
}

func (x *Trade) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *Trade) GetBlockTrade() bool {
	if x != nil {
		return x.BlockTrade
	}
	return false
}

func (x *Trade) GetDistributionTime() int64 {
	if x != nil {
		return x.DistributionTime
	}
	return 0
}

func (x *Trade) GetTransactionTime2() int64 {
	if x != nil {
		return x.TransactionTime2
	}
	return 0
}

func (x *Trade) GetConsolidatedPriceIndicator() string {
	if x != nil {
		return x.ConsolidatedPriceIndicator
	}
	return ""
}

func (x *Trade) GetTransient() bool {
	if x != nil {
		return x.Transient
	}
	return false
}

///  Trade Correction
type TradeCorrection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market participant/originator
	OriginatorId    []byte `protobuf:"bytes,8,opt,name=originatorId,proto3" json:"originatorId,omitempty"`
	TransactionTime int64  `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	// Corrected Price
	Price int64 `protobuf:"zigzag64,10,opt,name=price,proto3" json:"price,omitempty"`
	// Corrected Quantity
	Quantity int64    `protobuf:"zigzag64,11,opt,name=quantity,proto3" json:"quantity,omitempty"`
	TradeId  []byte   `protobuf:"bytes,12,opt,name=tradeId,proto3" json:"tradeId,omitempty"`
	Side     BookSide `protobuf:"varint,13,opt,name=side,proto3,enum=org.openfeed.BookSide" json:"side,omitempty"`
	// Date only, format 2012-07-04 -> 20120704
	TradeDate       int32           `protobuf:"zigzag32,14,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	BuyerId         []byte          `protobuf:"bytes,15,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	SellerId        []byte          `protobuf:"bytes,16,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	OpeningTrade    bool            `protobuf:"varint,17,opt,name=openingTrade,proto3" json:"openingTrade,omitempty"`
	SystemPriced    bool            `protobuf:"varint,18,opt,name=systemPriced,proto3" json:"systemPriced,omitempty"`
	MarketOnClose   bool            `protobuf:"varint,19,opt,name=marketOnClose,proto3" json:"marketOnClose,omitempty"`
	OddLot          bool            `protobuf:"varint,20,opt,name=oddLot,proto3" json:"oddLot,omitempty"`
	SettlementTerms SettlementTerms `protobuf:"varint,21,opt,name=settlementTerms,proto3,enum=org.openfeed.SettlementTerms" json:"settlementTerms,omitempty"`
	CrossType       CrossType       `protobuf:"varint,22,opt,name=crossType,proto3,enum=org.openfeed.CrossType" json:"crossType,omitempty"`
	ByPass          bool            `protobuf:"varint,23,opt,name=byPass,proto3" json:"byPass,omitempty"`
	OriginalTradeId []byte          `protobuf:"bytes,24,opt,name=originalTradeId,proto3" json:"originalTradeId,omitempty"`
	SaleCondition   []byte          `protobuf:"bytes,25,opt,name=saleCondition,proto3" json:"saleCondition,omitempty"`
	Currency        string          `protobuf:"bytes,26,opt,name=currency,proto3" json:"currency,omitempty"`
	/// Distribution time in nano seconds since epoch.
	DistributionTime int64 `protobuf:"zigzag64,27,opt,name=distributionTime,proto3" json:"distributionTime,omitempty"`
	/// time in nano seconds since epoch.
	TransactionTime2 int64 `protobuf:"zigzag64,28,opt,name=transactionTime2,proto3" json:"transactionTime2,omitempty"`
	// Original Price
	OriginalTradePrice int64 `protobuf:"zigzag64,29,opt,name=originalTradePrice,proto3" json:"originalTradePrice,omitempty"`
	// Original Quantity
	OriginalTradeQuantity int64 `protobuf:"zigzag64,30,opt,name=originalTradeQuantity,proto3" json:"originalTradeQuantity,omitempty"`
}

func (x *TradeCorrection) Reset() {
	*x = TradeCorrection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeCorrection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeCorrection) ProtoMessage() {}

func (x *TradeCorrection) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeCorrection.ProtoReflect.Descriptor instead.
func (*TradeCorrection) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{26}
}

func (x *TradeCorrection) GetOriginatorId() []byte {
	if x != nil {
		return x.OriginatorId
	}
	return nil
}

func (x *TradeCorrection) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *TradeCorrection) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeCorrection) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *TradeCorrection) GetTradeId() []byte {
	if x != nil {
		return x.TradeId
	}
	return nil
}

func (x *TradeCorrection) GetSide() BookSide {
	if x != nil {
		return x.Side
	}
	return BookSide_UNKNOWN_BOOK_SIDE
}

func (x *TradeCorrection) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *TradeCorrection) GetBuyerId() []byte {
	if x != nil {
		return x.BuyerId
	}
	return nil
}

func (x *TradeCorrection) GetSellerId() []byte {
	if x != nil {
		return x.SellerId
	}
	return nil
}

func (x *TradeCorrection) GetOpeningTrade() bool {
	if x != nil {
		return x.OpeningTrade
	}
	return false
}

func (x *TradeCorrection) GetSystemPriced() bool {
	if x != nil {
		return x.SystemPriced
	}
	return false
}

func (x *TradeCorrection) GetMarketOnClose() bool {
	if x != nil {
		return x.MarketOnClose
	}
	return false
}

func (x *TradeCorrection) GetOddLot() bool {
	if x != nil {
		return x.OddLot
	}
	return false
}

func (x *TradeCorrection) GetSettlementTerms() SettlementTerms {
	if x != nil {
		return x.SettlementTerms
	}
	return SettlementTerms_UNKNOWN_SETTLEMENT_TERMS
}

func (x *TradeCorrection) GetCrossType() CrossType {
	if x != nil {
		return x.CrossType
	}
	return CrossType_UNKNOWN_CROSS_TYPE
}

func (x *TradeCorrection) GetByPass() bool {
	if x != nil {
		return x.ByPass
	}
	return false
}

func (x *TradeCorrection) GetOriginalTradeId() []byte {
	if x != nil {
		return x.OriginalTradeId
	}
	return nil
}

func (x *TradeCorrection) GetSaleCondition() []byte {
	if x != nil {
		return x.SaleCondition
	}
	return nil
}

func (x *TradeCorrection) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TradeCorrection) GetDistributionTime() int64 {
	if x != nil {
		return x.DistributionTime
	}
	return 0
}

func (x *TradeCorrection) GetTransactionTime2() int64 {
	if x != nil {
		return x.TransactionTime2
	}
	return 0
}

func (x *TradeCorrection) GetOriginalTradePrice() int64 {
	if x != nil {
		return x.OriginalTradePrice
	}
	return 0
}

func (x *TradeCorrection) GetOriginalTradeQuantity() int64 {
	if x != nil {
		return x.OriginalTradeQuantity
	}
	return 0
}

//
// Trade Cancel/Break
//
type TradeCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market participant/originator
	OriginatorId           []byte `protobuf:"bytes,8,opt,name=originatorId,proto3" json:"originatorId,omitempty"`
	TransactionTime        int64  `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	CorrectedTradePrice    int64  `protobuf:"zigzag64,10,opt,name=correctedTradePrice,proto3" json:"correctedTradePrice,omitempty"`
	CorrectedTradeQuantity int64  `protobuf:"zigzag64,11,opt,name=correctedTradeQuantity,proto3" json:"correctedTradeQuantity,omitempty"`
	TradeId                []byte `protobuf:"bytes,12,opt,name=tradeId,proto3" json:"tradeId,omitempty"`
	SaleCondition          []byte `protobuf:"bytes,13,opt,name=saleCondition,proto3" json:"saleCondition,omitempty"`
	Currency               string `protobuf:"bytes,14,opt,name=currency,proto3" json:"currency,omitempty"`
	/// Distribution time in nano seconds since epoch.
	DistributionTime int64 `protobuf:"zigzag64,15,opt,name=distributionTime,proto3" json:"distributionTime,omitempty"`
	/// time in nano seconds since epoch.
	TransactionTime2 int64 `protobuf:"zigzag64,16,opt,name=transactionTime2,proto3" json:"transactionTime2,omitempty"`
}

func (x *TradeCancel) Reset() {
	*x = TradeCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeCancel) ProtoMessage() {}

func (x *TradeCancel) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeCancel.ProtoReflect.Descriptor instead.
func (*TradeCancel) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{27}
}

func (x *TradeCancel) GetOriginatorId() []byte {
	if x != nil {
		return x.OriginatorId
	}
	return nil
}

func (x *TradeCancel) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *TradeCancel) GetCorrectedTradePrice() int64 {
	if x != nil {
		return x.CorrectedTradePrice
	}
	return 0
}

func (x *TradeCancel) GetCorrectedTradeQuantity() int64 {
	if x != nil {
		return x.CorrectedTradeQuantity
	}
	return 0
}

func (x *TradeCancel) GetTradeId() []byte {
	if x != nil {
		return x.TradeId
	}
	return nil
}

func (x *TradeCancel) GetSaleCondition() []byte {
	if x != nil {
		return x.SaleCondition
	}
	return nil
}

func (x *TradeCancel) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TradeCancel) GetDistributionTime() int64 {
	if x != nil {
		return x.DistributionTime
	}
	return 0
}

func (x *TradeCancel) GetTransactionTime2() int64 {
	if x != nil {
		return x.TransactionTime2
	}
	return 0
}

type Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price                   int64                   `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	OpenCloseSettlementFlag OpenCloseSettlementFlag `protobuf:"varint,12,opt,name=OpenCloseSettlementFlag,proto3,enum=org.openfeed.OpenCloseSettlementFlag" json:"OpenCloseSettlementFlag,omitempty"`
	Currency                string                  `protobuf:"bytes,13,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *Open) Reset() {
	*x = Open{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Open) ProtoMessage() {}

func (x *Open) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Open.ProtoReflect.Descriptor instead.
func (*Open) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{28}
}

func (x *Open) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *Open) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *Open) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Open) GetOpenCloseSettlementFlag() OpenCloseSettlementFlag {
	if x != nil {
		return x.OpenCloseSettlementFlag
	}
	return OpenCloseSettlementFlag_UNKNOWN
}

func (x *Open) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type High struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price    int64  `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	Currency string `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *High) Reset() {
	*x = High{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *High) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*High) ProtoMessage() {}

func (x *High) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use High.ProtoReflect.Descriptor instead.
func (*High) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{29}
}

func (x *High) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *High) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *High) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *High) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// 24 hour rolling window
type HighRolling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price    int64  `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	Currency string `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *HighRolling) Reset() {
	*x = HighRolling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighRolling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighRolling) ProtoMessage() {}

func (x *HighRolling) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighRolling.ProtoReflect.Descriptor instead.
func (*HighRolling) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{30}
}

func (x *HighRolling) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *HighRolling) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *HighRolling) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *HighRolling) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type Low struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price    int64  `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	Currency string `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *Low) Reset() {
	*x = Low{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Low) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Low) ProtoMessage() {}

func (x *Low) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Low.ProtoReflect.Descriptor instead.
func (*Low) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{31}
}

func (x *Low) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *Low) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *Low) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Low) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// 24 hour rolling window
type LowRolling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price    int64  `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	Currency string `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *LowRolling) Reset() {
	*x = LowRolling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LowRolling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LowRolling) ProtoMessage() {}

func (x *LowRolling) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LowRolling.ProtoReflect.Descriptor instead.
func (*LowRolling) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{32}
}

func (x *LowRolling) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *LowRolling) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *LowRolling) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *LowRolling) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type Close struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price    int64  `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	Currency string `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *Close) Reset() {
	*x = Close{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Close) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Close) ProtoMessage() {}

func (x *Close) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Close.ProtoReflect.Descriptor instead.
func (*Close) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{33}
}

func (x *Close) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *Close) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *Close) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Close) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type PrevClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price    int64  `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	Currency string `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *PrevClose) Reset() {
	*x = PrevClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrevClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrevClose) ProtoMessage() {}

func (x *PrevClose) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrevClose.ProtoReflect.Descriptor instead.
func (*PrevClose) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{34}
}

func (x *PrevClose) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *PrevClose) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *PrevClose) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PrevClose) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type Last struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price int64 `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	/// Divide by quantityDenominator
	Quantity int64  `protobuf:"zigzag64,12,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Currency string `protobuf:"bytes,13,opt,name=currency,proto3" json:"currency,omitempty"`
	Session  string `protobuf:"bytes,30,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *Last) Reset() {
	*x = Last{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Last) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Last) ProtoMessage() {}

func (x *Last) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Last.ProtoReflect.Descriptor instead.
func (*Last) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{35}
}

func (x *Last) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *Last) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *Last) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Last) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Last) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Last) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

/// 52 week
type YearHigh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Divide by priceDenominator
	Price    int64  `protobuf:"zigzag64,10,opt,name=price,proto3" json:"price,omitempty"`
	Currency string `protobuf:"bytes,11,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *YearHigh) Reset() {
	*x = YearHigh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YearHigh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YearHigh) ProtoMessage() {}

func (x *YearHigh) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YearHigh.ProtoReflect.Descriptor instead.
func (*YearHigh) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{36}
}

func (x *YearHigh) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *YearHigh) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *YearHigh) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

/// 52 week
type YearLow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Divide by priceDenominator
	Price    int64  `protobuf:"zigzag64,10,opt,name=price,proto3" json:"price,omitempty"`
	Currency string `protobuf:"bytes,11,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *YearLow) Reset() {
	*x = YearLow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YearLow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YearLow) ProtoMessage() {}

func (x *YearLow) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YearLow.ProtoReflect.Descriptor instead.
func (*YearLow) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{37}
}

func (x *YearLow) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *YearLow) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *YearLow) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

/// Total volume traded
type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	// Total volume traded.
	Volume int64 `protobuf:"zigzag64,11,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{38}
}

func (x *Volume) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *Volume) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *Volume) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

/// Total number of trades
type NumberOfTrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate    int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	NumberTrades int64 `protobuf:"zigzag64,11,opt,name=numberTrades,proto3" json:"numberTrades,omitempty"`
}

func (x *NumberOfTrades) Reset() {
	*x = NumberOfTrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberOfTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberOfTrades) ProtoMessage() {}

func (x *NumberOfTrades) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberOfTrades.ProtoReflect.Descriptor instead.
func (*NumberOfTrades) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{39}
}

func (x *NumberOfTrades) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *NumberOfTrades) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *NumberOfTrades) GetNumberTrades() int64 {
	if x != nil {
		return x.NumberTrades
	}
	return 0
}

/// Total monetary value of trades
type MonetaryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// 2 decimals of precision
	Value             int64  `protobuf:"zigzag64,11,opt,name=value,proto3" json:"value,omitempty"`
	ValueCurrencyCode string `protobuf:"bytes,12,opt,name=valueCurrencyCode,proto3" json:"valueCurrencyCode,omitempty"`
}

func (x *MonetaryValue) Reset() {
	*x = MonetaryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonetaryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonetaryValue) ProtoMessage() {}

func (x *MonetaryValue) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonetaryValue.ProtoReflect.Descriptor instead.
func (*MonetaryValue) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{40}
}

func (x *MonetaryValue) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *MonetaryValue) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *MonetaryValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MonetaryValue) GetValueCurrencyCode() string {
	if x != nil {
		return x.ValueCurrencyCode
	}
	return ""
}

//// Settlement value for futures and options markets.
type Settlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// Divide by priceDenominator
	Price             int64            `protobuf:"zigzag64,11,opt,name=price,proto3" json:"price,omitempty"`
	PreliminarySettle bool             `protobuf:"varint,12,opt,name=preliminarySettle,proto3" json:"preliminarySettle,omitempty"`
	Currency          string           `protobuf:"bytes,13,opt,name=currency,proto3" json:"currency,omitempty"`
	SettlementSource  SettlementSource `protobuf:"varint,14,opt,name=settlementSource,proto3,enum=org.openfeed.SettlementSource" json:"settlementSource,omitempty"`
	/// Used by CME ITC.
	Session string `protobuf:"bytes,15,opt,name=session,proto3" json:"session,omitempty"`
	/// True if not persisted in the EOD database.
	Transient bool `protobuf:"varint,16,opt,name=transient,proto3" json:"transient,omitempty"`
	/// Reserved
	Reserved bool `protobuf:"varint,127,opt,name=reserved,proto3" json:"reserved,omitempty"`
}

func (x *Settlement) Reset() {
	*x = Settlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settlement) ProtoMessage() {}

func (x *Settlement) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settlement.ProtoReflect.Descriptor instead.
func (*Settlement) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{41}
}

func (x *Settlement) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *Settlement) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *Settlement) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Settlement) GetPreliminarySettle() bool {
	if x != nil {
		return x.PreliminarySettle
	}
	return false
}

func (x *Settlement) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Settlement) GetSettlementSource() SettlementSource {
	if x != nil {
		return x.SettlementSource
	}
	return SettlementSource_UNKNOWN_SETTLEMENT_SOURCE
}

func (x *Settlement) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *Settlement) GetTransient() bool {
	if x != nil {
		return x.Transient
	}
	return false
}

func (x *Settlement) GetReserved() bool {
	if x != nil {
		return x.Reserved
	}
	return false
}

/// Open interest
type OpenInterest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	Volume    int64 `protobuf:"zigzag64,11,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *OpenInterest) Reset() {
	*x = OpenInterest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenInterest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenInterest) ProtoMessage() {}

func (x *OpenInterest) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenInterest.ProtoReflect.Descriptor instead.
func (*OpenInterest) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{42}
}

func (x *OpenInterest) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *OpenInterest) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *OpenInterest) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

/// Volume Weighted Average Price
type Vwap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,9,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	// Date only, format 2012-07-04 -> 20120704
	TradeDate int32 `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	Vwap      int64 `protobuf:"zigzag64,11,opt,name=vwap,proto3" json:"vwap,omitempty"`
}

func (x *Vwap) Reset() {
	*x = Vwap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vwap) ProtoMessage() {}

func (x *Vwap) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vwap.ProtoReflect.Descriptor instead.
func (*Vwap) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{43}
}

func (x *Vwap) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *Vwap) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *Vwap) GetVwap() int64 {
	if x != nil {
		return x.Vwap
	}
	return 0
}

/// Dividends and Income Distributions
type DividendsIncomeDistributions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64  `protobuf:"zigzag64,6,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	InstrumentType  string `protobuf:"bytes,7,opt,name=instrumentType,proto3" json:"instrumentType,omitempty"`
	// Corporate Action
	CorporateAction string `protobuf:"bytes,8,opt,name=corporateAction,proto3" json:"corporateAction,omitempty"`
	// Distribution Type
	DistributionType string `protobuf:"bytes,9,opt,name=distributionType,proto3" json:"distributionType,omitempty"`
	// Date only, format 2012-07-04 -> 20120704
	PayableDate    int32 `protobuf:"zigzag32,10,opt,name=payableDate,proto3" json:"payableDate,omitempty"`
	RecordDate     int32 `protobuf:"zigzag32,11,opt,name=recordDate,proto3" json:"recordDate,omitempty"`
	ExDividendDate int32 `protobuf:"zigzag32,12,opt,name=exDividendDate,proto3" json:"exDividendDate,omitempty"`
	// Cash amount of distribution
	Amount       int64    `protobuf:"zigzag64,13,opt,name=amount,proto3" json:"amount,omitempty"`
	CurrencyCode string   `protobuf:"bytes,14,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	Notes        []string `protobuf:"bytes,15,rep,name=notes,proto3" json:"notes,omitempty"`
	//
	TotalCashDistribution        int64 `protobuf:"zigzag64,16,opt,name=totalCashDistribution,proto3" json:"totalCashDistribution,omitempty"`
	NonQualifiedCashDistribution int64 `protobuf:"zigzag64,17,opt,name=nonQualifiedCashDistribution,proto3" json:"nonQualifiedCashDistribution,omitempty"`
	QualifiedCashDistribution    int64 `protobuf:"zigzag64,18,opt,name=qualifiedCashDistribution,proto3" json:"qualifiedCashDistribution,omitempty"`
	TaxFreeCashDistribution      int64 `protobuf:"zigzag64,19,opt,name=taxFreeCashDistribution,proto3" json:"taxFreeCashDistribution,omitempty"`
	OrdinaryForeignTaxCredit     int64 `protobuf:"zigzag64,20,opt,name=ordinaryForeignTaxCredit,proto3" json:"ordinaryForeignTaxCredit,omitempty"`
	QualifiedForeignTaxCredit    int64 `protobuf:"zigzag64,21,opt,name=qualifiedForeignTaxCredit,proto3" json:"qualifiedForeignTaxCredit,omitempty"`
	StockDividendRatio           int64 `protobuf:"zigzag64,22,opt,name=stockDividendRatio,proto3" json:"stockDividendRatio,omitempty"`
	//
	ReinvestDate int32 `protobuf:"zigzag32,23,opt,name=reinvestDate,proto3" json:"reinvestDate,omitempty"`
}

func (x *DividendsIncomeDistributions) Reset() {
	*x = DividendsIncomeDistributions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DividendsIncomeDistributions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DividendsIncomeDistributions) ProtoMessage() {}

func (x *DividendsIncomeDistributions) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DividendsIncomeDistributions.ProtoReflect.Descriptor instead.
func (*DividendsIncomeDistributions) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{44}
}

func (x *DividendsIncomeDistributions) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *DividendsIncomeDistributions) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *DividendsIncomeDistributions) GetCorporateAction() string {
	if x != nil {
		return x.CorporateAction
	}
	return ""
}

func (x *DividendsIncomeDistributions) GetDistributionType() string {
	if x != nil {
		return x.DistributionType
	}
	return ""
}

func (x *DividendsIncomeDistributions) GetPayableDate() int32 {
	if x != nil {
		return x.PayableDate
	}
	return 0
}

func (x *DividendsIncomeDistributions) GetRecordDate() int32 {
	if x != nil {
		return x.RecordDate
	}
	return 0
}

func (x *DividendsIncomeDistributions) GetExDividendDate() int32 {
	if x != nil {
		return x.ExDividendDate
	}
	return 0
}

func (x *DividendsIncomeDistributions) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DividendsIncomeDistributions) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *DividendsIncomeDistributions) GetNotes() []string {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *DividendsIncomeDistributions) GetTotalCashDistribution() int64 {
	if x != nil {
		return x.TotalCashDistribution
	}
	return 0
}

func (x *DividendsIncomeDistributions) GetNonQualifiedCashDistribution() int64 {
	if x != nil {
		return x.NonQualifiedCashDistribution
	}
	return 0
}

func (x *DividendsIncomeDistributions) GetQualifiedCashDistribution() int64 {
	if x != nil {
		return x.QualifiedCashDistribution
	}
	return 0
}

func (x *DividendsIncomeDistributions) GetTaxFreeCashDistribution() int64 {
	if x != nil {
		return x.TaxFreeCashDistribution
	}
	return 0
}

func (x *DividendsIncomeDistributions) GetOrdinaryForeignTaxCredit() int64 {
	if x != nil {
		return x.OrdinaryForeignTaxCredit
	}
	return 0
}

func (x *DividendsIncomeDistributions) GetQualifiedForeignTaxCredit() int64 {
	if x != nil {
		return x.QualifiedForeignTaxCredit
	}
	return 0
}

func (x *DividendsIncomeDistributions) GetStockDividendRatio() int64 {
	if x != nil {
		return x.StockDividendRatio
	}
	return 0
}

func (x *DividendsIncomeDistributions) GetReinvestDate() int32 {
	if x != nil {
		return x.ReinvestDate
	}
	return 0
}

/// Capital Distributions
type CapitalDistributions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64  `protobuf:"zigzag64,8,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	InstrumentType  string `protobuf:"bytes,9,opt,name=instrumentType,proto3" json:"instrumentType,omitempty"`
	// Corporate Action
	CorporateAction string `protobuf:"bytes,10,opt,name=corporateAction,proto3" json:"corporateAction,omitempty"`
	// Date only, format 2012-07-04 -> 20120704
	PayableDate int32 `protobuf:"zigzag32,11,opt,name=payableDate,proto3" json:"payableDate,omitempty"`
	RecordDate  int32 `protobuf:"zigzag32,12,opt,name=recordDate,proto3" json:"recordDate,omitempty"`
	ExDate      int32 `protobuf:"zigzag32,13,opt,name=exDate,proto3" json:"exDate,omitempty"`
	// Distributions
	ShortTermCapitalGain     int64    `protobuf:"zigzag64,14,opt,name=shortTermCapitalGain,proto3" json:"shortTermCapitalGain,omitempty"`
	LongTermCapitalGain      int64    `protobuf:"zigzag64,15,opt,name=longTermCapitalGain,proto3" json:"longTermCapitalGain,omitempty"`
	UnallocatedDistributions int64    `protobuf:"zigzag64,16,opt,name=unallocatedDistributions,proto3" json:"unallocatedDistributions,omitempty"`
	ReturnOfCapital          int64    `protobuf:"zigzag64,17,opt,name=returnOfCapital,proto3" json:"returnOfCapital,omitempty"`
	CurrencyCode             string   `protobuf:"bytes,18,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	Notes                    []string `protobuf:"bytes,19,rep,name=notes,proto3" json:"notes,omitempty"`
	//
	ReinvestDate int32 `protobuf:"zigzag32,20,opt,name=reinvestDate,proto3" json:"reinvestDate,omitempty"`
}

func (x *CapitalDistributions) Reset() {
	*x = CapitalDistributions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapitalDistributions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapitalDistributions) ProtoMessage() {}

func (x *CapitalDistributions) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapitalDistributions.ProtoReflect.Descriptor instead.
func (*CapitalDistributions) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{45}
}

func (x *CapitalDistributions) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *CapitalDistributions) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *CapitalDistributions) GetCorporateAction() string {
	if x != nil {
		return x.CorporateAction
	}
	return ""
}

func (x *CapitalDistributions) GetPayableDate() int32 {
	if x != nil {
		return x.PayableDate
	}
	return 0
}

func (x *CapitalDistributions) GetRecordDate() int32 {
	if x != nil {
		return x.RecordDate
	}
	return 0
}

func (x *CapitalDistributions) GetExDate() int32 {
	if x != nil {
		return x.ExDate
	}
	return 0
}

func (x *CapitalDistributions) GetShortTermCapitalGain() int64 {
	if x != nil {
		return x.ShortTermCapitalGain
	}
	return 0
}

func (x *CapitalDistributions) GetLongTermCapitalGain() int64 {
	if x != nil {
		return x.LongTermCapitalGain
	}
	return 0
}

func (x *CapitalDistributions) GetUnallocatedDistributions() int64 {
	if x != nil {
		return x.UnallocatedDistributions
	}
	return 0
}

func (x *CapitalDistributions) GetReturnOfCapital() int64 {
	if x != nil {
		return x.ReturnOfCapital
	}
	return 0
}

func (x *CapitalDistributions) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *CapitalDistributions) GetNotes() []string {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *CapitalDistributions) GetReinvestDate() int32 {
	if x != nil {
		return x.ReinvestDate
	}
	return 0
}

//
type SharesOutstanding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharesOutstanding int64 `protobuf:"zigzag64,1,opt,name=sharesOutstanding,proto3" json:"sharesOutstanding,omitempty"`
	TransactionTime   int64 `protobuf:"zigzag64,2,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
}

func (x *SharesOutstanding) Reset() {
	*x = SharesOutstanding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharesOutstanding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharesOutstanding) ProtoMessage() {}

func (x *SharesOutstanding) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharesOutstanding.ProtoReflect.Descriptor instead.
func (*SharesOutstanding) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{46}
}

func (x *SharesOutstanding) GetSharesOutstanding() int64 {
	if x != nil {
		return x.SharesOutstanding
	}
	return 0
}

func (x *SharesOutstanding) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

//
type NetAssetValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetAssetValue   int64 `protobuf:"zigzag64,1,opt,name=netAssetValue,proto3" json:"netAssetValue,omitempty"`
	TransactionTime int64 `protobuf:"zigzag64,2,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
}

func (x *NetAssetValue) Reset() {
	*x = NetAssetValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetAssetValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetAssetValue) ProtoMessage() {}

func (x *NetAssetValue) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetAssetValue.ProtoReflect.Descriptor instead.
func (*NetAssetValue) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{47}
}

func (x *NetAssetValue) GetNetAssetValue() int64 {
	if x != nil {
		return x.NetAssetValue
	}
	return 0
}

func (x *NetAssetValue) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

/// Intra and EOD Market Summary
type MarketSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64 `protobuf:"zigzag64,1,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradingDate int32                  `protobuf:"zigzag32,2,opt,name=tradingDate,proto3" json:"tradingDate,omitempty"`
	StartOfDay  bool                   `protobuf:"varint,3,opt,name=startOfDay,proto3" json:"startOfDay,omitempty"`
	EndOfDay    bool                   `protobuf:"varint,4,opt,name=endOfDay,proto3" json:"endOfDay,omitempty"`
	Clear       MarketSummary_ClearSet `protobuf:"varint,5,opt,name=clear,proto3,enum=org.openfeed.MarketSummary_ClearSet" json:"clear,omitempty"`
	//
	InstrumentStatus *InstrumentStatus `protobuf:"bytes,9,opt,name=instrumentStatus,proto3" json:"instrumentStatus,omitempty"`
	Bbo              *BestBidOffer     `protobuf:"bytes,10,opt,name=bbo,proto3" json:"bbo,omitempty"`
	Open             *Open             `protobuf:"bytes,11,opt,name=open,proto3" json:"open,omitempty"`
	High             *High             `protobuf:"bytes,12,opt,name=high,proto3" json:"high,omitempty"`
	Low              *Low              `protobuf:"bytes,13,opt,name=low,proto3" json:"low,omitempty"`
	Close            *Close            `protobuf:"bytes,14,opt,name=close,proto3" json:"close,omitempty"`
	PrevClose        *PrevClose        `protobuf:"bytes,15,opt,name=prevClose,proto3" json:"prevClose,omitempty"`
	Last             *Last             `protobuf:"bytes,16,opt,name=last,proto3" json:"last,omitempty"`
	Volume           *Volume           `protobuf:"bytes,17,opt,name=volume,proto3" json:"volume,omitempty"`
	Settlement       *Settlement       `protobuf:"bytes,18,opt,name=settlement,proto3" json:"settlement,omitempty"`
	OpenInterest     *OpenInterest     `protobuf:"bytes,19,opt,name=openInterest,proto3" json:"openInterest,omitempty"`
	Vwap             *Vwap             `protobuf:"bytes,20,opt,name=vwap,proto3" json:"vwap,omitempty"`
	/// Used by CME ITC.
	Session     string                    `protobuf:"bytes,21,opt,name=session,proto3" json:"session,omitempty"`
	SummaryType MarketSummary_SummaryType `protobuf:"varint,22,opt,name=summaryType,proto3,enum=org.openfeed.MarketSummary_SummaryType" json:"summaryType,omitempty"`
	/// Total traded volume for the prior day.
	PrevVolume *Volume `protobuf:"bytes,23,opt,name=prevVolume,proto3" json:"prevVolume,omitempty"`
	/// True if not persisted in the EOD database.
	Transient bool `protobuf:"varint,24,opt,name=transient,proto3" json:"transient,omitempty"`
}

func (x *MarketSummary) Reset() {
	*x = MarketSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSummary) ProtoMessage() {}

func (x *MarketSummary) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSummary.ProtoReflect.Descriptor instead.
func (*MarketSummary) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{48}
}

func (x *MarketSummary) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *MarketSummary) GetTradingDate() int32 {
	if x != nil {
		return x.TradingDate
	}
	return 0
}

func (x *MarketSummary) GetStartOfDay() bool {
	if x != nil {
		return x.StartOfDay
	}
	return false
}

func (x *MarketSummary) GetEndOfDay() bool {
	if x != nil {
		return x.EndOfDay
	}
	return false
}

func (x *MarketSummary) GetClear() MarketSummary_ClearSet {
	if x != nil {
		return x.Clear
	}
	return MarketSummary_NONE
}

func (x *MarketSummary) GetInstrumentStatus() *InstrumentStatus {
	if x != nil {
		return x.InstrumentStatus
	}
	return nil
}

func (x *MarketSummary) GetBbo() *BestBidOffer {
	if x != nil {
		return x.Bbo
	}
	return nil
}

func (x *MarketSummary) GetOpen() *Open {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *MarketSummary) GetHigh() *High {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *MarketSummary) GetLow() *Low {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *MarketSummary) GetClose() *Close {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *MarketSummary) GetPrevClose() *PrevClose {
	if x != nil {
		return x.PrevClose
	}
	return nil
}

func (x *MarketSummary) GetLast() *Last {
	if x != nil {
		return x.Last
	}
	return nil
}

func (x *MarketSummary) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *MarketSummary) GetSettlement() *Settlement {
	if x != nil {
		return x.Settlement
	}
	return nil
}

func (x *MarketSummary) GetOpenInterest() *OpenInterest {
	if x != nil {
		return x.OpenInterest
	}
	return nil
}

func (x *MarketSummary) GetVwap() *Vwap {
	if x != nil {
		return x.Vwap
	}
	return nil
}

func (x *MarketSummary) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *MarketSummary) GetSummaryType() MarketSummary_SummaryType {
	if x != nil {
		return x.SummaryType
	}
	return MarketSummary_EXCHANGE_REFRESH
}

func (x *MarketSummary) GetPrevVolume() *Volume {
	if x != nil {
		return x.PrevVolume
	}
	return nil
}

func (x *MarketSummary) GetTransient() bool {
	if x != nil {
		return x.Transient
	}
	return false
}

type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        []*ContextData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	TracePoints []*TracePoint  `protobuf:"bytes,2,rep,name=tracePoints,proto3" json:"tracePoints,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{49}
}

func (x *Context) GetData() []*ContextData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Context) GetTracePoints() []*TracePoint {
	if x != nil {
		return x.TracePoints
	}
	return nil
}

type ContextData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Data:
	//	*ContextData_Vstring
	//	*ContextData_Vbytes
	//	*ContextData_Vbool
	//	*ContextData_Vsint32
	//	*ContextData_Vsint64
	//	*ContextData_Vfloat
	//	*ContextData_Vdouble
	Data isContextData_Data `protobuf_oneof:"data"`
}

func (x *ContextData) Reset() {
	*x = ContextData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextData) ProtoMessage() {}

func (x *ContextData) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextData.ProtoReflect.Descriptor instead.
func (*ContextData) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{50}
}

func (x *ContextData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *ContextData) GetData() isContextData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ContextData) GetVstring() string {
	if x, ok := x.GetData().(*ContextData_Vstring); ok {
		return x.Vstring
	}
	return ""
}

func (x *ContextData) GetVbytes() []byte {
	if x, ok := x.GetData().(*ContextData_Vbytes); ok {
		return x.Vbytes
	}
	return nil
}

func (x *ContextData) GetVbool() bool {
	if x, ok := x.GetData().(*ContextData_Vbool); ok {
		return x.Vbool
	}
	return false
}

func (x *ContextData) GetVsint32() int32 {
	if x, ok := x.GetData().(*ContextData_Vsint32); ok {
		return x.Vsint32
	}
	return 0
}

func (x *ContextData) GetVsint64() int64 {
	if x, ok := x.GetData().(*ContextData_Vsint64); ok {
		return x.Vsint64
	}
	return 0
}

func (x *ContextData) GetVfloat() float32 {
	if x, ok := x.GetData().(*ContextData_Vfloat); ok {
		return x.Vfloat
	}
	return 0
}

func (x *ContextData) GetVdouble() float64 {
	if x, ok := x.GetData().(*ContextData_Vdouble); ok {
		return x.Vdouble
	}
	return 0
}

type isContextData_Data interface {
	isContextData_Data()
}

type ContextData_Vstring struct {
	Vstring string `protobuf:"bytes,5,opt,name=vstring,proto3,oneof"`
}

type ContextData_Vbytes struct {
	Vbytes []byte `protobuf:"bytes,6,opt,name=vbytes,proto3,oneof"`
}

type ContextData_Vbool struct {
	Vbool bool `protobuf:"varint,7,opt,name=vbool,proto3,oneof"`
}

type ContextData_Vsint32 struct {
	Vsint32 int32 `protobuf:"zigzag32,8,opt,name=vsint32,proto3,oneof"`
}

type ContextData_Vsint64 struct {
	Vsint64 int64 `protobuf:"zigzag64,9,opt,name=vsint64,proto3,oneof"`
}

type ContextData_Vfloat struct {
	Vfloat float32 `protobuf:"fixed32,10,opt,name=vfloat,proto3,oneof"`
}

type ContextData_Vdouble struct {
	Vdouble float64 `protobuf:"fixed64,11,opt,name=vdouble,proto3,oneof"`
}

func (*ContextData_Vstring) isContextData_Data() {}

func (*ContextData_Vbytes) isContextData_Data() {}

func (*ContextData_Vbool) isContextData_Data() {}

func (*ContextData_Vsint32) isContextData_Data() {}

func (*ContextData_Vsint64) isContextData_Data() {}

func (*ContextData_Vfloat) isContextData_Data() {}

func (*ContextData_Vdouble) isContextData_Data() {}

// Tracing
type TracePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ComponentId        string `protobuf:"bytes,2,opt,name=componentId,proto3" json:"componentId,omitempty"`
	TimestampNs        int64  `protobuf:"zigzag64,3,opt,name=timestampNs,proto3" json:"timestampNs,omitempty"`
	ComponentLatencyNs int32  `protobuf:"varint,4,opt,name=componentLatencyNs,proto3" json:"componentLatencyNs,omitempty"`
}

func (x *TracePoint) Reset() {
	*x = TracePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracePoint) ProtoMessage() {}

func (x *TracePoint) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracePoint.ProtoReflect.Descriptor instead.
func (*TracePoint) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{51}
}

func (x *TracePoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TracePoint) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *TracePoint) GetTimestampNs() int64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

func (x *TracePoint) GetComponentLatencyNs() int32 {
	if x != nil {
		return x.ComponentLatencyNs
	}
	return 0
}

// TCP replay request.
type TCPHistoricalReplayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel     int32  `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
	ResetNumber int32  `protobuf:"varint,2,opt,name=resetNumber,proto3" json:"resetNumber,omitempty"`
	Sequence    int64  `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Count       int32  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	RequestId   string `protobuf:"bytes,5,opt,name=requestId,proto3" json:"requestId,omitempty"`
}

func (x *TCPHistoricalReplayRequest) Reset() {
	*x = TCPHistoricalReplayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPHistoricalReplayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPHistoricalReplayRequest) ProtoMessage() {}

func (x *TCPHistoricalReplayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPHistoricalReplayRequest.ProtoReflect.Descriptor instead.
func (*TCPHistoricalReplayRequest) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{52}
}

func (x *TCPHistoricalReplayRequest) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *TCPHistoricalReplayRequest) GetResetNumber() int32 {
	if x != nil {
		return x.ResetNumber
	}
	return 0
}

func (x *TCPHistoricalReplayRequest) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *TCPHistoricalReplayRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TCPHistoricalReplayRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

/// Request for the snapshot to the Market state.
type SnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel              int32                                 `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
	ResetNumber          int32                                 `protobuf:"varint,2,opt,name=resetNumber,proto3" json:"resetNumber,omitempty"`
	RequestId            string                                `protobuf:"bytes,3,opt,name=requestId,proto3" json:"requestId,omitempty"`
	SnapshotRequestTypes []SnapshotRequest_SnapshotRequestType `protobuf:"varint,4,rep,packed,name=snapshotRequestTypes,proto3,enum=org.openfeed.SnapshotRequest_SnapshotRequestType" json:"snapshotRequestTypes,omitempty"`
}

func (x *SnapshotRequest) Reset() {
	*x = SnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotRequest) ProtoMessage() {}

func (x *SnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotRequest.ProtoReflect.Descriptor instead.
func (*SnapshotRequest) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{53}
}

func (x *SnapshotRequest) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *SnapshotRequest) GetResetNumber() int32 {
	if x != nil {
		return x.ResetNumber
	}
	return 0
}

func (x *SnapshotRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SnapshotRequest) GetSnapshotRequestTypes() []SnapshotRequest_SnapshotRequestType {
	if x != nil {
		return x.SnapshotRequestTypes
	}
	return nil
}

/// The VolumeAtPrice class encapsulates all of the trades throughout the day,
/// and organizes a table of volume at prices.
type VolumeAtPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId int64  `protobuf:"zigzag64,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	Symbol   string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	/// UTC Timestamp of transaction, nano seconds since Unix epoch
	TransactionTime      int64 `protobuf:"zigzag64,3,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	LastPrice            int64 `protobuf:"zigzag64,4,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`
	LastQuantity         int64 `protobuf:"zigzag64,5,opt,name=lastQuantity,proto3" json:"lastQuantity,omitempty"`
	LastCumulativeVolume int64 `protobuf:"zigzag64,6,opt,name=lastCumulativeVolume,proto3" json:"lastCumulativeVolume,omitempty"`
	/// Date only, format 2012-07-04 -> 20120704
	TradeDate    int32                             `protobuf:"zigzag32,7,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	PriceVolumes []*VolumeAtPrice_PriceLevelVolume `protobuf:"bytes,8,rep,name=priceVolumes,proto3" json:"priceVolumes,omitempty"`
}

func (x *VolumeAtPrice) Reset() {
	*x = VolumeAtPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeAtPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeAtPrice) ProtoMessage() {}

func (x *VolumeAtPrice) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeAtPrice.ProtoReflect.Descriptor instead.
func (*VolumeAtPrice) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{54}
}

func (x *VolumeAtPrice) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *VolumeAtPrice) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *VolumeAtPrice) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *VolumeAtPrice) GetLastPrice() int64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *VolumeAtPrice) GetLastQuantity() int64 {
	if x != nil {
		return x.LastQuantity
	}
	return 0
}

func (x *VolumeAtPrice) GetLastCumulativeVolume() int64 {
	if x != nil {
		return x.LastCumulativeVolume
	}
	return 0
}

func (x *VolumeAtPrice) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *VolumeAtPrice) GetPriceVolumes() []*VolumeAtPrice_PriceLevelVolume {
	if x != nil {
		return x.PriceVolumes
	}
	return nil
}

/// Open,High,Low,Close
type Ohlc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId int64  `protobuf:"zigzag64,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	Symbol   string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Open     *Open  `protobuf:"bytes,3,opt,name=open,proto3" json:"open,omitempty"`
	High     *High  `protobuf:"bytes,4,opt,name=high,proto3" json:"high,omitempty"`
	Low      *Low   `protobuf:"bytes,5,opt,name=low,proto3" json:"low,omitempty"`
	Close    *Close `protobuf:"bytes,6,opt,name=close,proto3" json:"close,omitempty"`
	/// Sum of volume
	Volume int64 `protobuf:"zigzag64,7,opt,name=volume,proto3" json:"volume,omitempty"`
	/// Sum of price volume using normalized price
	PriceVolume  float64 `protobuf:"fixed64,8,opt,name=priceVolume,proto3" json:"priceVolume,omitempty"`
	NumberTrades int64   `protobuf:"zigzag64,9,opt,name=numberTrades,proto3" json:"numberTrades,omitempty"`
	TradeDate    int32   `protobuf:"zigzag32,10,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	/// UTC Timestamp, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,11,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// Trade Ids used in this OHLC
	TradeIds      []string `protobuf:"bytes,12,rep,name=tradeIds,proto3" json:"tradeIds,omitempty"`
	OpenStartTime int64    `protobuf:"zigzag64,13,opt,name=openStartTime,proto3" json:"openStartTime,omitempty"`
	CloseEndTime  int64    `protobuf:"zigzag64,14,opt,name=closeEndTime,proto3" json:"closeEndTime,omitempty"`
}

func (x *Ohlc) Reset() {
	*x = Ohlc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ohlc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ohlc) ProtoMessage() {}

func (x *Ohlc) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ohlc.ProtoReflect.Descriptor instead.
func (*Ohlc) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{55}
}

func (x *Ohlc) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *Ohlc) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Ohlc) GetOpen() *Open {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *Ohlc) GetHigh() *High {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Ohlc) GetLow() *Low {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Ohlc) GetClose() *Close {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *Ohlc) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Ohlc) GetPriceVolume() float64 {
	if x != nil {
		return x.PriceVolume
	}
	return 0
}

func (x *Ohlc) GetNumberTrades() int64 {
	if x != nil {
		return x.NumberTrades
	}
	return 0
}

func (x *Ohlc) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *Ohlc) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *Ohlc) GetTradeIds() []string {
	if x != nil {
		return x.TradeIds
	}
	return nil
}

func (x *Ohlc) GetOpenStartTime() int64 {
	if x != nil {
		return x.OpenStartTime
	}
	return 0
}

func (x *Ohlc) GetCloseEndTime() int64 {
	if x != nil {
		return x.CloseEndTime
	}
	return 0
}

/// Instrument Action
type InstrumentAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTime int64                 `protobuf:"zigzag64,1,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	TradeDate       int32                 `protobuf:"zigzag32,2,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	Action          ActionType            `protobuf:"varint,3,opt,name=action,proto3,enum=org.openfeed.ActionType" json:"action,omitempty"`
	Message         string                `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Instrument      *InstrumentDefinition `protobuf:"bytes,10,opt,name=instrument,proto3" json:"instrument,omitempty"`
	NewInstrument   *InstrumentDefinition `protobuf:"bytes,11,opt,name=newInstrument,proto3" json:"newInstrument,omitempty"`
}

func (x *InstrumentAction) Reset() {
	*x = InstrumentAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentAction) ProtoMessage() {}

func (x *InstrumentAction) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentAction.ProtoReflect.Descriptor instead.
func (*InstrumentAction) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{56}
}

func (x *InstrumentAction) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *InstrumentAction) GetTradeDate() int32 {
	if x != nil {
		return x.TradeDate
	}
	return 0
}

func (x *InstrumentAction) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_UNKNOWN_ACTION
}

func (x *InstrumentAction) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InstrumentAction) GetInstrument() *InstrumentDefinition {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *InstrumentAction) GetNewInstrument() *InstrumentDefinition {
	if x != nil {
		return x.NewInstrument
	}
	return nil
}

type DepthPriceLevel_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*DepthPriceLevel_Entry_AddPriceLevel
	//	*DepthPriceLevel_Entry_DeletePriceLevel
	//	*DepthPriceLevel_Entry_ModifyPriceLevel
	Data isDepthPriceLevel_Entry_Data `protobuf_oneof:"data"`
}

func (x *DepthPriceLevel_Entry) Reset() {
	*x = DepthPriceLevel_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepthPriceLevel_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepthPriceLevel_Entry) ProtoMessage() {}

func (x *DepthPriceLevel_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepthPriceLevel_Entry.ProtoReflect.Descriptor instead.
func (*DepthPriceLevel_Entry) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{11, 0}
}

func (m *DepthPriceLevel_Entry) GetData() isDepthPriceLevel_Entry_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *DepthPriceLevel_Entry) GetAddPriceLevel() *AddPriceLevel {
	if x, ok := x.GetData().(*DepthPriceLevel_Entry_AddPriceLevel); ok {
		return x.AddPriceLevel
	}
	return nil
}

func (x *DepthPriceLevel_Entry) GetDeletePriceLevel() *DeletePriceLevel {
	if x, ok := x.GetData().(*DepthPriceLevel_Entry_DeletePriceLevel); ok {
		return x.DeletePriceLevel
	}
	return nil
}

func (x *DepthPriceLevel_Entry) GetModifyPriceLevel() *ModifyPriceLevel {
	if x, ok := x.GetData().(*DepthPriceLevel_Entry_ModifyPriceLevel); ok {
		return x.ModifyPriceLevel
	}
	return nil
}

type isDepthPriceLevel_Entry_Data interface {
	isDepthPriceLevel_Entry_Data()
}

type DepthPriceLevel_Entry_AddPriceLevel struct {
	AddPriceLevel *AddPriceLevel `protobuf:"bytes,1,opt,name=addPriceLevel,proto3,oneof"`
}

type DepthPriceLevel_Entry_DeletePriceLevel struct {
	DeletePriceLevel *DeletePriceLevel `protobuf:"bytes,2,opt,name=deletePriceLevel,proto3,oneof"`
}

type DepthPriceLevel_Entry_ModifyPriceLevel struct {
	ModifyPriceLevel *ModifyPriceLevel `protobuf:"bytes,3,opt,name=modifyPriceLevel,proto3,oneof"`
}

func (*DepthPriceLevel_Entry_AddPriceLevel) isDepthPriceLevel_Entry_Data() {}

func (*DepthPriceLevel_Entry_DeletePriceLevel) isDepthPriceLevel_Entry_Data() {}

func (*DepthPriceLevel_Entry_ModifyPriceLevel) isDepthPriceLevel_Entry_Data() {}

type DepthOrder_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*DepthOrder_Entry_AddOrder
	//	*DepthOrder_Entry_DeleteOrder
	//	*DepthOrder_Entry_ModifyOrder
	Data isDepthOrder_Entry_Data `protobuf_oneof:"data"`
}

func (x *DepthOrder_Entry) Reset() {
	*x = DepthOrder_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepthOrder_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepthOrder_Entry) ProtoMessage() {}

func (x *DepthOrder_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepthOrder_Entry.ProtoReflect.Descriptor instead.
func (*DepthOrder_Entry) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{12, 0}
}

func (m *DepthOrder_Entry) GetData() isDepthOrder_Entry_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *DepthOrder_Entry) GetAddOrder() *AddOrder {
	if x, ok := x.GetData().(*DepthOrder_Entry_AddOrder); ok {
		return x.AddOrder
	}
	return nil
}

func (x *DepthOrder_Entry) GetDeleteOrder() *DeleteOrder {
	if x, ok := x.GetData().(*DepthOrder_Entry_DeleteOrder); ok {
		return x.DeleteOrder
	}
	return nil
}

func (x *DepthOrder_Entry) GetModifyOrder() *ModifyOrder {
	if x, ok := x.GetData().(*DepthOrder_Entry_ModifyOrder); ok {
		return x.ModifyOrder
	}
	return nil
}

type isDepthOrder_Entry_Data interface {
	isDepthOrder_Entry_Data()
}

type DepthOrder_Entry_AddOrder struct {
	AddOrder *AddOrder `protobuf:"bytes,1,opt,name=addOrder,proto3,oneof"`
}

type DepthOrder_Entry_DeleteOrder struct {
	DeleteOrder *DeleteOrder `protobuf:"bytes,2,opt,name=deleteOrder,proto3,oneof"`
}

type DepthOrder_Entry_ModifyOrder struct {
	ModifyOrder *ModifyOrder `protobuf:"bytes,3,opt,name=modifyOrder,proto3,oneof"`
}

func (*DepthOrder_Entry_AddOrder) isDepthOrder_Entry_Data() {}

func (*DepthOrder_Entry_DeleteOrder) isDepthOrder_Entry_Data() {}

func (*DepthOrder_Entry_ModifyOrder) isDepthOrder_Entry_Data() {}

type Trades_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*Trades_Entry_Trade
	//	*Trades_Entry_TradeCorrection
	//	*Trades_Entry_TradeCancel
	Data isTrades_Entry_Data `protobuf_oneof:"data"`
}

func (x *Trades_Entry) Reset() {
	*x = Trades_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trades_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trades_Entry) ProtoMessage() {}

func (x *Trades_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trades_Entry.ProtoReflect.Descriptor instead.
func (*Trades_Entry) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{24, 0}
}

func (m *Trades_Entry) GetData() isTrades_Entry_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Trades_Entry) GetTrade() *Trade {
	if x, ok := x.GetData().(*Trades_Entry_Trade); ok {
		return x.Trade
	}
	return nil
}

func (x *Trades_Entry) GetTradeCorrection() *TradeCorrection {
	if x, ok := x.GetData().(*Trades_Entry_TradeCorrection); ok {
		return x.TradeCorrection
	}
	return nil
}

func (x *Trades_Entry) GetTradeCancel() *TradeCancel {
	if x, ok := x.GetData().(*Trades_Entry_TradeCancel); ok {
		return x.TradeCancel
	}
	return nil
}

type isTrades_Entry_Data interface {
	isTrades_Entry_Data()
}

type Trades_Entry_Trade struct {
	Trade *Trade `protobuf:"bytes,1,opt,name=trade,proto3,oneof"`
}

type Trades_Entry_TradeCorrection struct {
	TradeCorrection *TradeCorrection `protobuf:"bytes,2,opt,name=tradeCorrection,proto3,oneof"`
}

type Trades_Entry_TradeCancel struct {
	TradeCancel *TradeCancel `protobuf:"bytes,3,opt,name=tradeCancel,proto3,oneof"`
}

func (*Trades_Entry_Trade) isTrades_Entry_Data() {}

func (*Trades_Entry_TradeCorrection) isTrades_Entry_Data() {}

func (*Trades_Entry_TradeCancel) isTrades_Entry_Data() {}

type VolumeAtPrice_PriceLevelVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price  int64 `protobuf:"zigzag64,1,opt,name=price,proto3" json:"price,omitempty"`
	Volume int64 `protobuf:"zigzag64,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *VolumeAtPrice_PriceLevelVolume) Reset() {
	*x = VolumeAtPrice_PriceLevelVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeAtPrice_PriceLevelVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeAtPrice_PriceLevelVolume) ProtoMessage() {}

func (x *VolumeAtPrice_PriceLevelVolume) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeAtPrice_PriceLevelVolume.ProtoReflect.Descriptor instead.
func (*VolumeAtPrice_PriceLevelVolume) Descriptor() ([]byte, []int) {
	return file_openfeed_proto_rawDescGZIP(), []int{54, 0}
}

func (x *VolumeAtPrice_PriceLevelVolume) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *VolumeAtPrice_PriceLevelVolume) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

var File_openfeed_proto protoreflect.FileDescriptor

var file_openfeed_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0c, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x1a, 0x19,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x07, 0x0a, 0x0f, 0x4f, 0x70,
	0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12,
	0x40, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x58, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x15, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x00, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x65, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x45, 0x4f, 0x44, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x13, 0x65, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x10, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x52, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x8b, 0x02, 0x0a, 0x0c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x10, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x22, 0xf4, 0x01, 0x0a, 0x15, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x57,
	0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xe9, 0x01, 0x0a, 0x13, 0x45, 0x4f, 0x44, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x18, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x78, 0x69, 0x6c,
	0x69, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe7, 0x04,
	0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x52,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x23, 0x0a,
	0x03, 0x6c, 0x6f, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4c, 0x6f, 0x77, 0x52, 0x03, 0x6c,
	0x6f, 0x77, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x4c, 0x61, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x6d, 0x6f,
	0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa2, 0x10, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x2f, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a,
	0x03, 0x62, 0x62, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69,
	0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x03, 0x62, 0x62, 0x6f, 0x12, 0x2e, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3d, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x65,
	0x77, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x04, 0x6e, 0x65,
	0x77, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x52, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x12, 0x23, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4c,
	0x6f, 0x77, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x76, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x61, 0x73,
	0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x61, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x08, 0x79, 0x65, 0x61, 0x72, 0x48, 0x69, 0x67, 0x68, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x59, 0x65, 0x61, 0x72, 0x48, 0x69, 0x67, 0x68, 0x52, 0x08, 0x79, 0x65, 0x61,
	0x72, 0x48, 0x69, 0x67, 0x68, 0x12, 0x2f, 0x0a, 0x07, 0x79, 0x65, 0x61, 0x72, 0x4c, 0x6f, 0x77,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x59, 0x65, 0x61, 0x72, 0x4c, 0x6f, 0x77, 0x52, 0x07, 0x79,
	0x65, 0x61, 0x72, 0x4c, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e,
	0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x04, 0x76, 0x77, 0x61, 0x70, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x56, 0x77, 0x61, 0x70,
	0x52, 0x04, 0x76, 0x77, 0x61, 0x70, 0x12, 0x6e, 0x0a, 0x1c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x0e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d,
	0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x56, 0x0a, 0x14, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x14, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x08, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x41, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x68, 0x69, 0x67, 0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x48, 0x69, 0x67, 0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x68, 0x69,
	0x67, 0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0a, 0x6c, 0x6f, 0x77,
	0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4c, 0x6f, 0x77,
	0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x08, 0x7a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x7a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x01, 0x0a,
	0x16, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44,
	0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x22, 0xc8, 0x12, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x35, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x08, 0x7a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x7a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04,
	0x6e, 0x65, 0x77, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x42,
	0x6f, 0x6f, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x6f,
	0x6f, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x12,
	0x4c, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a,
	0x03, 0x62, 0x62, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69,
	0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x62, 0x62, 0x6f, 0x12, 0x49, 0x0a,
	0x0f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x74, 0x68, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x12, 0x28, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x48, 0x69,
	0x67, 0x68, 0x48, 0x00, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x25, 0x0a, 0x03, 0x6c, 0x6f,
	0x77, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f,
	0x77, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x50, 0x72, 0x65, 0x76, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x76, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x61, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x08, 0x79, 0x65, 0x61, 0x72, 0x48, 0x69, 0x67, 0x68, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x59, 0x65, 0x61, 0x72, 0x48, 0x69, 0x67, 0x68, 0x48, 0x00, 0x52, 0x08, 0x79,
	0x65, 0x61, 0x72, 0x48, 0x69, 0x67, 0x68, 0x12, 0x31, 0x0a, 0x07, 0x79, 0x65, 0x61, 0x72, 0x4c,
	0x6f, 0x77, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x59, 0x65, 0x61, 0x72, 0x4c, 0x6f, 0x77, 0x48,
	0x00, 0x52, 0x07, 0x79, 0x65, 0x61, 0x72, 0x4c, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x76, 0x77, 0x61, 0x70,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x56, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x04, 0x76, 0x77,
	0x61, 0x70, 0x12, 0x70, 0x0a, 0x1c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0d,
	0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x58, 0x0a, 0x14, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x14, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0d,
	0x6e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x52, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x52,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x52, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4c, 0x6f, 0x77, 0x52, 0x6f, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x22,
	0xc1, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x74, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x1a, 0xf0, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x64,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00,
	0x52, 0x0d, 0x61, 0x64, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x4c, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4c, 0x0a,
	0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x8a, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x74, 0x68, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0xc3, 0x01, 0x0a, 0x05, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x08, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xb6, 0x01, 0x0a, 0x04, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0x51, 0x0a, 0x09, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd6, 0x02, 0x0a,
	0x10, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x77, 0x0a, 0x1f,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x48, 0x4f, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x48, 0x4f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x1f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x48, 0x4f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x22, 0xa4, 0x04, 0x0a, 0x0c, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69,
	0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x0b, 0x62, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x62, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0d, 0x62, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x69, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x62, 0x69, 0x64,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x69,
	0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x62, 0x69, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x13, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x1f, 0x10, 0x20, 0x22, 0xf7, 0x01, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a,
	0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x7e, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x69, 0x64, 0x65,
	0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x69, 0x64,
	0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0xe6, 0x01, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x7d, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x42, 0x6f, 0x6f,
	0x6b, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x0b,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x42, 0x6f, 0x6f,
	0x6b, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xc2, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x04, 0x6c, 0x61,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x12, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x12, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6f, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x22, 0x85, 0x02, 0x0a,
	0x06, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x1a, 0xc6, 0x01, 0x0a, 0x05,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x00, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xef, 0x07, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x75, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x6e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x64, 0x64, 0x4c, 0x6f, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x12, 0x47,
	0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x79, 0x50, 0x61, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x62, 0x79, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x61, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x6f, 0x65, 0x73, 0x4e, 0x6f,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x64, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x64, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xf3, 0x06, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x75, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x62, 0x75, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x6e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6f, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79,
	0x50, 0x61, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a,
	0x0a, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x12, 0x52, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xf9, 0x02, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x52, 0x13, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x16,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x16, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x22, 0xe1, 0x01, 0x0a, 0x04, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x5f, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x80, 0x01, 0x0a,
	0x04, 0x48, 0x69, 0x67, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0x87, 0x01, 0x0a, 0x0b, 0x48, 0x69, 0x67, 0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12,
	0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x7f, 0x0a, 0x03, 0x4c, 0x6f, 0x77,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x4c,
	0x6f, 0x77, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x76,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0xb6, 0x01, 0x0a, 0x04, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x08, 0x59, 0x65, 0x61, 0x72,
	0x48, 0x69, 0x67, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x22, 0x65, 0x0a, 0x07, 0x59, 0x65, 0x61, 0x72, 0x4c, 0x6f, 0x77, 0x12, 0x28, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x68, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x22, 0x7c, 0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22,
	0x9b, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd4, 0x02,
	0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x22, 0x6e, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x04, 0x56, 0x77, 0x61, 0x70, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x77, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x04, 0x76, 0x77, 0x61, 0x70, 0x22, 0xc2, 0x06, 0x0a, 0x1c, 0x44, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x65, 0x78, 0x44,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x12, 0x52, 0x15, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x6e, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x43, 0x61, 0x73, 0x68, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x12, 0x52, 0x1c, 0x6e, 0x6f, 0x6e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x73, 0x68, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x73, 0x68, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x12, 0x52, 0x19, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x73, 0x68, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x61, 0x78, 0x46, 0x72, 0x65, 0x65,
	0x43, 0x61, 0x73, 0x68, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x12, 0x52, 0x17, 0x74, 0x61, 0x78, 0x46, 0x72, 0x65, 0x65, 0x43,
	0x61, 0x73, 0x68, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x18, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x54, 0x61, 0x78, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x18, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x54, 0x61, 0x78, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x54,
	0x61, 0x78, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x12, 0x52, 0x19,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x54, 0x61, 0x78, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x12, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x0c, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x96, 0x04,
	0x0a, 0x14, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x72, 0x70,
	0x6f, 0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x65, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x47, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x12, 0x52, 0x14, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x69, 0x6e,
	0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x47, 0x61, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x12, 0x52, 0x13, 0x6c,
	0x6f, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x47, 0x61,
	0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x75, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x18, 0x75, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x66, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f,
	0x66, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x6b, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x75,
	0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0d, 0x6e, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x97, 0x09, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x44, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x44,
	0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x12, 0x3a,
	0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x53, 0x65, 0x74, 0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x4a, 0x0a, 0x10, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x62, 0x62, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52,
	0x03, 0x62, 0x62, 0x6f, 0x12, 0x26, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x52, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x12, 0x23, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x4c, 0x6f, 0x77, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6c,
	0x61, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x04, 0x6c,
	0x61, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x76,
	0x77, 0x61, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x56, 0x77, 0x61, 0x70, 0x52, 0x04, 0x76,
	0x77, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a,
	0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x08,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x65, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x42,
	0x41, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x31, 0x10,
	0x03, 0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45,
	0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x46, 0x52, 0x45,
	0x53, 0x48, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4f, 0x44,
	0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x58, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x53, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10, 0x04, 0x22, 0x74,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x76, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x76, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x18, 0x0a, 0x06, 0x76, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x06, 0x76, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x76, 0x62,
	0x6f, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x76, 0x62, 0x6f,
	0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x76, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x07, 0x76, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1a,
	0x0a, 0x07, 0x76, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x48,
	0x00, 0x52, 0x07, 0x76, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x06, 0x76, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x06, 0x76, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x76, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x76, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x90, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x1a,
	0x54, 0x43, 0x50, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x9d, 0x02, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x13, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x51,
	0x55, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x50, 0x54, 0x48, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x41, 0x54, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x10, 0x03, 0x22, 0x95, 0x03, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x41, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0c,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0x40, 0x0a, 0x10,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xe6,
	0x03, 0x0a, 0x04, 0x4f, 0x68, 0x6c, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x48, 0x69, 0x67, 0x68, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x23, 0x0a, 0x03, 0x6c,
	0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4c, 0x6f, 0x77, 0x52, 0x03, 0x6c, 0x6f, 0x77,
	0x12, 0x29, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0c, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x42, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2a, 0x35,
	0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x46,
	0x46, 0x45, 0x52, 0x10, 0x02, 0x2a, 0xa0, 0x05, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x48,
	0x41, 0x4c, 0x54, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4f,
	0x50, 0x45, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x4e,
	0x4f, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45,
	0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x54, 0x45,
	0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x41, 0x54,
	0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x0d, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0e,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x4e, 0x44, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x57, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10,
	0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x11, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0x12, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0x13, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x53,
	0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x15, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x46, 0x54,
	0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x17,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x4d, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x18, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x4d, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x45, 0x4c, 0x4c, 0x10, 0x19, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x43, 0x5f, 0x49, 0x4d, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x4f, 0x43, 0x5f, 0x49, 0x4d, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45,
	0x4c, 0x4c, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x49, 0x4d, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x1c, 0x12, 0x14, 0x0a,
	0x10, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x43, 0x5f, 0x49, 0x4d, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x1d, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x4c,
	0x4c, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x12,
	0x17, 0x0a, 0x13, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x55, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x1f, 0x2a, 0x8a, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x48, 0x4f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43,
	0x54, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x4d, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x46, 0x46,
	0x45, 0x43, 0x54, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x45, 0x52, 0x4d, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x53, 0x48, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x54, 0x4f, 0x44, 0x41,
	0x59, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05, 0x2a, 0x7d, 0x0a,
	0x09, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x41, 0x53, 0x49, 0x53, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54,
	0x49, 0x4e, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x57, 0x41, 0x50, 0x10, 0x06, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x07, 0x2a, 0x51, 0x0a, 0x17,
	0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x02, 0x2a,
	0x52, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4c, 0x4f, 0x42, 0x45, 0x58, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x49, 0x54, 0x43, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x10, 0x03, 0x2a, 0x78, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x4c, 0x41, 0x59,
	0x45, 0x44, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x05, 0x2a, 0x79, 0x0a,
	0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f,
	0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x04, 0x2a, 0xcc, 0x01, 0x0a, 0x15, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x03, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x2a, 0x4f, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c, 0x49, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x03, 0x42, 0x07, 0x48, 0x01, 0x50, 0x01, 0xa0, 0x01,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openfeed_proto_rawDescOnce sync.Once
	file_openfeed_proto_rawDescData = file_openfeed_proto_rawDesc
)

func file_openfeed_proto_rawDescGZIP() []byte {
	file_openfeed_proto_rawDescOnce.Do(func() {
		file_openfeed_proto_rawDescData = protoimpl.X.CompressGZIP(file_openfeed_proto_rawDescData)
	})
	return file_openfeed_proto_rawDescData
}

var file_openfeed_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_openfeed_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_openfeed_proto_goTypes = []interface{}{
	(BookSide)(0),                            // 0: org.openfeed.BookSide
	(InstrumentTradingStatus)(0),             // 1: org.openfeed.InstrumentTradingStatus
	(RegulationSHOShortSalePriceTest)(0),     // 2: org.openfeed.RegulationSHOShortSalePriceTest
	(SettlementTerms)(0),                     // 3: org.openfeed.SettlementTerms
	(CrossType)(0),                           // 4: org.openfeed.CrossType
	(OpenCloseSettlementFlag)(0),             // 5: org.openfeed.OpenCloseSettlementFlag
	(SettlementSource)(0),                    // 6: org.openfeed.SettlementSource
	(Service)(0),                             // 7: org.openfeed.Service
	(MarketWideStatus)(0),                    // 8: org.openfeed.MarketWideStatus
	(SnapshotRequestResult)(0),               // 9: org.openfeed.SnapshotRequestResult
	(ActionType)(0),                          // 10: org.openfeed.ActionType
	(AdminMessage_Status)(0),                 // 11: org.openfeed.AdminMessage.Status
	(MarketSummary_ClearSet)(0),              // 12: org.openfeed.MarketSummary.ClearSet
	(MarketSummary_SummaryType)(0),           // 13: org.openfeed.MarketSummary.SummaryType
	(SnapshotRequest_SnapshotRequestType)(0), // 14: org.openfeed.SnapshotRequest.SnapshotRequestType
	(*OpenfeedMessage)(nil),                  // 15: org.openfeed.OpenfeedMessage
	(*ChannelReset)(nil),                     // 16: org.openfeed.ChannelReset
	(*HeartBeat)(nil),                        // 17: org.openfeed.HeartBeat
	(*AdminMessage)(nil),                     // 18: org.openfeed.AdminMessage
	(*InstrumentGroupStatus)(nil),            // 19: org.openfeed.InstrumentGroupStatus
	(*MarketStatus)(nil),                     // 20: org.openfeed.MarketStatus
	(*EODCommoditySummary)(nil),              // 21: org.openfeed.EODCommoditySummary
	(*MarketSession)(nil),                    // 22: org.openfeed.MarketSession
	(*MarketSnapshot)(nil),                   // 23: org.openfeed.MarketSnapshot
	(*MarketSnapshotResponse)(nil),           // 24: org.openfeed.MarketSnapshotResponse
	(*MarketUpdate)(nil),                     // 25: org.openfeed.MarketUpdate
	(*DepthPriceLevel)(nil),                  // 26: org.openfeed.DepthPriceLevel
	(*DepthOrder)(nil),                       // 27: org.openfeed.DepthOrder
	(*News)(nil),                             // 28: org.openfeed.News
	(*ClearBook)(nil),                        // 29: org.openfeed.ClearBook
	(*InstrumentStatus)(nil),                 // 30: org.openfeed.InstrumentStatus
	(*BestBidOffer)(nil),                     // 31: org.openfeed.BestBidOffer
	(*AddPriceLevel)(nil),                    // 32: org.openfeed.AddPriceLevel
	(*DeletePriceLevel)(nil),                 // 33: org.openfeed.DeletePriceLevel
	(*ModifyPriceLevel)(nil),                 // 34: org.openfeed.ModifyPriceLevel
	(*AddOrder)(nil),                         // 35: org.openfeed.AddOrder
	(*DeleteOrder)(nil),                      // 36: org.openfeed.DeleteOrder
	(*ModifyOrder)(nil),                      // 37: org.openfeed.ModifyOrder
	(*IndexValue)(nil),                       // 38: org.openfeed.IndexValue
	(*Trades)(nil),                           // 39: org.openfeed.Trades
	(*Trade)(nil),                            // 40: org.openfeed.Trade
	(*TradeCorrection)(nil),                  // 41: org.openfeed.TradeCorrection
	(*TradeCancel)(nil),                      // 42: org.openfeed.TradeCancel
	(*Open)(nil),                             // 43: org.openfeed.Open
	(*High)(nil),                             // 44: org.openfeed.High
	(*HighRolling)(nil),                      // 45: org.openfeed.HighRolling
	(*Low)(nil),                              // 46: org.openfeed.Low
	(*LowRolling)(nil),                       // 47: org.openfeed.LowRolling
	(*Close)(nil),                            // 48: org.openfeed.Close
	(*PrevClose)(nil),                        // 49: org.openfeed.PrevClose
	(*Last)(nil),                             // 50: org.openfeed.Last
	(*YearHigh)(nil),                         // 51: org.openfeed.YearHigh
	(*YearLow)(nil),                          // 52: org.openfeed.YearLow
	(*Volume)(nil),                           // 53: org.openfeed.Volume
	(*NumberOfTrades)(nil),                   // 54: org.openfeed.NumberOfTrades
	(*MonetaryValue)(nil),                    // 55: org.openfeed.MonetaryValue
	(*Settlement)(nil),                       // 56: org.openfeed.Settlement
	(*OpenInterest)(nil),                     // 57: org.openfeed.OpenInterest
	(*Vwap)(nil),                             // 58: org.openfeed.Vwap
	(*DividendsIncomeDistributions)(nil),     // 59: org.openfeed.DividendsIncomeDistributions
	(*CapitalDistributions)(nil),             // 60: org.openfeed.CapitalDistributions
	(*SharesOutstanding)(nil),                // 61: org.openfeed.SharesOutstanding
	(*NetAssetValue)(nil),                    // 62: org.openfeed.NetAssetValue
	(*MarketSummary)(nil),                    // 63: org.openfeed.MarketSummary
	(*Context)(nil),                          // 64: org.openfeed.Context
	(*ContextData)(nil),                      // 65: org.openfeed.ContextData
	(*TracePoint)(nil),                       // 66: org.openfeed.TracePoint
	(*TCPHistoricalReplayRequest)(nil),       // 67: org.openfeed.TCPHistoricalReplayRequest
	(*SnapshotRequest)(nil),                  // 68: org.openfeed.SnapshotRequest
	(*VolumeAtPrice)(nil),                    // 69: org.openfeed.VolumeAtPrice
	(*Ohlc)(nil),                             // 70: org.openfeed.Ohlc
	(*InstrumentAction)(nil),                 // 71: org.openfeed.InstrumentAction
	(*DepthPriceLevel_Entry)(nil),            // 72: org.openfeed.DepthPriceLevel.Entry
	(*DepthOrder_Entry)(nil),                 // 73: org.openfeed.DepthOrder.Entry
	(*Trades_Entry)(nil),                     // 74: org.openfeed.Trades.Entry
	(*VolumeAtPrice_PriceLevelVolume)(nil),   // 75: org.openfeed.VolumeAtPrice.PriceLevelVolume
	(*InstrumentDefinition)(nil),             // 76: org.openfeed.InstrumentDefinition
}
var file_openfeed_proto_depIdxs = []int32{
	64,  // 0: org.openfeed.OpenfeedMessage.context:type_name -> org.openfeed.Context
	16,  // 1: org.openfeed.OpenfeedMessage.channelReset:type_name -> org.openfeed.ChannelReset
	17,  // 2: org.openfeed.OpenfeedMessage.heartBeat:type_name -> org.openfeed.HeartBeat
	18,  // 3: org.openfeed.OpenfeedMessage.adminMessage:type_name -> org.openfeed.AdminMessage
	76,  // 4: org.openfeed.OpenfeedMessage.instrumentDefinition:type_name -> org.openfeed.InstrumentDefinition
	19,  // 5: org.openfeed.OpenfeedMessage.instrumentGroupStatus:type_name -> org.openfeed.InstrumentGroupStatus
	23,  // 6: org.openfeed.OpenfeedMessage.marketSnapshot:type_name -> org.openfeed.MarketSnapshot
	25,  // 7: org.openfeed.OpenfeedMessage.marketUpdate:type_name -> org.openfeed.MarketUpdate
	20,  // 8: org.openfeed.OpenfeedMessage.marketStatus:type_name -> org.openfeed.MarketStatus
	21,  // 9: org.openfeed.OpenfeedMessage.eodCommoditySummary:type_name -> org.openfeed.EODCommoditySummary
	71,  // 10: org.openfeed.OpenfeedMessage.instrumentAction:type_name -> org.openfeed.InstrumentAction
	11,  // 11: org.openfeed.AdminMessage.status:type_name -> org.openfeed.AdminMessage.Status
	1,   // 12: org.openfeed.InstrumentGroupStatus.tradingStatus:type_name -> org.openfeed.InstrumentTradingStatus
	8,   // 13: org.openfeed.MarketStatus.marketWideStatus:type_name -> org.openfeed.MarketWideStatus
	43,  // 14: org.openfeed.MarketSession.open:type_name -> org.openfeed.Open
	44,  // 15: org.openfeed.MarketSession.high:type_name -> org.openfeed.High
	46,  // 16: org.openfeed.MarketSession.low:type_name -> org.openfeed.Low
	50,  // 17: org.openfeed.MarketSession.last:type_name -> org.openfeed.Last
	53,  // 18: org.openfeed.MarketSession.volume:type_name -> org.openfeed.Volume
	56,  // 19: org.openfeed.MarketSession.settlement:type_name -> org.openfeed.Settlement
	56,  // 20: org.openfeed.MarketSession.prevSettlement:type_name -> org.openfeed.Settlement
	57,  // 21: org.openfeed.MarketSession.openInterest:type_name -> org.openfeed.OpenInterest
	54,  // 22: org.openfeed.MarketSession.numberOfTrades:type_name -> org.openfeed.NumberOfTrades
	55,  // 23: org.openfeed.MarketSession.monetaryValue:type_name -> org.openfeed.MonetaryValue
	7,   // 24: org.openfeed.MarketSnapshot.service:type_name -> org.openfeed.Service
	30,  // 25: org.openfeed.MarketSnapshot.instrumentStatus:type_name -> org.openfeed.InstrumentStatus
	31,  // 26: org.openfeed.MarketSnapshot.bbo:type_name -> org.openfeed.BestBidOffer
	38,  // 27: org.openfeed.MarketSnapshot.index:type_name -> org.openfeed.IndexValue
	32,  // 28: org.openfeed.MarketSnapshot.priceLevels:type_name -> org.openfeed.AddPriceLevel
	35,  // 29: org.openfeed.MarketSnapshot.orders:type_name -> org.openfeed.AddOrder
	28,  // 30: org.openfeed.MarketSnapshot.news:type_name -> org.openfeed.News
	43,  // 31: org.openfeed.MarketSnapshot.open:type_name -> org.openfeed.Open
	44,  // 32: org.openfeed.MarketSnapshot.high:type_name -> org.openfeed.High
	46,  // 33: org.openfeed.MarketSnapshot.low:type_name -> org.openfeed.Low
	48,  // 34: org.openfeed.MarketSnapshot.close:type_name -> org.openfeed.Close
	49,  // 35: org.openfeed.MarketSnapshot.prevClose:type_name -> org.openfeed.PrevClose
	50,  // 36: org.openfeed.MarketSnapshot.last:type_name -> org.openfeed.Last
	51,  // 37: org.openfeed.MarketSnapshot.yearHigh:type_name -> org.openfeed.YearHigh
	52,  // 38: org.openfeed.MarketSnapshot.yearLow:type_name -> org.openfeed.YearLow
	53,  // 39: org.openfeed.MarketSnapshot.volume:type_name -> org.openfeed.Volume
	56,  // 40: org.openfeed.MarketSnapshot.settlement:type_name -> org.openfeed.Settlement
	57,  // 41: org.openfeed.MarketSnapshot.openInterest:type_name -> org.openfeed.OpenInterest
	58,  // 42: org.openfeed.MarketSnapshot.vwap:type_name -> org.openfeed.Vwap
	59,  // 43: org.openfeed.MarketSnapshot.dividendsIncomeDistributions:type_name -> org.openfeed.DividendsIncomeDistributions
	54,  // 44: org.openfeed.MarketSnapshot.numberOfTrades:type_name -> org.openfeed.NumberOfTrades
	55,  // 45: org.openfeed.MarketSnapshot.monetaryValue:type_name -> org.openfeed.MonetaryValue
	60,  // 46: org.openfeed.MarketSnapshot.capitalDistributions:type_name -> org.openfeed.CapitalDistributions
	61,  // 47: org.openfeed.MarketSnapshot.sharesOutstanding:type_name -> org.openfeed.SharesOutstanding
	62,  // 48: org.openfeed.MarketSnapshot.netAssetValue:type_name -> org.openfeed.NetAssetValue
	22,  // 49: org.openfeed.MarketSnapshot.previousSession:type_name -> org.openfeed.MarketSession
	22,  // 50: org.openfeed.MarketSnapshot.tSession:type_name -> org.openfeed.MarketSession
	69,  // 51: org.openfeed.MarketSnapshot.volumeAtPrice:type_name -> org.openfeed.VolumeAtPrice
	45,  // 52: org.openfeed.MarketSnapshot.highRolling:type_name -> org.openfeed.HighRolling
	47,  // 53: org.openfeed.MarketSnapshot.lowRolling:type_name -> org.openfeed.LowRolling
	22,  // 54: org.openfeed.MarketSnapshot.zSession:type_name -> org.openfeed.MarketSession
	9,   // 55: org.openfeed.MarketSnapshotResponse.result:type_name -> org.openfeed.SnapshotRequestResult
	23,  // 56: org.openfeed.MarketSnapshotResponse.marketSnapshot:type_name -> org.openfeed.MarketSnapshot
	64,  // 57: org.openfeed.MarketUpdate.context:type_name -> org.openfeed.Context
	22,  // 58: org.openfeed.MarketUpdate.session:type_name -> org.openfeed.MarketSession
	22,  // 59: org.openfeed.MarketUpdate.tSession:type_name -> org.openfeed.MarketSession
	22,  // 60: org.openfeed.MarketUpdate.previousSession:type_name -> org.openfeed.MarketSession
	22,  // 61: org.openfeed.MarketUpdate.zSession:type_name -> org.openfeed.MarketSession
	28,  // 62: org.openfeed.MarketUpdate.news:type_name -> org.openfeed.News
	29,  // 63: org.openfeed.MarketUpdate.clearBook:type_name -> org.openfeed.ClearBook
	30,  // 64: org.openfeed.MarketUpdate.instrumentStatus:type_name -> org.openfeed.InstrumentStatus
	31,  // 65: org.openfeed.MarketUpdate.bbo:type_name -> org.openfeed.BestBidOffer
	26,  // 66: org.openfeed.MarketUpdate.depthPriceLevel:type_name -> org.openfeed.DepthPriceLevel
	27,  // 67: org.openfeed.MarketUpdate.depthOrder:type_name -> org.openfeed.DepthOrder
	38,  // 68: org.openfeed.MarketUpdate.index:type_name -> org.openfeed.IndexValue
	39,  // 69: org.openfeed.MarketUpdate.trades:type_name -> org.openfeed.Trades
	43,  // 70: org.openfeed.MarketUpdate.open:type_name -> org.openfeed.Open
	44,  // 71: org.openfeed.MarketUpdate.high:type_name -> org.openfeed.High
	46,  // 72: org.openfeed.MarketUpdate.low:type_name -> org.openfeed.Low
	48,  // 73: org.openfeed.MarketUpdate.close:type_name -> org.openfeed.Close
	49,  // 74: org.openfeed.MarketUpdate.prevClose:type_name -> org.openfeed.PrevClose
	50,  // 75: org.openfeed.MarketUpdate.last:type_name -> org.openfeed.Last
	51,  // 76: org.openfeed.MarketUpdate.yearHigh:type_name -> org.openfeed.YearHigh
	52,  // 77: org.openfeed.MarketUpdate.yearLow:type_name -> org.openfeed.YearLow
	53,  // 78: org.openfeed.MarketUpdate.volume:type_name -> org.openfeed.Volume
	56,  // 79: org.openfeed.MarketUpdate.settlement:type_name -> org.openfeed.Settlement
	57,  // 80: org.openfeed.MarketUpdate.openInterest:type_name -> org.openfeed.OpenInterest
	58,  // 81: org.openfeed.MarketUpdate.vwap:type_name -> org.openfeed.Vwap
	59,  // 82: org.openfeed.MarketUpdate.dividendsIncomeDistributions:type_name -> org.openfeed.DividendsIncomeDistributions
	54,  // 83: org.openfeed.MarketUpdate.numberOfTrades:type_name -> org.openfeed.NumberOfTrades
	55,  // 84: org.openfeed.MarketUpdate.monetaryValue:type_name -> org.openfeed.MonetaryValue
	60,  // 85: org.openfeed.MarketUpdate.capitalDistributions:type_name -> org.openfeed.CapitalDistributions
	61,  // 86: org.openfeed.MarketUpdate.sharesOutstanding:type_name -> org.openfeed.SharesOutstanding
	62,  // 87: org.openfeed.MarketUpdate.netAssetValue:type_name -> org.openfeed.NetAssetValue
	63,  // 88: org.openfeed.MarketUpdate.marketSummary:type_name -> org.openfeed.MarketSummary
	45,  // 89: org.openfeed.MarketUpdate.highRolling:type_name -> org.openfeed.HighRolling
	47,  // 90: org.openfeed.MarketUpdate.lowRolling:type_name -> org.openfeed.LowRolling
	72,  // 91: org.openfeed.DepthPriceLevel.levels:type_name -> org.openfeed.DepthPriceLevel.Entry
	73,  // 92: org.openfeed.DepthOrder.orders:type_name -> org.openfeed.DepthOrder.Entry
	1,   // 93: org.openfeed.InstrumentStatus.tradingStatus:type_name -> org.openfeed.InstrumentTradingStatus
	2,   // 94: org.openfeed.InstrumentStatus.regulationSHOShortSalePriceTest:type_name -> org.openfeed.RegulationSHOShortSalePriceTest
	0,   // 95: org.openfeed.AddPriceLevel.side:type_name -> org.openfeed.BookSide
	0,   // 96: org.openfeed.DeletePriceLevel.side:type_name -> org.openfeed.BookSide
	0,   // 97: org.openfeed.ModifyPriceLevel.side:type_name -> org.openfeed.BookSide
	0,   // 98: org.openfeed.AddOrder.side:type_name -> org.openfeed.BookSide
	0,   // 99: org.openfeed.DeleteOrder.side:type_name -> org.openfeed.BookSide
	0,   // 100: org.openfeed.ModifyOrder.side:type_name -> org.openfeed.BookSide
	74,  // 101: org.openfeed.Trades.trades:type_name -> org.openfeed.Trades.Entry
	0,   // 102: org.openfeed.Trade.side:type_name -> org.openfeed.BookSide
	3,   // 103: org.openfeed.Trade.settlementTerms:type_name -> org.openfeed.SettlementTerms
	4,   // 104: org.openfeed.Trade.crossType:type_name -> org.openfeed.CrossType
	0,   // 105: org.openfeed.TradeCorrection.side:type_name -> org.openfeed.BookSide
	3,   // 106: org.openfeed.TradeCorrection.settlementTerms:type_name -> org.openfeed.SettlementTerms
	4,   // 107: org.openfeed.TradeCorrection.crossType:type_name -> org.openfeed.CrossType
	5,   // 108: org.openfeed.Open.OpenCloseSettlementFlag:type_name -> org.openfeed.OpenCloseSettlementFlag
	6,   // 109: org.openfeed.Settlement.settlementSource:type_name -> org.openfeed.SettlementSource
	12,  // 110: org.openfeed.MarketSummary.clear:type_name -> org.openfeed.MarketSummary.ClearSet
	30,  // 111: org.openfeed.MarketSummary.instrumentStatus:type_name -> org.openfeed.InstrumentStatus
	31,  // 112: org.openfeed.MarketSummary.bbo:type_name -> org.openfeed.BestBidOffer
	43,  // 113: org.openfeed.MarketSummary.open:type_name -> org.openfeed.Open
	44,  // 114: org.openfeed.MarketSummary.high:type_name -> org.openfeed.High
	46,  // 115: org.openfeed.MarketSummary.low:type_name -> org.openfeed.Low
	48,  // 116: org.openfeed.MarketSummary.close:type_name -> org.openfeed.Close
	49,  // 117: org.openfeed.MarketSummary.prevClose:type_name -> org.openfeed.PrevClose
	50,  // 118: org.openfeed.MarketSummary.last:type_name -> org.openfeed.Last
	53,  // 119: org.openfeed.MarketSummary.volume:type_name -> org.openfeed.Volume
	56,  // 120: org.openfeed.MarketSummary.settlement:type_name -> org.openfeed.Settlement
	57,  // 121: org.openfeed.MarketSummary.openInterest:type_name -> org.openfeed.OpenInterest
	58,  // 122: org.openfeed.MarketSummary.vwap:type_name -> org.openfeed.Vwap
	13,  // 123: org.openfeed.MarketSummary.summaryType:type_name -> org.openfeed.MarketSummary.SummaryType
	53,  // 124: org.openfeed.MarketSummary.prevVolume:type_name -> org.openfeed.Volume
	65,  // 125: org.openfeed.Context.data:type_name -> org.openfeed.ContextData
	66,  // 126: org.openfeed.Context.tracePoints:type_name -> org.openfeed.TracePoint
	14,  // 127: org.openfeed.SnapshotRequest.snapshotRequestTypes:type_name -> org.openfeed.SnapshotRequest.SnapshotRequestType
	75,  // 128: org.openfeed.VolumeAtPrice.priceVolumes:type_name -> org.openfeed.VolumeAtPrice.PriceLevelVolume
	43,  // 129: org.openfeed.Ohlc.open:type_name -> org.openfeed.Open
	44,  // 130: org.openfeed.Ohlc.high:type_name -> org.openfeed.High
	46,  // 131: org.openfeed.Ohlc.low:type_name -> org.openfeed.Low
	48,  // 132: org.openfeed.Ohlc.close:type_name -> org.openfeed.Close
	10,  // 133: org.openfeed.InstrumentAction.action:type_name -> org.openfeed.ActionType
	76,  // 134: org.openfeed.InstrumentAction.instrument:type_name -> org.openfeed.InstrumentDefinition
	76,  // 135: org.openfeed.InstrumentAction.newInstrument:type_name -> org.openfeed.InstrumentDefinition
	32,  // 136: org.openfeed.DepthPriceLevel.Entry.addPriceLevel:type_name -> org.openfeed.AddPriceLevel
	33,  // 137: org.openfeed.DepthPriceLevel.Entry.deletePriceLevel:type_name -> org.openfeed.DeletePriceLevel
	34,  // 138: org.openfeed.DepthPriceLevel.Entry.modifyPriceLevel:type_name -> org.openfeed.ModifyPriceLevel
	35,  // 139: org.openfeed.DepthOrder.Entry.addOrder:type_name -> org.openfeed.AddOrder
	36,  // 140: org.openfeed.DepthOrder.Entry.deleteOrder:type_name -> org.openfeed.DeleteOrder
	37,  // 141: org.openfeed.DepthOrder.Entry.modifyOrder:type_name -> org.openfeed.ModifyOrder
	40,  // 142: org.openfeed.Trades.Entry.trade:type_name -> org.openfeed.Trade
	41,  // 143: org.openfeed.Trades.Entry.tradeCorrection:type_name -> org.openfeed.TradeCorrection
	42,  // 144: org.openfeed.Trades.Entry.tradeCancel:type_name -> org.openfeed.TradeCancel
	145, // [145:145] is the sub-list for method output_type
	145, // [145:145] is the sub-list for method input_type
	145, // [145:145] is the sub-list for extension type_name
	145, // [145:145] is the sub-list for extension extendee
	0,   // [0:145] is the sub-list for field type_name
}

func init() { file_openfeed_proto_init() }
func file_openfeed_proto_init() {
	if File_openfeed_proto != nil {
		return
	}
	file_openfeed_instrument_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openfeed_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenfeedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelReset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentGroupStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EODCommoditySummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepthPriceLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepthOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*News); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BestBidOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPriceLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePriceLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPriceLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeCorrection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Open); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*High); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighRolling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Low); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LowRolling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Close); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrevClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Last); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YearHigh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YearLow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberOfTrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonetaryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenInterest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vwap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DividendsIncomeDistributions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapitalDistributions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharesOutstanding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetAssetValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCPHistoricalReplayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeAtPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ohlc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepthPriceLevel_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepthOrder_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trades_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeAtPrice_PriceLevelVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_openfeed_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*OpenfeedMessage_ChannelReset)(nil),
		(*OpenfeedMessage_HeartBeat)(nil),
		(*OpenfeedMessage_AdminMessage)(nil),
		(*OpenfeedMessage_InstrumentDefinition)(nil),
		(*OpenfeedMessage_InstrumentGroupStatus)(nil),
		(*OpenfeedMessage_MarketSnapshot)(nil),
		(*OpenfeedMessage_MarketUpdate)(nil),
		(*OpenfeedMessage_MarketStatus)(nil),
		(*OpenfeedMessage_EodCommoditySummary)(nil),
		(*OpenfeedMessage_InstrumentAction)(nil),
	}
	file_openfeed_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*MarketUpdate_News)(nil),
		(*MarketUpdate_ClearBook)(nil),
		(*MarketUpdate_InstrumentStatus)(nil),
		(*MarketUpdate_Bbo)(nil),
		(*MarketUpdate_DepthPriceLevel)(nil),
		(*MarketUpdate_DepthOrder)(nil),
		(*MarketUpdate_Index)(nil),
		(*MarketUpdate_Trades)(nil),
		(*MarketUpdate_Open)(nil),
		(*MarketUpdate_High)(nil),
		(*MarketUpdate_Low)(nil),
		(*MarketUpdate_Close)(nil),
		(*MarketUpdate_PrevClose)(nil),
		(*MarketUpdate_Last)(nil),
		(*MarketUpdate_YearHigh)(nil),
		(*MarketUpdate_YearLow)(nil),
		(*MarketUpdate_Volume)(nil),
		(*MarketUpdate_Settlement)(nil),
		(*MarketUpdate_OpenInterest)(nil),
		(*MarketUpdate_Vwap)(nil),
		(*MarketUpdate_DividendsIncomeDistributions)(nil),
		(*MarketUpdate_NumberOfTrades)(nil),
		(*MarketUpdate_MonetaryValue)(nil),
		(*MarketUpdate_CapitalDistributions)(nil),
		(*MarketUpdate_SharesOutstanding)(nil),
		(*MarketUpdate_NetAssetValue)(nil),
		(*MarketUpdate_MarketSummary)(nil),
		(*MarketUpdate_HighRolling)(nil),
		(*MarketUpdate_LowRolling)(nil),
	}
	file_openfeed_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*ContextData_Vstring)(nil),
		(*ContextData_Vbytes)(nil),
		(*ContextData_Vbool)(nil),
		(*ContextData_Vsint32)(nil),
		(*ContextData_Vsint64)(nil),
		(*ContextData_Vfloat)(nil),
		(*ContextData_Vdouble)(nil),
	}
	file_openfeed_proto_msgTypes[57].OneofWrappers = []interface{}{
		(*DepthPriceLevel_Entry_AddPriceLevel)(nil),
		(*DepthPriceLevel_Entry_DeletePriceLevel)(nil),
		(*DepthPriceLevel_Entry_ModifyPriceLevel)(nil),
	}
	file_openfeed_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*DepthOrder_Entry_AddOrder)(nil),
		(*DepthOrder_Entry_DeleteOrder)(nil),
		(*DepthOrder_Entry_ModifyOrder)(nil),
	}
	file_openfeed_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*Trades_Entry_Trade)(nil),
		(*Trades_Entry_TradeCorrection)(nil),
		(*Trades_Entry_TradeCancel)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openfeed_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openfeed_proto_goTypes,
		DependencyIndexes: file_openfeed_proto_depIdxs,
		EnumInfos:         file_openfeed_proto_enumTypes,
		MessageInfos:      file_openfeed_proto_msgTypes,
	}.Build()
	File_openfeed_proto = out.File
	file_openfeed_proto_rawDesc = nil
	file_openfeed_proto_goTypes = nil
	file_openfeed_proto_depIdxs = nil
}
