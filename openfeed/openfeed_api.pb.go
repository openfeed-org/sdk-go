//*
// Copyright (C) 2011-2017 Barchart, Inc. <http://www.barchart.com/>
//
// All rights reserved. Licensed under the OSI BSD License.
//
// http://www.opensource.org/licenses/bsd-license.php

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: openfeed_api.proto

package openfeed

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Result int32

const (
	Result_UNKNOWN_RESULT          Result = 0
	Result_SUCCESS                 Result = 1
	Result_DUPLICATE_LOGIN         Result = 115
	Result_INVALID_SYMBOL          Result = 116
	Result_INVALID_MARKET_ID       Result = 117
	Result_INVALID_EXCHANGE        Result = 118
	Result_INVALID_CHANNEL_ID      Result = 119
	Result_MALFORMED_MESSAGE       Result = 120
	Result_UNEXPECTED_MESSAGE      Result = 121
	Result_NOT_SUBSCRIBED          Result = 122
	Result_DUPLICATE_SUBSCRIPTION  Result = 123
	Result_INVALID_CREDENTIALS     Result = 124
	Result_INSUFFICIENT_PRIVILEGES Result = 125
	Result_AUTHENTICATION_REQUIRED Result = 126
	Result_GENERIC_FAILURE         Result = 127
)

// Enum value maps for Result.
var (
	Result_name = map[int32]string{
		0:   "UNKNOWN_RESULT",
		1:   "SUCCESS",
		115: "DUPLICATE_LOGIN",
		116: "INVALID_SYMBOL",
		117: "INVALID_MARKET_ID",
		118: "INVALID_EXCHANGE",
		119: "INVALID_CHANNEL_ID",
		120: "MALFORMED_MESSAGE",
		121: "UNEXPECTED_MESSAGE",
		122: "NOT_SUBSCRIBED",
		123: "DUPLICATE_SUBSCRIPTION",
		124: "INVALID_CREDENTIALS",
		125: "INSUFFICIENT_PRIVILEGES",
		126: "AUTHENTICATION_REQUIRED",
		127: "GENERIC_FAILURE",
	}
	Result_value = map[string]int32{
		"UNKNOWN_RESULT":          0,
		"SUCCESS":                 1,
		"DUPLICATE_LOGIN":         115,
		"INVALID_SYMBOL":          116,
		"INVALID_MARKET_ID":       117,
		"INVALID_EXCHANGE":        118,
		"INVALID_CHANNEL_ID":      119,
		"MALFORMED_MESSAGE":       120,
		"UNEXPECTED_MESSAGE":      121,
		"NOT_SUBSCRIBED":          122,
		"DUPLICATE_SUBSCRIPTION":  123,
		"INVALID_CREDENTIALS":     124,
		"INSUFFICIENT_PRIVILEGES": 125,
		"AUTHENTICATION_REQUIRED": 126,
		"GENERIC_FAILURE":         127,
	}
)

func (x Result) Enum() *Result {
	p := new(Result)
	*p = x
	return p
}

func (x Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Result) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_api_proto_enumTypes[0].Descriptor()
}

func (Result) Type() protoreflect.EnumType {
	return &file_openfeed_api_proto_enumTypes[0]
}

func (x Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Result.Descriptor instead.
func (Result) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{0}
}

type SubscriptionType int32

const (
	SubscriptionType_ALL               SubscriptionType = 0
	SubscriptionType_QUOTE             SubscriptionType = 1
	SubscriptionType_QUOTE_PARTICIPANT SubscriptionType = 2
	SubscriptionType_DEPTH_PRICE       SubscriptionType = 3
	SubscriptionType_DEPTH_ORDER       SubscriptionType = 4
	SubscriptionType_TRADES            SubscriptionType = 5
	SubscriptionType_CUMLATIVE_VOLUME  SubscriptionType = 6
	SubscriptionType_OHLC              SubscriptionType = 7
	SubscriptionType_OHLC_NON_REGULAR  SubscriptionType = 8
)

// Enum value maps for SubscriptionType.
var (
	SubscriptionType_name = map[int32]string{
		0: "ALL",
		1: "QUOTE",
		2: "QUOTE_PARTICIPANT",
		3: "DEPTH_PRICE",
		4: "DEPTH_ORDER",
		5: "TRADES",
		6: "CUMLATIVE_VOLUME",
		7: "OHLC",
		8: "OHLC_NON_REGULAR",
	}
	SubscriptionType_value = map[string]int32{
		"ALL":               0,
		"QUOTE":             1,
		"QUOTE_PARTICIPANT": 2,
		"DEPTH_PRICE":       3,
		"DEPTH_ORDER":       4,
		"TRADES":            5,
		"CUMLATIVE_VOLUME":  6,
		"OHLC":              7,
		"OHLC_NON_REGULAR":  8,
	}
)

func (x SubscriptionType) Enum() *SubscriptionType {
	p := new(SubscriptionType)
	*p = x
	return p
}

func (x SubscriptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_api_proto_enumTypes[1].Descriptor()
}

func (SubscriptionType) Type() protoreflect.EnumType {
	return &file_openfeed_api_proto_enumTypes[1]
}

func (x SubscriptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionType.Descriptor instead.
func (SubscriptionType) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{1}
}

/// Openfeed Server request
type OpenfeedGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*OpenfeedGatewayRequest_LoginRequest
	//	*OpenfeedGatewayRequest_LogoutRequest
	//	*OpenfeedGatewayRequest_SubscriptionRequest
	//	*OpenfeedGatewayRequest_InstrumentRequest
	//	*OpenfeedGatewayRequest_InstrumentReferenceRequest
	//	*OpenfeedGatewayRequest_ExchangeRequest
	Data isOpenfeedGatewayRequest_Data `protobuf_oneof:"data"`
}

func (x *OpenfeedGatewayRequest) Reset() {
	*x = OpenfeedGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenfeedGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenfeedGatewayRequest) ProtoMessage() {}

func (x *OpenfeedGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenfeedGatewayRequest.ProtoReflect.Descriptor instead.
func (*OpenfeedGatewayRequest) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{0}
}

func (m *OpenfeedGatewayRequest) GetData() isOpenfeedGatewayRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *OpenfeedGatewayRequest) GetLoginRequest() *LoginRequest {
	if x, ok := x.GetData().(*OpenfeedGatewayRequest_LoginRequest); ok {
		return x.LoginRequest
	}
	return nil
}

func (x *OpenfeedGatewayRequest) GetLogoutRequest() *LogoutRequest {
	if x, ok := x.GetData().(*OpenfeedGatewayRequest_LogoutRequest); ok {
		return x.LogoutRequest
	}
	return nil
}

func (x *OpenfeedGatewayRequest) GetSubscriptionRequest() *SubscriptionRequest {
	if x, ok := x.GetData().(*OpenfeedGatewayRequest_SubscriptionRequest); ok {
		return x.SubscriptionRequest
	}
	return nil
}

func (x *OpenfeedGatewayRequest) GetInstrumentRequest() *InstrumentRequest {
	if x, ok := x.GetData().(*OpenfeedGatewayRequest_InstrumentRequest); ok {
		return x.InstrumentRequest
	}
	return nil
}

func (x *OpenfeedGatewayRequest) GetInstrumentReferenceRequest() *InstrumentReferenceRequest {
	if x, ok := x.GetData().(*OpenfeedGatewayRequest_InstrumentReferenceRequest); ok {
		return x.InstrumentReferenceRequest
	}
	return nil
}

func (x *OpenfeedGatewayRequest) GetExchangeRequest() *ExchangeRequest {
	if x, ok := x.GetData().(*OpenfeedGatewayRequest_ExchangeRequest); ok {
		return x.ExchangeRequest
	}
	return nil
}

type isOpenfeedGatewayRequest_Data interface {
	isOpenfeedGatewayRequest_Data()
}

type OpenfeedGatewayRequest_LoginRequest struct {
	LoginRequest *LoginRequest `protobuf:"bytes,1,opt,name=loginRequest,proto3,oneof"`
}

type OpenfeedGatewayRequest_LogoutRequest struct {
	LogoutRequest *LogoutRequest `protobuf:"bytes,2,opt,name=logoutRequest,proto3,oneof"`
}

type OpenfeedGatewayRequest_SubscriptionRequest struct {
	SubscriptionRequest *SubscriptionRequest `protobuf:"bytes,3,opt,name=subscriptionRequest,proto3,oneof"`
}

type OpenfeedGatewayRequest_InstrumentRequest struct {
	InstrumentRequest *InstrumentRequest `protobuf:"bytes,4,opt,name=instrumentRequest,proto3,oneof"`
}

type OpenfeedGatewayRequest_InstrumentReferenceRequest struct {
	InstrumentReferenceRequest *InstrumentReferenceRequest `protobuf:"bytes,5,opt,name=instrumentReferenceRequest,proto3,oneof"`
}

type OpenfeedGatewayRequest_ExchangeRequest struct {
	ExchangeRequest *ExchangeRequest `protobuf:"bytes,6,opt,name=exchangeRequest,proto3,oneof"`
}

func (*OpenfeedGatewayRequest_LoginRequest) isOpenfeedGatewayRequest_Data() {}

func (*OpenfeedGatewayRequest_LogoutRequest) isOpenfeedGatewayRequest_Data() {}

func (*OpenfeedGatewayRequest_SubscriptionRequest) isOpenfeedGatewayRequest_Data() {}

func (*OpenfeedGatewayRequest_InstrumentRequest) isOpenfeedGatewayRequest_Data() {}

func (*OpenfeedGatewayRequest_InstrumentReferenceRequest) isOpenfeedGatewayRequest_Data() {}

func (*OpenfeedGatewayRequest_ExchangeRequest) isOpenfeedGatewayRequest_Data() {}

/// Openfeed Server Response
type OpenfeedGatewayMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*OpenfeedGatewayMessage_LoginResponse
	//	*OpenfeedGatewayMessage_LogoutResponse
	//	*OpenfeedGatewayMessage_InstrumentResponse
	//	*OpenfeedGatewayMessage_InstrumentReferenceResponse
	//	*OpenfeedGatewayMessage_SubscriptionResponse
	//	*OpenfeedGatewayMessage_MarketStatus
	//	*OpenfeedGatewayMessage_HeartBeat
	//	*OpenfeedGatewayMessage_InstrumentDefinition
	//	*OpenfeedGatewayMessage_MarketSnapshot
	//	*OpenfeedGatewayMessage_MarketUpdate
	//	*OpenfeedGatewayMessage_VolumeAtPrice
	//	*OpenfeedGatewayMessage_Ohlc
	//	*OpenfeedGatewayMessage_ExchangeResponse
	//	*OpenfeedGatewayMessage_InstrumentAction
	Data isOpenfeedGatewayMessage_Data `protobuf_oneof:"data"`
}

func (x *OpenfeedGatewayMessage) Reset() {
	*x = OpenfeedGatewayMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenfeedGatewayMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenfeedGatewayMessage) ProtoMessage() {}

func (x *OpenfeedGatewayMessage) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenfeedGatewayMessage.ProtoReflect.Descriptor instead.
func (*OpenfeedGatewayMessage) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{1}
}

func (m *OpenfeedGatewayMessage) GetData() isOpenfeedGatewayMessage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *OpenfeedGatewayMessage) GetLoginResponse() *LoginResponse {
	if x, ok := x.GetData().(*OpenfeedGatewayMessage_LoginResponse); ok {
		return x.LoginResponse
	}
	return nil
}

func (x *OpenfeedGatewayMessage) GetLogoutResponse() *LogoutResponse {
	if x, ok := x.GetData().(*OpenfeedGatewayMessage_LogoutResponse); ok {
		return x.LogoutResponse
	}
	return nil
}

func (x *OpenfeedGatewayMessage) GetInstrumentResponse() *InstrumentResponse {
	if x, ok := x.GetData().(*OpenfeedGatewayMessage_InstrumentResponse); ok {
		return x.InstrumentResponse
	}
	return nil
}

func (x *OpenfeedGatewayMessage) GetInstrumentReferenceResponse() *InstrumentReferenceResponse {
	if x, ok := x.GetData().(*OpenfeedGatewayMessage_InstrumentReferenceResponse); ok {
		return x.InstrumentReferenceResponse
	}
	return nil
}

func (x *OpenfeedGatewayMessage) GetSubscriptionResponse() *SubscriptionResponse {
	if x, ok := x.GetData().(*OpenfeedGatewayMessage_SubscriptionResponse); ok {
		return x.SubscriptionResponse
	}
	return nil
}

func (x *OpenfeedGatewayMessage) GetMarketStatus() *MarketStatus {
	if x, ok := x.GetData().(*OpenfeedGatewayMessage_MarketStatus); ok {
		return x.MarketStatus
	}
	return nil
}

func (x *OpenfeedGatewayMessage) GetHeartBeat() *HeartBeat {
	if x, ok := x.GetData().(*OpenfeedGatewayMessage_HeartBeat); ok {
		return x.HeartBeat
	}
	return nil
}

func (x *OpenfeedGatewayMessage) GetInstrumentDefinition() *InstrumentDefinition {
	if x, ok := x.GetData().(*OpenfeedGatewayMessage_InstrumentDefinition); ok {
		return x.InstrumentDefinition
	}
	return nil
}

func (x *OpenfeedGatewayMessage) GetMarketSnapshot() *MarketSnapshot {
	if x, ok := x.GetData().(*OpenfeedGatewayMessage_MarketSnapshot); ok {
		return x.MarketSnapshot
	}
	return nil
}

func (x *OpenfeedGatewayMessage) GetMarketUpdate() *MarketUpdate {
	if x, ok := x.GetData().(*OpenfeedGatewayMessage_MarketUpdate); ok {
		return x.MarketUpdate
	}
	return nil
}

func (x *OpenfeedGatewayMessage) GetVolumeAtPrice() *VolumeAtPrice {
	if x, ok := x.GetData().(*OpenfeedGatewayMessage_VolumeAtPrice); ok {
		return x.VolumeAtPrice
	}
	return nil
}

func (x *OpenfeedGatewayMessage) GetOhlc() *Ohlc {
	if x, ok := x.GetData().(*OpenfeedGatewayMessage_Ohlc); ok {
		return x.Ohlc
	}
	return nil
}

func (x *OpenfeedGatewayMessage) GetExchangeResponse() *ExchangeResponse {
	if x, ok := x.GetData().(*OpenfeedGatewayMessage_ExchangeResponse); ok {
		return x.ExchangeResponse
	}
	return nil
}

func (x *OpenfeedGatewayMessage) GetInstrumentAction() *InstrumentAction {
	if x, ok := x.GetData().(*OpenfeedGatewayMessage_InstrumentAction); ok {
		return x.InstrumentAction
	}
	return nil
}

type isOpenfeedGatewayMessage_Data interface {
	isOpenfeedGatewayMessage_Data()
}

type OpenfeedGatewayMessage_LoginResponse struct {
	LoginResponse *LoginResponse `protobuf:"bytes,1,opt,name=loginResponse,proto3,oneof"`
}

type OpenfeedGatewayMessage_LogoutResponse struct {
	LogoutResponse *LogoutResponse `protobuf:"bytes,2,opt,name=logoutResponse,proto3,oneof"`
}

type OpenfeedGatewayMessage_InstrumentResponse struct {
	InstrumentResponse *InstrumentResponse `protobuf:"bytes,3,opt,name=instrumentResponse,proto3,oneof"`
}

type OpenfeedGatewayMessage_InstrumentReferenceResponse struct {
	InstrumentReferenceResponse *InstrumentReferenceResponse `protobuf:"bytes,4,opt,name=instrumentReferenceResponse,proto3,oneof"`
}

type OpenfeedGatewayMessage_SubscriptionResponse struct {
	SubscriptionResponse *SubscriptionResponse `protobuf:"bytes,5,opt,name=subscriptionResponse,proto3,oneof"`
}

type OpenfeedGatewayMessage_MarketStatus struct {
	MarketStatus *MarketStatus `protobuf:"bytes,6,opt,name=marketStatus,proto3,oneof"`
}

type OpenfeedGatewayMessage_HeartBeat struct {
	HeartBeat *HeartBeat `protobuf:"bytes,7,opt,name=heartBeat,proto3,oneof"`
}

type OpenfeedGatewayMessage_InstrumentDefinition struct {
	InstrumentDefinition *InstrumentDefinition `protobuf:"bytes,8,opt,name=instrumentDefinition,proto3,oneof"`
}

type OpenfeedGatewayMessage_MarketSnapshot struct {
	MarketSnapshot *MarketSnapshot `protobuf:"bytes,9,opt,name=marketSnapshot,proto3,oneof"`
}

type OpenfeedGatewayMessage_MarketUpdate struct {
	MarketUpdate *MarketUpdate `protobuf:"bytes,10,opt,name=marketUpdate,proto3,oneof"`
}

type OpenfeedGatewayMessage_VolumeAtPrice struct {
	VolumeAtPrice *VolumeAtPrice `protobuf:"bytes,11,opt,name=volumeAtPrice,proto3,oneof"`
}

type OpenfeedGatewayMessage_Ohlc struct {
	Ohlc *Ohlc `protobuf:"bytes,12,opt,name=ohlc,proto3,oneof"`
}

type OpenfeedGatewayMessage_ExchangeResponse struct {
	ExchangeResponse *ExchangeResponse `protobuf:"bytes,13,opt,name=exchangeResponse,proto3,oneof"`
}

type OpenfeedGatewayMessage_InstrumentAction struct {
	InstrumentAction *InstrumentAction `protobuf:"bytes,14,opt,name=instrumentAction,proto3,oneof"`
}

func (*OpenfeedGatewayMessage_LoginResponse) isOpenfeedGatewayMessage_Data() {}

func (*OpenfeedGatewayMessage_LogoutResponse) isOpenfeedGatewayMessage_Data() {}

func (*OpenfeedGatewayMessage_InstrumentResponse) isOpenfeedGatewayMessage_Data() {}

func (*OpenfeedGatewayMessage_InstrumentReferenceResponse) isOpenfeedGatewayMessage_Data() {}

func (*OpenfeedGatewayMessage_SubscriptionResponse) isOpenfeedGatewayMessage_Data() {}

func (*OpenfeedGatewayMessage_MarketStatus) isOpenfeedGatewayMessage_Data() {}

func (*OpenfeedGatewayMessage_HeartBeat) isOpenfeedGatewayMessage_Data() {}

func (*OpenfeedGatewayMessage_InstrumentDefinition) isOpenfeedGatewayMessage_Data() {}

func (*OpenfeedGatewayMessage_MarketSnapshot) isOpenfeedGatewayMessage_Data() {}

func (*OpenfeedGatewayMessage_MarketUpdate) isOpenfeedGatewayMessage_Data() {}

func (*OpenfeedGatewayMessage_VolumeAtPrice) isOpenfeedGatewayMessage_Data() {}

func (*OpenfeedGatewayMessage_Ohlc) isOpenfeedGatewayMessage_Data() {}

func (*OpenfeedGatewayMessage_ExchangeResponse) isOpenfeedGatewayMessage_Data() {}

func (*OpenfeedGatewayMessage_InstrumentAction) isOpenfeedGatewayMessage_Data() {}

////////////////////
// Serivce Messages
///////////////////
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  Result  `protobuf:"varint,1,opt,name=result,proto3,enum=org.openfeed.Result" json:"result,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Service Service `protobuf:"varint,3,opt,name=service,proto3,enum=org.openfeed.Service" json:"service,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{2}
}

func (x *Status) GetResult() Result {
	if x != nil {
		return x.Result
	}
	return Result_UNKNOWN_RESULT
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Status) GetService() Service {
	if x != nil {
		return x.Service
	}
	return Service_UNKNOWN_SERVICE
}

/// Login
type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId int64  `protobuf:"zigzag64,1,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	Username      string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password      string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	ClientVersion string `protobuf:"bytes,4,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{3}
}

func (x *LoginRequest) GetCorrelationId() int64 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *LoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId int64   `protobuf:"zigzag64,1,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	Status        *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Token         string  `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{4}
}

func (x *LoginResponse) GetCorrelationId() int64 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *LoginResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *LoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

/// Logout
type LogoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId int64  `protobuf:"zigzag64,1,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	Token         string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{5}
}

func (x *LogoutRequest) GetCorrelationId() int64 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *LogoutRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type LogoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId int64   `protobuf:"zigzag64,1,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	Status        *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *LogoutResponse) Reset() {
	*x = LogoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResponse) ProtoMessage() {}

func (x *LogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResponse.ProtoReflect.Descriptor instead.
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{6}
}

func (x *LogoutResponse) GetCorrelationId() int64 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *LogoutResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

/// Instrument Definition(s), will stream InstrumentDefinition(s)
type InstrumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId int64  `protobuf:"zigzag64,1,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	Token         string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// Types that are assignable to Request:
	//	*InstrumentRequest_Symbol
	//	*InstrumentRequest_MarketId
	//	*InstrumentRequest_Exchange
	//	*InstrumentRequest_ChannelId
	Request isInstrumentRequest_Request `protobuf_oneof:"request"`
}

func (x *InstrumentRequest) Reset() {
	*x = InstrumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentRequest) ProtoMessage() {}

func (x *InstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentRequest.ProtoReflect.Descriptor instead.
func (*InstrumentRequest) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{7}
}

func (x *InstrumentRequest) GetCorrelationId() int64 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *InstrumentRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (m *InstrumentRequest) GetRequest() isInstrumentRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *InstrumentRequest) GetSymbol() string {
	if x, ok := x.GetRequest().(*InstrumentRequest_Symbol); ok {
		return x.Symbol
	}
	return ""
}

func (x *InstrumentRequest) GetMarketId() int64 {
	if x, ok := x.GetRequest().(*InstrumentRequest_MarketId); ok {
		return x.MarketId
	}
	return 0
}

func (x *InstrumentRequest) GetExchange() string {
	if x, ok := x.GetRequest().(*InstrumentRequest_Exchange); ok {
		return x.Exchange
	}
	return ""
}

func (x *InstrumentRequest) GetChannelId() int32 {
	if x, ok := x.GetRequest().(*InstrumentRequest_ChannelId); ok {
		return x.ChannelId
	}
	return 0
}

type isInstrumentRequest_Request interface {
	isInstrumentRequest_Request()
}

type InstrumentRequest_Symbol struct {
	Symbol string `protobuf:"bytes,10,opt,name=symbol,proto3,oneof"`
}

type InstrumentRequest_MarketId struct {
	MarketId int64 `protobuf:"zigzag64,11,opt,name=marketId,proto3,oneof"`
}

type InstrumentRequest_Exchange struct {
	Exchange string `protobuf:"bytes,12,opt,name=exchange,proto3,oneof"`
}

type InstrumentRequest_ChannelId struct {
	ChannelId int32 `protobuf:"zigzag32,13,opt,name=channelId,proto3,oneof"`
}

func (*InstrumentRequest_Symbol) isInstrumentRequest_Request() {}

func (*InstrumentRequest_MarketId) isInstrumentRequest_Request() {}

func (*InstrumentRequest_Exchange) isInstrumentRequest_Request() {}

func (*InstrumentRequest_ChannelId) isInstrumentRequest_Request() {}

type InstrumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId       int64   `protobuf:"zigzag64,1,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	Status              *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	NumberOfDefinitions int32   `protobuf:"zigzag32,3,opt,name=numberOfDefinitions,proto3" json:"numberOfDefinitions,omitempty"`
	//
	Symbol    string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	MarketId  int64  `protobuf:"zigzag64,5,opt,name=marketId,proto3" json:"marketId,omitempty"`
	Exchange  string `protobuf:"bytes,6,opt,name=exchange,proto3" json:"exchange,omitempty"`
	ChannelId int32  `protobuf:"zigzag32,7,opt,name=channelId,proto3" json:"channelId,omitempty"`
}

func (x *InstrumentResponse) Reset() {
	*x = InstrumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentResponse) ProtoMessage() {}

func (x *InstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentResponse.ProtoReflect.Descriptor instead.
func (*InstrumentResponse) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{8}
}

func (x *InstrumentResponse) GetCorrelationId() int64 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *InstrumentResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InstrumentResponse) GetNumberOfDefinitions() int32 {
	if x != nil {
		return x.NumberOfDefinitions
	}
	return 0
}

func (x *InstrumentResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *InstrumentResponse) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *InstrumentResponse) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *InstrumentResponse) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

/// Instrument References, returns InstrumentReferenceResponse(s)
type InstrumentReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId int64  `protobuf:"zigzag64,1,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	Token         string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// Types that are assignable to Request:
	//	*InstrumentReferenceRequest_Symbol
	//	*InstrumentReferenceRequest_MarketId
	//	*InstrumentReferenceRequest_Exchange
	//	*InstrumentReferenceRequest_ChannelId
	Request isInstrumentReferenceRequest_Request `protobuf_oneof:"request"`
}

func (x *InstrumentReferenceRequest) Reset() {
	*x = InstrumentReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentReferenceRequest) ProtoMessage() {}

func (x *InstrumentReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentReferenceRequest.ProtoReflect.Descriptor instead.
func (*InstrumentReferenceRequest) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{9}
}

func (x *InstrumentReferenceRequest) GetCorrelationId() int64 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *InstrumentReferenceRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (m *InstrumentReferenceRequest) GetRequest() isInstrumentReferenceRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *InstrumentReferenceRequest) GetSymbol() string {
	if x, ok := x.GetRequest().(*InstrumentReferenceRequest_Symbol); ok {
		return x.Symbol
	}
	return ""
}

func (x *InstrumentReferenceRequest) GetMarketId() int64 {
	if x, ok := x.GetRequest().(*InstrumentReferenceRequest_MarketId); ok {
		return x.MarketId
	}
	return 0
}

func (x *InstrumentReferenceRequest) GetExchange() string {
	if x, ok := x.GetRequest().(*InstrumentReferenceRequest_Exchange); ok {
		return x.Exchange
	}
	return ""
}

func (x *InstrumentReferenceRequest) GetChannelId() int32 {
	if x, ok := x.GetRequest().(*InstrumentReferenceRequest_ChannelId); ok {
		return x.ChannelId
	}
	return 0
}

type isInstrumentReferenceRequest_Request interface {
	isInstrumentReferenceRequest_Request()
}

type InstrumentReferenceRequest_Symbol struct {
	Symbol string `protobuf:"bytes,10,opt,name=symbol,proto3,oneof"`
}

type InstrumentReferenceRequest_MarketId struct {
	MarketId int64 `protobuf:"zigzag64,11,opt,name=marketId,proto3,oneof"`
}

type InstrumentReferenceRequest_Exchange struct {
	Exchange string `protobuf:"bytes,12,opt,name=exchange,proto3,oneof"`
}

type InstrumentReferenceRequest_ChannelId struct {
	ChannelId int32 `protobuf:"zigzag32,13,opt,name=channelId,proto3,oneof"`
}

func (*InstrumentReferenceRequest_Symbol) isInstrumentReferenceRequest_Request() {}

func (*InstrumentReferenceRequest_MarketId) isInstrumentReferenceRequest_Request() {}

func (*InstrumentReferenceRequest_Exchange) isInstrumentReferenceRequest_Request() {}

func (*InstrumentReferenceRequest_ChannelId) isInstrumentReferenceRequest_Request() {}

type InstrumentReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId       int64   `protobuf:"zigzag64,1,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	Status              *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	NumberOfDefinitions int32   `protobuf:"zigzag32,3,opt,name=numberOfDefinitions,proto3" json:"numberOfDefinitions,omitempty"`
	//
	ChannelId      int32  `protobuf:"zigzag32,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	MarketId       int64  `protobuf:"zigzag64,5,opt,name=marketId,proto3" json:"marketId,omitempty"`
	Symbol         string `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Exchange       string `protobuf:"bytes,7,opt,name=exchange,proto3" json:"exchange,omitempty"`
	DdfSymbol      string `protobuf:"bytes,8,opt,name=ddfSymbol,proto3" json:"ddfSymbol,omitempty"`
	DdfExchange    string `protobuf:"bytes,9,opt,name=ddfExchange,proto3" json:"ddfExchange,omitempty"`
	DdfBaseCode    string `protobuf:"bytes,10,opt,name=ddfBaseCode,proto3" json:"ddfBaseCode,omitempty"`
	ExchangeSymbol string `protobuf:"bytes,11,opt,name=exchangeSymbol,proto3" json:"exchangeSymbol,omitempty"`
}

func (x *InstrumentReferenceResponse) Reset() {
	*x = InstrumentReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentReferenceResponse) ProtoMessage() {}

func (x *InstrumentReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentReferenceResponse.ProtoReflect.Descriptor instead.
func (*InstrumentReferenceResponse) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{10}
}

func (x *InstrumentReferenceResponse) GetCorrelationId() int64 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *InstrumentReferenceResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InstrumentReferenceResponse) GetNumberOfDefinitions() int32 {
	if x != nil {
		return x.NumberOfDefinitions
	}
	return 0
}

func (x *InstrumentReferenceResponse) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *InstrumentReferenceResponse) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *InstrumentReferenceResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *InstrumentReferenceResponse) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *InstrumentReferenceResponse) GetDdfSymbol() string {
	if x != nil {
		return x.DdfSymbol
	}
	return ""
}

func (x *InstrumentReferenceResponse) GetDdfExchange() string {
	if x != nil {
		return x.DdfExchange
	}
	return ""
}

func (x *InstrumentReferenceResponse) GetDdfBaseCode() string {
	if x != nil {
		return x.DdfBaseCode
	}
	return ""
}

func (x *InstrumentReferenceResponse) GetExchangeSymbol() string {
	if x != nil {
		return x.ExchangeSymbol
	}
	return ""
}

/// Exchange Request, returns ExchangeResponse.  Gives available exchanges.
type ExchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId int64  `protobuf:"zigzag64,1,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	Token         string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ExchangeRequest) Reset() {
	*x = ExchangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRequest) ProtoMessage() {}

func (x *ExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRequest.ProtoReflect.Descriptor instead.
func (*ExchangeRequest) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{11}
}

func (x *ExchangeRequest) GetCorrelationId() int64 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *ExchangeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ExchangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId int64                        `protobuf:"zigzag64,1,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	Status        *Status                      `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Exchanges     []*ExchangeResponse_Exchange `protobuf:"bytes,3,rep,name=exchanges,proto3" json:"exchanges,omitempty"`
}

func (x *ExchangeResponse) Reset() {
	*x = ExchangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeResponse) ProtoMessage() {}

func (x *ExchangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeResponse.ProtoReflect.Descriptor instead.
func (*ExchangeResponse) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{12}
}

func (x *ExchangeResponse) GetCorrelationId() int64 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *ExchangeResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ExchangeResponse) GetExchanges() []*ExchangeResponse_Exchange {
	if x != nil {
		return x.Exchanges
	}
	return nil
}

/// Subscription Request
type SubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Client-assigned id for this request.  Response will include same id
	CorrelationId int64  `protobuf:"zigzag64,1,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	Token         string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	/// Preferred service (realtime or delayed).
	Service     Service                        `protobuf:"varint,3,opt,name=service,proto3,enum=org.openfeed.Service" json:"service,omitempty"`
	Unsubscribe bool                           `protobuf:"varint,4,opt,name=unsubscribe,proto3" json:"unsubscribe,omitempty"`
	Requests    []*SubscriptionRequest_Request `protobuf:"bytes,5,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *SubscriptionRequest) Reset() {
	*x = SubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionRequest) ProtoMessage() {}

func (x *SubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{13}
}

func (x *SubscriptionRequest) GetCorrelationId() int64 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *SubscriptionRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SubscriptionRequest) GetService() Service {
	if x != nil {
		return x.Service
	}
	return Service_UNKNOWN_SERVICE
}

func (x *SubscriptionRequest) GetUnsubscribe() bool {
	if x != nil {
		return x.Unsubscribe
	}
	return false
}

func (x *SubscriptionRequest) GetRequests() []*SubscriptionRequest_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

type SubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId       int64            `protobuf:"zigzag64,1,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	Status              *Status          `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Symbol              string           `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	MarketId            int64            `protobuf:"zigzag64,4,opt,name=marketId,proto3" json:"marketId,omitempty"`
	Exchange            string           `protobuf:"bytes,5,opt,name=exchange,proto3" json:"exchange,omitempty"`
	ChannelId           int32            `protobuf:"zigzag32,6,opt,name=channelId,proto3" json:"channelId,omitempty"`
	NumberOfDefinitions int32            `protobuf:"zigzag32,7,opt,name=numberOfDefinitions,proto3" json:"numberOfDefinitions,omitempty"`
	SubscriptionType    SubscriptionType `protobuf:"varint,8,opt,name=subscriptionType,proto3,enum=org.openfeed.SubscriptionType" json:"subscriptionType,omitempty"`
	Unsubscribe         bool             `protobuf:"varint,9,opt,name=unsubscribe,proto3" json:"unsubscribe,omitempty"`
}

func (x *SubscriptionResponse) Reset() {
	*x = SubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionResponse) ProtoMessage() {}

func (x *SubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionResponse.ProtoReflect.Descriptor instead.
func (*SubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{14}
}

func (x *SubscriptionResponse) GetCorrelationId() int64 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *SubscriptionResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SubscriptionResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SubscriptionResponse) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *SubscriptionResponse) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SubscriptionResponse) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *SubscriptionResponse) GetNumberOfDefinitions() int32 {
	if x != nil {
		return x.NumberOfDefinitions
	}
	return 0
}

func (x *SubscriptionResponse) GetSubscriptionType() SubscriptionType {
	if x != nil {
		return x.SubscriptionType
	}
	return SubscriptionType_ALL
}

func (x *SubscriptionResponse) GetUnsubscribe() bool {
	if x != nil {
		return x.Unsubscribe
	}
	return false
}

type ExchangeResponse_Exchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Aliases     []string `protobuf:"bytes,3,rep,name=aliases,proto3" json:"aliases,omitempty"`
}

func (x *ExchangeResponse_Exchange) Reset() {
	*x = ExchangeResponse_Exchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeResponse_Exchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeResponse_Exchange) ProtoMessage() {}

func (x *ExchangeResponse_Exchange) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeResponse_Exchange.ProtoReflect.Descriptor instead.
func (*ExchangeResponse_Exchange) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ExchangeResponse_Exchange) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ExchangeResponse_Exchange) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExchangeResponse_Exchange) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

type SubscriptionRequest_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*SubscriptionRequest_Request_Symbol
	//	*SubscriptionRequest_Request_MarketId
	//	*SubscriptionRequest_Request_Exchange
	//	*SubscriptionRequest_Request_ChannelId
	Data             isSubscriptionRequest_Request_Data `protobuf_oneof:"data"`
	SubscriptionType []SubscriptionType                 `protobuf:"varint,10,rep,packed,name=subscriptionType,proto3,enum=org.openfeed.SubscriptionType" json:"subscriptionType,omitempty"`
	/// 0 = send only current snapshot once, else send at interval seconds
	SnapshotIntervalSeconds int32 `protobuf:"zigzag32,11,opt,name=snapshotIntervalSeconds,proto3" json:"snapshotIntervalSeconds,omitempty"`
	/// Spreads and Options must be explicitly requested.
	InstrumentType []InstrumentDefinition_InstrumentType `protobuf:"varint,12,rep,packed,name=instrumentType,proto3,enum=org.openfeed.InstrumentDefinition_InstrumentType" json:"instrumentType,omitempty"`
}

func (x *SubscriptionRequest_Request) Reset() {
	*x = SubscriptionRequest_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionRequest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionRequest_Request) ProtoMessage() {}

func (x *SubscriptionRequest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionRequest_Request.ProtoReflect.Descriptor instead.
func (*SubscriptionRequest_Request) Descriptor() ([]byte, []int) {
	return file_openfeed_api_proto_rawDescGZIP(), []int{13, 0}
}

func (m *SubscriptionRequest_Request) GetData() isSubscriptionRequest_Request_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SubscriptionRequest_Request) GetSymbol() string {
	if x, ok := x.GetData().(*SubscriptionRequest_Request_Symbol); ok {
		return x.Symbol
	}
	return ""
}

func (x *SubscriptionRequest_Request) GetMarketId() int64 {
	if x, ok := x.GetData().(*SubscriptionRequest_Request_MarketId); ok {
		return x.MarketId
	}
	return 0
}

func (x *SubscriptionRequest_Request) GetExchange() string {
	if x, ok := x.GetData().(*SubscriptionRequest_Request_Exchange); ok {
		return x.Exchange
	}
	return ""
}

func (x *SubscriptionRequest_Request) GetChannelId() int32 {
	if x, ok := x.GetData().(*SubscriptionRequest_Request_ChannelId); ok {
		return x.ChannelId
	}
	return 0
}

func (x *SubscriptionRequest_Request) GetSubscriptionType() []SubscriptionType {
	if x != nil {
		return x.SubscriptionType
	}
	return nil
}

func (x *SubscriptionRequest_Request) GetSnapshotIntervalSeconds() int32 {
	if x != nil {
		return x.SnapshotIntervalSeconds
	}
	return 0
}

func (x *SubscriptionRequest_Request) GetInstrumentType() []InstrumentDefinition_InstrumentType {
	if x != nil {
		return x.InstrumentType
	}
	return nil
}

type isSubscriptionRequest_Request_Data interface {
	isSubscriptionRequest_Request_Data()
}

type SubscriptionRequest_Request_Symbol struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3,oneof"`
}

type SubscriptionRequest_Request_MarketId struct {
	MarketId int64 `protobuf:"zigzag64,2,opt,name=marketId,proto3,oneof"`
}

type SubscriptionRequest_Request_Exchange struct {
	Exchange string `protobuf:"bytes,3,opt,name=exchange,proto3,oneof"`
}

type SubscriptionRequest_Request_ChannelId struct {
	ChannelId int32 `protobuf:"zigzag32,4,opt,name=channelId,proto3,oneof"`
}

func (*SubscriptionRequest_Request_Symbol) isSubscriptionRequest_Request_Data() {}

func (*SubscriptionRequest_Request_MarketId) isSubscriptionRequest_Request_Data() {}

func (*SubscriptionRequest_Request_Exchange) isSubscriptionRequest_Request_Data() {}

func (*SubscriptionRequest_Request_ChannelId) isSubscriptionRequest_Request_Data() {}

var File_openfeed_api_proto protoreflect.FileDescriptor

var file_openfeed_api_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x1a, 0x19, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x04,
	0x0a, 0x16, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x55, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x1a, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x06,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x08, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6d, 0x0a, 0x1b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52,
	0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a,
	0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x58, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x6f, 0x68, 0x6c, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4f, 0x68, 0x6c,
	0x63, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x68, 0x6c, 0x63, 0x12, 0x4c, 0x0a, 0x10, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2f, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0d,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x4b, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x64,
	0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x1c, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x12, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9b,
	0x03, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x64, 0x66, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x64, 0x66, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x64, 0x66, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x64, 0x66, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x64, 0x66, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x64, 0x66, 0x42, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x4d, 0x0a, 0x0f,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x89, 0x02, 0x0a, 0x10,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x08, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x22, 0xd6, 0x04, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x45,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0xe8, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x17, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x59, 0x0a,
	0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xf8, 0x02, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a,
	0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x2a, 0xde, 0x02, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x74,
	0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x75, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x76, 0x12, 0x16, 0x0a,
	0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x49, 0x44, 0x10, 0x77, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d,
	0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x78, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x10, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x7a, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x55, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x7b, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x7c, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52,
	0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x53, 0x10, 0x7d, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x7e, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x49, 0x43, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x7f, 0x2a, 0xa1, 0x01, 0x0a,
	0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55,
	0x4f, 0x54, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x54, 0x52, 0x41, 0x44, 0x45, 0x53, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55,
	0x4d, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x4f, 0x48, 0x4c, 0x43, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x48,
	0x4c, 0x43, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x08,
	0x42, 0x07, 0x48, 0x01, 0x50, 0x01, 0xa0, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_openfeed_api_proto_rawDescOnce sync.Once
	file_openfeed_api_proto_rawDescData = file_openfeed_api_proto_rawDesc
)

func file_openfeed_api_proto_rawDescGZIP() []byte {
	file_openfeed_api_proto_rawDescOnce.Do(func() {
		file_openfeed_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_openfeed_api_proto_rawDescData)
	})
	return file_openfeed_api_proto_rawDescData
}

var file_openfeed_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_openfeed_api_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_openfeed_api_proto_goTypes = []interface{}{
	(Result)(0),                              // 0: org.openfeed.Result
	(SubscriptionType)(0),                    // 1: org.openfeed.SubscriptionType
	(*OpenfeedGatewayRequest)(nil),           // 2: org.openfeed.OpenfeedGatewayRequest
	(*OpenfeedGatewayMessage)(nil),           // 3: org.openfeed.OpenfeedGatewayMessage
	(*Status)(nil),                           // 4: org.openfeed.Status
	(*LoginRequest)(nil),                     // 5: org.openfeed.LoginRequest
	(*LoginResponse)(nil),                    // 6: org.openfeed.LoginResponse
	(*LogoutRequest)(nil),                    // 7: org.openfeed.LogoutRequest
	(*LogoutResponse)(nil),                   // 8: org.openfeed.LogoutResponse
	(*InstrumentRequest)(nil),                // 9: org.openfeed.InstrumentRequest
	(*InstrumentResponse)(nil),               // 10: org.openfeed.InstrumentResponse
	(*InstrumentReferenceRequest)(nil),       // 11: org.openfeed.InstrumentReferenceRequest
	(*InstrumentReferenceResponse)(nil),      // 12: org.openfeed.InstrumentReferenceResponse
	(*ExchangeRequest)(nil),                  // 13: org.openfeed.ExchangeRequest
	(*ExchangeResponse)(nil),                 // 14: org.openfeed.ExchangeResponse
	(*SubscriptionRequest)(nil),              // 15: org.openfeed.SubscriptionRequest
	(*SubscriptionResponse)(nil),             // 16: org.openfeed.SubscriptionResponse
	(*ExchangeResponse_Exchange)(nil),        // 17: org.openfeed.ExchangeResponse.Exchange
	(*SubscriptionRequest_Request)(nil),      // 18: org.openfeed.SubscriptionRequest.Request
	(*MarketStatus)(nil),                     // 19: org.openfeed.MarketStatus
	(*HeartBeat)(nil),                        // 20: org.openfeed.HeartBeat
	(*InstrumentDefinition)(nil),             // 21: org.openfeed.InstrumentDefinition
	(*MarketSnapshot)(nil),                   // 22: org.openfeed.MarketSnapshot
	(*MarketUpdate)(nil),                     // 23: org.openfeed.MarketUpdate
	(*VolumeAtPrice)(nil),                    // 24: org.openfeed.VolumeAtPrice
	(*Ohlc)(nil),                             // 25: org.openfeed.Ohlc
	(*InstrumentAction)(nil),                 // 26: org.openfeed.InstrumentAction
	(Service)(0),                             // 27: org.openfeed.Service
	(InstrumentDefinition_InstrumentType)(0), // 28: org.openfeed.InstrumentDefinition.InstrumentType
}
var file_openfeed_api_proto_depIdxs = []int32{
	5,  // 0: org.openfeed.OpenfeedGatewayRequest.loginRequest:type_name -> org.openfeed.LoginRequest
	7,  // 1: org.openfeed.OpenfeedGatewayRequest.logoutRequest:type_name -> org.openfeed.LogoutRequest
	15, // 2: org.openfeed.OpenfeedGatewayRequest.subscriptionRequest:type_name -> org.openfeed.SubscriptionRequest
	9,  // 3: org.openfeed.OpenfeedGatewayRequest.instrumentRequest:type_name -> org.openfeed.InstrumentRequest
	11, // 4: org.openfeed.OpenfeedGatewayRequest.instrumentReferenceRequest:type_name -> org.openfeed.InstrumentReferenceRequest
	13, // 5: org.openfeed.OpenfeedGatewayRequest.exchangeRequest:type_name -> org.openfeed.ExchangeRequest
	6,  // 6: org.openfeed.OpenfeedGatewayMessage.loginResponse:type_name -> org.openfeed.LoginResponse
	8,  // 7: org.openfeed.OpenfeedGatewayMessage.logoutResponse:type_name -> org.openfeed.LogoutResponse
	10, // 8: org.openfeed.OpenfeedGatewayMessage.instrumentResponse:type_name -> org.openfeed.InstrumentResponse
	12, // 9: org.openfeed.OpenfeedGatewayMessage.instrumentReferenceResponse:type_name -> org.openfeed.InstrumentReferenceResponse
	16, // 10: org.openfeed.OpenfeedGatewayMessage.subscriptionResponse:type_name -> org.openfeed.SubscriptionResponse
	19, // 11: org.openfeed.OpenfeedGatewayMessage.marketStatus:type_name -> org.openfeed.MarketStatus
	20, // 12: org.openfeed.OpenfeedGatewayMessage.heartBeat:type_name -> org.openfeed.HeartBeat
	21, // 13: org.openfeed.OpenfeedGatewayMessage.instrumentDefinition:type_name -> org.openfeed.InstrumentDefinition
	22, // 14: org.openfeed.OpenfeedGatewayMessage.marketSnapshot:type_name -> org.openfeed.MarketSnapshot
	23, // 15: org.openfeed.OpenfeedGatewayMessage.marketUpdate:type_name -> org.openfeed.MarketUpdate
	24, // 16: org.openfeed.OpenfeedGatewayMessage.volumeAtPrice:type_name -> org.openfeed.VolumeAtPrice
	25, // 17: org.openfeed.OpenfeedGatewayMessage.ohlc:type_name -> org.openfeed.Ohlc
	14, // 18: org.openfeed.OpenfeedGatewayMessage.exchangeResponse:type_name -> org.openfeed.ExchangeResponse
	26, // 19: org.openfeed.OpenfeedGatewayMessage.instrumentAction:type_name -> org.openfeed.InstrumentAction
	0,  // 20: org.openfeed.Status.result:type_name -> org.openfeed.Result
	27, // 21: org.openfeed.Status.service:type_name -> org.openfeed.Service
	4,  // 22: org.openfeed.LoginResponse.status:type_name -> org.openfeed.Status
	4,  // 23: org.openfeed.LogoutResponse.status:type_name -> org.openfeed.Status
	4,  // 24: org.openfeed.InstrumentResponse.status:type_name -> org.openfeed.Status
	4,  // 25: org.openfeed.InstrumentReferenceResponse.status:type_name -> org.openfeed.Status
	4,  // 26: org.openfeed.ExchangeResponse.status:type_name -> org.openfeed.Status
	17, // 27: org.openfeed.ExchangeResponse.exchanges:type_name -> org.openfeed.ExchangeResponse.Exchange
	27, // 28: org.openfeed.SubscriptionRequest.service:type_name -> org.openfeed.Service
	18, // 29: org.openfeed.SubscriptionRequest.requests:type_name -> org.openfeed.SubscriptionRequest.Request
	4,  // 30: org.openfeed.SubscriptionResponse.status:type_name -> org.openfeed.Status
	1,  // 31: org.openfeed.SubscriptionResponse.subscriptionType:type_name -> org.openfeed.SubscriptionType
	1,  // 32: org.openfeed.SubscriptionRequest.Request.subscriptionType:type_name -> org.openfeed.SubscriptionType
	28, // 33: org.openfeed.SubscriptionRequest.Request.instrumentType:type_name -> org.openfeed.InstrumentDefinition.InstrumentType
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_openfeed_api_proto_init() }
func file_openfeed_api_proto_init() {
	if File_openfeed_api_proto != nil {
		return
	}
	file_openfeed_instrument_proto_init()
	file_openfeed_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openfeed_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenfeedGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenfeedGatewayMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeResponse_Exchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionRequest_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_openfeed_api_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*OpenfeedGatewayRequest_LoginRequest)(nil),
		(*OpenfeedGatewayRequest_LogoutRequest)(nil),
		(*OpenfeedGatewayRequest_SubscriptionRequest)(nil),
		(*OpenfeedGatewayRequest_InstrumentRequest)(nil),
		(*OpenfeedGatewayRequest_InstrumentReferenceRequest)(nil),
		(*OpenfeedGatewayRequest_ExchangeRequest)(nil),
	}
	file_openfeed_api_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*OpenfeedGatewayMessage_LoginResponse)(nil),
		(*OpenfeedGatewayMessage_LogoutResponse)(nil),
		(*OpenfeedGatewayMessage_InstrumentResponse)(nil),
		(*OpenfeedGatewayMessage_InstrumentReferenceResponse)(nil),
		(*OpenfeedGatewayMessage_SubscriptionResponse)(nil),
		(*OpenfeedGatewayMessage_MarketStatus)(nil),
		(*OpenfeedGatewayMessage_HeartBeat)(nil),
		(*OpenfeedGatewayMessage_InstrumentDefinition)(nil),
		(*OpenfeedGatewayMessage_MarketSnapshot)(nil),
		(*OpenfeedGatewayMessage_MarketUpdate)(nil),
		(*OpenfeedGatewayMessage_VolumeAtPrice)(nil),
		(*OpenfeedGatewayMessage_Ohlc)(nil),
		(*OpenfeedGatewayMessage_ExchangeResponse)(nil),
		(*OpenfeedGatewayMessage_InstrumentAction)(nil),
	}
	file_openfeed_api_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*InstrumentRequest_Symbol)(nil),
		(*InstrumentRequest_MarketId)(nil),
		(*InstrumentRequest_Exchange)(nil),
		(*InstrumentRequest_ChannelId)(nil),
	}
	file_openfeed_api_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*InstrumentReferenceRequest_Symbol)(nil),
		(*InstrumentReferenceRequest_MarketId)(nil),
		(*InstrumentReferenceRequest_Exchange)(nil),
		(*InstrumentReferenceRequest_ChannelId)(nil),
	}
	file_openfeed_api_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*SubscriptionRequest_Request_Symbol)(nil),
		(*SubscriptionRequest_Request_MarketId)(nil),
		(*SubscriptionRequest_Request_Exchange)(nil),
		(*SubscriptionRequest_Request_ChannelId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openfeed_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openfeed_api_proto_goTypes,
		DependencyIndexes: file_openfeed_api_proto_depIdxs,
		EnumInfos:         file_openfeed_api_proto_enumTypes,
		MessageInfos:      file_openfeed_api_proto_msgTypes,
	}.Build()
	File_openfeed_api_proto = out.File
	file_openfeed_api_proto_rawDesc = nil
	file_openfeed_api_proto_goTypes = nil
	file_openfeed_api_proto_depIdxs = nil
}
