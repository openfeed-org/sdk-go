//*
// Copyright (C) 2011-2017 Barchart, Inc. <http://www.barchart.com/>
//
// All rights reserved. Licensed under the OSI BSD License.
//
// http://www.opensource.org/licenses/bsd-license.php

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.2
// source: openfeed_instrument.proto

package openfeed

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// #############################################
type InstrumentDefinition_InstrumentType int32

const (
	InstrumentDefinition_UNKNOWN_INSTRUMENT_TYPE InstrumentDefinition_InstrumentType = 0
	InstrumentDefinition_FOREX                   InstrumentDefinition_InstrumentType = 1
	InstrumentDefinition_INDEX                   InstrumentDefinition_InstrumentType = 2
	InstrumentDefinition_EQUITY                  InstrumentDefinition_InstrumentType = 3
	InstrumentDefinition_FUTURE                  InstrumentDefinition_InstrumentType = 4
	InstrumentDefinition_OPTION                  InstrumentDefinition_InstrumentType = 5
	InstrumentDefinition_SPREAD                  InstrumentDefinition_InstrumentType = 6
	InstrumentDefinition_MUTUAL_FUND             InstrumentDefinition_InstrumentType = 7
	InstrumentDefinition_MONEY_MARKET_FUND       InstrumentDefinition_InstrumentType = 8
)

// Enum value maps for InstrumentDefinition_InstrumentType.
var (
	InstrumentDefinition_InstrumentType_name = map[int32]string{
		0: "UNKNOWN_INSTRUMENT_TYPE",
		1: "FOREX",
		2: "INDEX",
		3: "EQUITY",
		4: "FUTURE",
		5: "OPTION",
		6: "SPREAD",
		7: "MUTUAL_FUND",
		8: "MONEY_MARKET_FUND",
	}
	InstrumentDefinition_InstrumentType_value = map[string]int32{
		"UNKNOWN_INSTRUMENT_TYPE": 0,
		"FOREX":                   1,
		"INDEX":                   2,
		"EQUITY":                  3,
		"FUTURE":                  4,
		"OPTION":                  5,
		"SPREAD":                  6,
		"MUTUAL_FUND":             7,
		"MONEY_MARKET_FUND":       8,
	}
)

func (x InstrumentDefinition_InstrumentType) Enum() *InstrumentDefinition_InstrumentType {
	p := new(InstrumentDefinition_InstrumentType)
	*p = x
	return p
}

func (x InstrumentDefinition_InstrumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentDefinition_InstrumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_instrument_proto_enumTypes[0].Descriptor()
}

func (InstrumentDefinition_InstrumentType) Type() protoreflect.EnumType {
	return &file_openfeed_instrument_proto_enumTypes[0]
}

func (x InstrumentDefinition_InstrumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentDefinition_InstrumentType.Descriptor instead.
func (InstrumentDefinition_InstrumentType) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 0}
}

/// Market depth implementation type
type InstrumentDefinition_BookType int32

const (
	InstrumentDefinition_UNKNOWN_BOOK_TYPE InstrumentDefinition_BookType = 0
	// BBO
	InstrumentDefinition_TOP_OF_BOOK InstrumentDefinition_BookType = 1
	// Book uses price level
	InstrumentDefinition_PRICE_LEVEL_DEPTH InstrumentDefinition_BookType = 2
	// Book uses order-id
	InstrumentDefinition_ORDER_DEPTH InstrumentDefinition_BookType = 3
)

// Enum value maps for InstrumentDefinition_BookType.
var (
	InstrumentDefinition_BookType_name = map[int32]string{
		0: "UNKNOWN_BOOK_TYPE",
		1: "TOP_OF_BOOK",
		2: "PRICE_LEVEL_DEPTH",
		3: "ORDER_DEPTH",
	}
	InstrumentDefinition_BookType_value = map[string]int32{
		"UNKNOWN_BOOK_TYPE": 0,
		"TOP_OF_BOOK":       1,
		"PRICE_LEVEL_DEPTH": 2,
		"ORDER_DEPTH":       3,
	}
)

func (x InstrumentDefinition_BookType) Enum() *InstrumentDefinition_BookType {
	p := new(InstrumentDefinition_BookType)
	*p = x
	return p
}

func (x InstrumentDefinition_BookType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentDefinition_BookType) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_instrument_proto_enumTypes[1].Descriptor()
}

func (InstrumentDefinition_BookType) Type() protoreflect.EnumType {
	return &file_openfeed_instrument_proto_enumTypes[1]
}

func (x InstrumentDefinition_BookType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentDefinition_BookType.Descriptor instead.
func (InstrumentDefinition_BookType) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 1}
}

/// Option type.
type InstrumentDefinition_OptionType int32

const (
	InstrumentDefinition_UNKNOWN_OPTION_TYPE InstrumentDefinition_OptionType = 0
	InstrumentDefinition_CALL                InstrumentDefinition_OptionType = 1
	InstrumentDefinition_PUT                 InstrumentDefinition_OptionType = 2
)

// Enum value maps for InstrumentDefinition_OptionType.
var (
	InstrumentDefinition_OptionType_name = map[int32]string{
		0: "UNKNOWN_OPTION_TYPE",
		1: "CALL",
		2: "PUT",
	}
	InstrumentDefinition_OptionType_value = map[string]int32{
		"UNKNOWN_OPTION_TYPE": 0,
		"CALL":                1,
		"PUT":                 2,
	}
)

func (x InstrumentDefinition_OptionType) Enum() *InstrumentDefinition_OptionType {
	p := new(InstrumentDefinition_OptionType)
	*p = x
	return p
}

func (x InstrumentDefinition_OptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentDefinition_OptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_instrument_proto_enumTypes[2].Descriptor()
}

func (InstrumentDefinition_OptionType) Type() protoreflect.EnumType {
	return &file_openfeed_instrument_proto_enumTypes[2]
}

func (x InstrumentDefinition_OptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentDefinition_OptionType.Descriptor instead.
func (InstrumentDefinition_OptionType) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 2}
}

/// Option style.
type InstrumentDefinition_OptionStyle int32

const (
	InstrumentDefinition_UNKNOWN_OPTIONS_STYLE InstrumentDefinition_OptionStyle = 0
	InstrumentDefinition_DEFAULT               InstrumentDefinition_OptionStyle = 1
	InstrumentDefinition_AMERICAN              InstrumentDefinition_OptionStyle = 2
	InstrumentDefinition_EUROPEAN              InstrumentDefinition_OptionStyle = 3
)

// Enum value maps for InstrumentDefinition_OptionStyle.
var (
	InstrumentDefinition_OptionStyle_name = map[int32]string{
		0: "UNKNOWN_OPTIONS_STYLE",
		1: "DEFAULT",
		2: "AMERICAN",
		3: "EUROPEAN",
	}
	InstrumentDefinition_OptionStyle_value = map[string]int32{
		"UNKNOWN_OPTIONS_STYLE": 0,
		"DEFAULT":               1,
		"AMERICAN":              2,
		"EUROPEAN":              3,
	}
)

func (x InstrumentDefinition_OptionStyle) Enum() *InstrumentDefinition_OptionStyle {
	p := new(InstrumentDefinition_OptionStyle)
	*p = x
	return p
}

func (x InstrumentDefinition_OptionStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentDefinition_OptionStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_instrument_proto_enumTypes[3].Descriptor()
}

func (InstrumentDefinition_OptionStyle) Type() protoreflect.EnumType {
	return &file_openfeed_instrument_proto_enumTypes[3]
}

func (x InstrumentDefinition_OptionStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentDefinition_OptionStyle.Descriptor instead.
func (InstrumentDefinition_OptionStyle) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 3}
}

type InstrumentDefinition_State int32

const (
	InstrumentDefinition_UNKNOWN_STATE InstrumentDefinition_State = 0
	InstrumentDefinition_ACTIVE        InstrumentDefinition_State = 1
	InstrumentDefinition_PASSIVE       InstrumentDefinition_State = 2
)

// Enum value maps for InstrumentDefinition_State.
var (
	InstrumentDefinition_State_name = map[int32]string{
		0: "UNKNOWN_STATE",
		1: "ACTIVE",
		2: "PASSIVE",
	}
	InstrumentDefinition_State_value = map[string]int32{
		"UNKNOWN_STATE": 0,
		"ACTIVE":        1,
		"PASSIVE":       2,
	}
)

func (x InstrumentDefinition_State) Enum() *InstrumentDefinition_State {
	p := new(InstrumentDefinition_State)
	*p = x
	return p
}

func (x InstrumentDefinition_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentDefinition_State) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_instrument_proto_enumTypes[4].Descriptor()
}

func (InstrumentDefinition_State) Type() protoreflect.EnumType {
	return &file_openfeed_instrument_proto_enumTypes[4]
}

func (x InstrumentDefinition_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentDefinition_State.Descriptor instead.
func (InstrumentDefinition_State) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 4}
}

type InstrumentDefinition_EventType int32

const (
	InstrumentDefinition_UNKNOWN_EVENT_TYPE InstrumentDefinition_EventType = 0
	// All instruments
	InstrumentDefinition_FIRST_TRADE_DATE InstrumentDefinition_EventType = 1
	InstrumentDefinition_LAST_TRADE_DATE  InstrumentDefinition_EventType = 2
	// Futures only
	InstrumentDefinition_SETTLEMENT_DATE     InstrumentDefinition_EventType = 10
	InstrumentDefinition_FIRST_DELIVERY_DATE InstrumentDefinition_EventType = 11
	InstrumentDefinition_LAST_DELIVERY_DATE  InstrumentDefinition_EventType = 12
	InstrumentDefinition_FIRST_NOTICE_DATE   InstrumentDefinition_EventType = 13
	InstrumentDefinition_LAST_NOTICE_DATE    InstrumentDefinition_EventType = 14
	InstrumentDefinition_FIRST_HOLDING_DATE  InstrumentDefinition_EventType = 15
	InstrumentDefinition_LAST_HOLDING_DATE   InstrumentDefinition_EventType = 16
	InstrumentDefinition_FIRST_POSITION_DATE InstrumentDefinition_EventType = 17
	InstrumentDefinition_LAST_POSITION_DATE  InstrumentDefinition_EventType = 18
)

// Enum value maps for InstrumentDefinition_EventType.
var (
	InstrumentDefinition_EventType_name = map[int32]string{
		0:  "UNKNOWN_EVENT_TYPE",
		1:  "FIRST_TRADE_DATE",
		2:  "LAST_TRADE_DATE",
		10: "SETTLEMENT_DATE",
		11: "FIRST_DELIVERY_DATE",
		12: "LAST_DELIVERY_DATE",
		13: "FIRST_NOTICE_DATE",
		14: "LAST_NOTICE_DATE",
		15: "FIRST_HOLDING_DATE",
		16: "LAST_HOLDING_DATE",
		17: "FIRST_POSITION_DATE",
		18: "LAST_POSITION_DATE",
	}
	InstrumentDefinition_EventType_value = map[string]int32{
		"UNKNOWN_EVENT_TYPE":  0,
		"FIRST_TRADE_DATE":    1,
		"LAST_TRADE_DATE":     2,
		"SETTLEMENT_DATE":     10,
		"FIRST_DELIVERY_DATE": 11,
		"LAST_DELIVERY_DATE":  12,
		"FIRST_NOTICE_DATE":   13,
		"LAST_NOTICE_DATE":    14,
		"FIRST_HOLDING_DATE":  15,
		"LAST_HOLDING_DATE":   16,
		"FIRST_POSITION_DATE": 17,
		"LAST_POSITION_DATE":  18,
	}
)

func (x InstrumentDefinition_EventType) Enum() *InstrumentDefinition_EventType {
	p := new(InstrumentDefinition_EventType)
	*p = x
	return p
}

func (x InstrumentDefinition_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentDefinition_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_instrument_proto_enumTypes[5].Descriptor()
}

func (InstrumentDefinition_EventType) Type() protoreflect.EnumType {
	return &file_openfeed_instrument_proto_enumTypes[5]
}

func (x InstrumentDefinition_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentDefinition_EventType.Descriptor instead.
func (InstrumentDefinition_EventType) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 5}
}

type InstrumentDefinition_PriceFormat_SubFormat int32

const (
	InstrumentDefinition_PriceFormat_FLAT       InstrumentDefinition_PriceFormat_SubFormat = 0
	InstrumentDefinition_PriceFormat_FRACTIONAL InstrumentDefinition_PriceFormat_SubFormat = 1
	InstrumentDefinition_PriceFormat_DECIMAL    InstrumentDefinition_PriceFormat_SubFormat = 2
)

// Enum value maps for InstrumentDefinition_PriceFormat_SubFormat.
var (
	InstrumentDefinition_PriceFormat_SubFormat_name = map[int32]string{
		0: "FLAT",
		1: "FRACTIONAL",
		2: "DECIMAL",
	}
	InstrumentDefinition_PriceFormat_SubFormat_value = map[string]int32{
		"FLAT":       0,
		"FRACTIONAL": 1,
		"DECIMAL":    2,
	}
)

func (x InstrumentDefinition_PriceFormat_SubFormat) Enum() *InstrumentDefinition_PriceFormat_SubFormat {
	p := new(InstrumentDefinition_PriceFormat_SubFormat)
	*p = x
	return p
}

func (x InstrumentDefinition_PriceFormat_SubFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentDefinition_PriceFormat_SubFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_openfeed_instrument_proto_enumTypes[6].Descriptor()
}

func (InstrumentDefinition_PriceFormat_SubFormat) Type() protoreflect.EnumType {
	return &file_openfeed_instrument_proto_enumTypes[6]
}

func (x InstrumentDefinition_PriceFormat_SubFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentDefinition_PriceFormat_SubFormat.Descriptor instead.
func (InstrumentDefinition_PriceFormat_SubFormat) EnumDescriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 7, 0}
}

type InstrumentDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Unique ID used in the data feed.
	MarketId int64 `protobuf:"zigzag64,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	/// Instrument type as enum...
	InstrumentType InstrumentDefinition_InstrumentType `protobuf:"varint,2,opt,name=instrumentType,proto3,enum=org.openfeed.InstrumentDefinition_InstrumentType" json:"instrumentType,omitempty"`
	/// Supported Book Types
	SupportBookTypes []InstrumentDefinition_BookType `protobuf:"varint,3,rep,packed,name=supportBookTypes,proto3,enum=org.openfeed.InstrumentDefinition_BookType" json:"supportBookTypes,omitempty"`
	/// Maximum depth of market-by-price order book
	BookDepth int32 `protobuf:"zigzag32,4,opt,name=bookDepth,proto3" json:"bookDepth,omitempty"`
	/// The name of the market data vendor
	VendorId string `protobuf:"bytes,5,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	/// Human readable market symbol, assigned by the exchange or venue.
	// Not necessarily unique as the exchange or vendor could assign the same symbol to different
	// instruments, for example if the instruments trade on different exchanges.
	Symbol string `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`
	/// Human readable market description.
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	/// Market CFI code: http://en.wikipedia.org/wiki/ISO_10962
	CfiCode string `protobuf:"bytes,8,opt,name=cfiCode,proto3" json:"cfiCode,omitempty"`
	/// Market currency code: http://en.wikipedia.org/wiki/ISO_4217
	CurrencyCode string `protobuf:"bytes,9,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	// Market exchange code: http://en.wikipedia.org/wiki/ISO_10383
	// For inter-exchange spreads, use the leg MICs separated by a hyphen
	ExchangeCode string `protobuf:"bytes,10,opt,name=exchangeCode,proto3" json:"exchangeCode,omitempty"`
	/// Minimum price increment in market currency.
	MinimumPriceIncrement float32 `protobuf:"fixed32,11,opt,name=minimumPriceIncrement,proto3" json:"minimumPriceIncrement,omitempty"`
	/// Contract point value in market currency.
	ContractPointValue float32 `protobuf:"fixed32,12,opt,name=contractPointValue,proto3" json:"contractPointValue,omitempty"`
	/// Trading schedule for a typical week
	Schedule *InstrumentDefinition_Schedule `protobuf:"bytes,13,opt,name=schedule,proto3" json:"schedule,omitempty"`
	/// Trading calendar (expiration, notice days, holidays?, etc)
	Calendar *InstrumentDefinition_Calendar `protobuf:"bytes,14,opt,name=calendar,proto3" json:"calendar,omitempty"`
	/// UTC Timestamp of creation, nano seconds since Unix epoch
	RecordCreateTime int64 `protobuf:"zigzag64,15,opt,name=recordCreateTime,proto3" json:"recordCreateTime,omitempty"`
	/// UTC Timestamp of update, nano seconds since Unix epoch
	RecordUpdateTime int64 `protobuf:"zigzag64,16,opt,name=recordUpdateTime,proto3" json:"recordUpdateTime,omitempty"`
	/// Market time zone TZ database name.
	// Permanent. Can be resolved into timeZoneOffset for given date/time.
	// See http://joda-time.sourceforge.net/timezones.html
	// See http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
	TimeZoneName string `protobuf:"bytes,17,opt,name=timeZoneName,proto3" json:"timeZoneName,omitempty"`
	/// Identifies a logical grouping of instruments. By product, for example.
	InstrumentGroup string `protobuf:"bytes,18,opt,name=instrumentGroup,proto3" json:"instrumentGroup,omitempty"`
	/// The Date of expiration for futures and options.
	SymbolExpiration *InstrumentDefinition_MaturityDate `protobuf:"bytes,19,opt,name=symbolExpiration,proto3" json:"symbolExpiration,omitempty"`
	/// active: can have market state updates, can have historical data
	// passive: can NOT have market state updates, but can have historical data
	// normally "active" means newly listed or currently non expired markets
	// normally "passive" means expired options, de-listed equities, etc.
	State InstrumentDefinition_State `protobuf:"varint,20,opt,name=state,proto3,enum=org.openfeed.InstrumentDefinition_State" json:"state,omitempty"`
	/// The channel that updates for this instrument will appear on.
	Channel int32 `protobuf:"zigzag32,21,opt,name=channel,proto3" json:"channel,omitempty"`
	/// The marketId of the underlying asset.
	// Used by Futures and Options when the underlying instrument is defined by the vendor
	UnderlyingMarketId int64 `protobuf:"zigzag64,22,opt,name=underlyingMarketId,proto3" json:"underlyingMarketId,omitempty"`
	/// Display format
	PriceFormat *InstrumentDefinition_PriceFormat `protobuf:"bytes,23,opt,name=priceFormat,proto3" json:"priceFormat,omitempty"`
	/// Strike price display format
	OptionStrikePriceFormat *InstrumentDefinition_PriceFormat `protobuf:"bytes,24,opt,name=optionStrikePriceFormat,proto3" json:"optionStrikePriceFormat,omitempty"`
	/// Divide prices by this value to get real price values
	PriceDenominator int32 `protobuf:"zigzag32,28,opt,name=priceDenominator,proto3" json:"priceDenominator,omitempty"`
	/// Divide trade quantities by this value to get real quantities
	QuantityDenominator int32 `protobuf:"zigzag32,29,opt,name=quantityDenominator,proto3" json:"quantityDenominator,omitempty"`
	/// true if this is a tradable instrument
	IsTradable bool `protobuf:"varint,30,opt,name=isTradable,proto3" json:"isTradable,omitempty"`
	/// UTC timestamp of transaction, nano seconds since Unix epoch
	TransactionTime int64 `protobuf:"zigzag64,50,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	/// For internal use only.   Ignore
	AuxiliaryData []byte `protobuf:"bytes,99,opt,name=auxiliaryData,proto3" json:"auxiliaryData,omitempty"`
	/// List of alternate symbols for this instrument.  A single instrument
	// may be provided by many different market data vendors, each with
	// their own unique symbology. Allows this instrument to be tagged
	// with as many vendor symbols as necessary.
	Symbols []*InstrumentDefinition_Symbol `protobuf:"bytes,100,rep,name=symbols,proto3" json:"symbols,omitempty"`
	/// Option strike price in market currency.  Multiply by
	/// factorOptionsStrike to get actual strike
	OptionStrike int64 `protobuf:"zigzag64,200,opt,name=optionStrike,proto3" json:"optionStrike,omitempty"`
	/// Option type: call vs put.
	OptionType InstrumentDefinition_OptionType `protobuf:"varint,202,opt,name=optionType,proto3,enum=org.openfeed.InstrumentDefinition_OptionType" json:"optionType,omitempty"`
	/// Option style : American vs European.
	OptionStyle InstrumentDefinition_OptionStyle `protobuf:"varint,203,opt,name=optionStyle,proto3,enum=org.openfeed.InstrumentDefinition_OptionStyle" json:"optionStyle,omitempty"`
	/// Divide optionStrike by this value to get real strike price
	OptionStrikeDenominator int32 `protobuf:"zigzag32,204,opt,name=optionStrikeDenominator,proto3" json:"optionStrikeDenominator,omitempty"`
	/// Spread type, can be vendor specific
	SpreadCode string `protobuf:"bytes,210,opt,name=spreadCode,proto3" json:"spreadCode,omitempty"`
	/// Ordered list of underlying legs in a spread.
	SpreadLeg []*InstrumentDefinition_SpreadLeg `protobuf:"bytes,211,rep,name=spreadLeg,proto3" json:"spreadLeg,omitempty"`
	/// true if user defined spread
	UserDefinedSpread bool `protobuf:"varint,212,opt,name=userDefinedSpread,proto3" json:"userDefinedSpread,omitempty"`
	/// Listing market classification
	MarketTier string `protobuf:"bytes,213,opt,name=marketTier,proto3" json:"marketTier,omitempty"`
	/// Current financial status of the issuer
	FinancialStatusIndicator string `protobuf:"bytes,214,opt,name=financialStatusIndicator,proto3" json:"financialStatusIndicator,omitempty"`
	/// ISIN: https://en.wikipedia.org/wiki/International_Securities_Identification_Number
	Isin string `protobuf:"bytes,215,opt,name=isin,proto3" json:"isin,omitempty"`
	/// Break out of currency pair
	CurrencyPair *InstrumentDefinition_CurrencyPair `protobuf:"bytes,216,opt,name=currencyPair,proto3" json:"currencyPair,omitempty"`
	/// true if exchange sends volume.
	ExchangeSendsVolume bool `protobuf:"varint,217,opt,name=exchangeSendsVolume,proto3" json:"exchangeSendsVolume,omitempty"`
	/// true if exchange sends high.
	ExchangeSendsHigh bool `protobuf:"varint,218,opt,name=exchangeSendsHigh,proto3" json:"exchangeSendsHigh,omitempty"`
	/// true if exchange sends low.
	ExchangeSendsLow bool `protobuf:"varint,219,opt,name=exchangeSendsLow,proto3" json:"exchangeSendsLow,omitempty"`
	/// true if exchange sends open.
	ExchangeSendsOpen bool `protobuf:"varint,220,opt,name=exchangeSendsOpen,proto3" json:"exchangeSendsOpen,omitempty"`
	/// true if this instrument represents consolidated NBBO.
	ConsolidatedFeedInstrument bool `protobuf:"varint,221,opt,name=consolidatedFeedInstrument,proto3" json:"consolidatedFeedInstrument,omitempty"`
	/// true if this instrument represents Pit symbol.
	OpenOutcryInstrument bool `protobuf:"varint,222,opt,name=openOutcryInstrument,proto3" json:"openOutcryInstrument,omitempty"`
	/// true if this instrument generated FX option.
	SyntheticAmericanOptionInstrument bool `protobuf:"varint,223,opt,name=syntheticAmericanOptionInstrument,proto3" json:"syntheticAmericanOptionInstrument,omitempty"`
	///
	BarchartExchangeCode string `protobuf:"bytes,224,opt,name=barchartExchangeCode,proto3" json:"barchartExchangeCode,omitempty"`
	///
	BarchartBaseCode string `protobuf:"bytes,225,opt,name=barchartBaseCode,proto3" json:"barchartBaseCode,omitempty"`
	///
	VolumeDenominator int32 `protobuf:"zigzag32,226,opt,name=volumeDenominator,proto3" json:"volumeDenominator,omitempty"`
	///
	BidOfferQuantityDenominator int32 `protobuf:"zigzag32,227,opt,name=bidOfferQuantityDenominator,proto3" json:"bidOfferQuantityDenominator,omitempty"`
	///
	PrimaryListingMarketParticipantId string `protobuf:"bytes,228,opt,name=primaryListingMarketParticipantId,proto3" json:"primaryListingMarketParticipantId,omitempty"`
	///
	SubscriptionSymbol string `protobuf:"bytes,229,opt,name=subscriptionSymbol,proto3" json:"subscriptionSymbol,omitempty"`
}

func (x *InstrumentDefinition) Reset() {
	*x = InstrumentDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_instrument_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentDefinition) ProtoMessage() {}

func (x *InstrumentDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_instrument_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentDefinition.ProtoReflect.Descriptor instead.
func (*InstrumentDefinition) Descriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0}
}

func (x *InstrumentDefinition) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *InstrumentDefinition) GetInstrumentType() InstrumentDefinition_InstrumentType {
	if x != nil {
		return x.InstrumentType
	}
	return InstrumentDefinition_UNKNOWN_INSTRUMENT_TYPE
}

func (x *InstrumentDefinition) GetSupportBookTypes() []InstrumentDefinition_BookType {
	if x != nil {
		return x.SupportBookTypes
	}
	return nil
}

func (x *InstrumentDefinition) GetBookDepth() int32 {
	if x != nil {
		return x.BookDepth
	}
	return 0
}

func (x *InstrumentDefinition) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *InstrumentDefinition) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *InstrumentDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InstrumentDefinition) GetCfiCode() string {
	if x != nil {
		return x.CfiCode
	}
	return ""
}

func (x *InstrumentDefinition) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *InstrumentDefinition) GetExchangeCode() string {
	if x != nil {
		return x.ExchangeCode
	}
	return ""
}

func (x *InstrumentDefinition) GetMinimumPriceIncrement() float32 {
	if x != nil {
		return x.MinimumPriceIncrement
	}
	return 0
}

func (x *InstrumentDefinition) GetContractPointValue() float32 {
	if x != nil {
		return x.ContractPointValue
	}
	return 0
}

func (x *InstrumentDefinition) GetSchedule() *InstrumentDefinition_Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *InstrumentDefinition) GetCalendar() *InstrumentDefinition_Calendar {
	if x != nil {
		return x.Calendar
	}
	return nil
}

func (x *InstrumentDefinition) GetRecordCreateTime() int64 {
	if x != nil {
		return x.RecordCreateTime
	}
	return 0
}

func (x *InstrumentDefinition) GetRecordUpdateTime() int64 {
	if x != nil {
		return x.RecordUpdateTime
	}
	return 0
}

func (x *InstrumentDefinition) GetTimeZoneName() string {
	if x != nil {
		return x.TimeZoneName
	}
	return ""
}

func (x *InstrumentDefinition) GetInstrumentGroup() string {
	if x != nil {
		return x.InstrumentGroup
	}
	return ""
}

func (x *InstrumentDefinition) GetSymbolExpiration() *InstrumentDefinition_MaturityDate {
	if x != nil {
		return x.SymbolExpiration
	}
	return nil
}

func (x *InstrumentDefinition) GetState() InstrumentDefinition_State {
	if x != nil {
		return x.State
	}
	return InstrumentDefinition_UNKNOWN_STATE
}

func (x *InstrumentDefinition) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *InstrumentDefinition) GetUnderlyingMarketId() int64 {
	if x != nil {
		return x.UnderlyingMarketId
	}
	return 0
}

func (x *InstrumentDefinition) GetPriceFormat() *InstrumentDefinition_PriceFormat {
	if x != nil {
		return x.PriceFormat
	}
	return nil
}

func (x *InstrumentDefinition) GetOptionStrikePriceFormat() *InstrumentDefinition_PriceFormat {
	if x != nil {
		return x.OptionStrikePriceFormat
	}
	return nil
}

func (x *InstrumentDefinition) GetPriceDenominator() int32 {
	if x != nil {
		return x.PriceDenominator
	}
	return 0
}

func (x *InstrumentDefinition) GetQuantityDenominator() int32 {
	if x != nil {
		return x.QuantityDenominator
	}
	return 0
}

func (x *InstrumentDefinition) GetIsTradable() bool {
	if x != nil {
		return x.IsTradable
	}
	return false
}

func (x *InstrumentDefinition) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *InstrumentDefinition) GetAuxiliaryData() []byte {
	if x != nil {
		return x.AuxiliaryData
	}
	return nil
}

func (x *InstrumentDefinition) GetSymbols() []*InstrumentDefinition_Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *InstrumentDefinition) GetOptionStrike() int64 {
	if x != nil {
		return x.OptionStrike
	}
	return 0
}

func (x *InstrumentDefinition) GetOptionType() InstrumentDefinition_OptionType {
	if x != nil {
		return x.OptionType
	}
	return InstrumentDefinition_UNKNOWN_OPTION_TYPE
}

func (x *InstrumentDefinition) GetOptionStyle() InstrumentDefinition_OptionStyle {
	if x != nil {
		return x.OptionStyle
	}
	return InstrumentDefinition_UNKNOWN_OPTIONS_STYLE
}

func (x *InstrumentDefinition) GetOptionStrikeDenominator() int32 {
	if x != nil {
		return x.OptionStrikeDenominator
	}
	return 0
}

func (x *InstrumentDefinition) GetSpreadCode() string {
	if x != nil {
		return x.SpreadCode
	}
	return ""
}

func (x *InstrumentDefinition) GetSpreadLeg() []*InstrumentDefinition_SpreadLeg {
	if x != nil {
		return x.SpreadLeg
	}
	return nil
}

func (x *InstrumentDefinition) GetUserDefinedSpread() bool {
	if x != nil {
		return x.UserDefinedSpread
	}
	return false
}

func (x *InstrumentDefinition) GetMarketTier() string {
	if x != nil {
		return x.MarketTier
	}
	return ""
}

func (x *InstrumentDefinition) GetFinancialStatusIndicator() string {
	if x != nil {
		return x.FinancialStatusIndicator
	}
	return ""
}

func (x *InstrumentDefinition) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *InstrumentDefinition) GetCurrencyPair() *InstrumentDefinition_CurrencyPair {
	if x != nil {
		return x.CurrencyPair
	}
	return nil
}

func (x *InstrumentDefinition) GetExchangeSendsVolume() bool {
	if x != nil {
		return x.ExchangeSendsVolume
	}
	return false
}

func (x *InstrumentDefinition) GetExchangeSendsHigh() bool {
	if x != nil {
		return x.ExchangeSendsHigh
	}
	return false
}

func (x *InstrumentDefinition) GetExchangeSendsLow() bool {
	if x != nil {
		return x.ExchangeSendsLow
	}
	return false
}

func (x *InstrumentDefinition) GetExchangeSendsOpen() bool {
	if x != nil {
		return x.ExchangeSendsOpen
	}
	return false
}

func (x *InstrumentDefinition) GetConsolidatedFeedInstrument() bool {
	if x != nil {
		return x.ConsolidatedFeedInstrument
	}
	return false
}

func (x *InstrumentDefinition) GetOpenOutcryInstrument() bool {
	if x != nil {
		return x.OpenOutcryInstrument
	}
	return false
}

func (x *InstrumentDefinition) GetSyntheticAmericanOptionInstrument() bool {
	if x != nil {
		return x.SyntheticAmericanOptionInstrument
	}
	return false
}

func (x *InstrumentDefinition) GetBarchartExchangeCode() string {
	if x != nil {
		return x.BarchartExchangeCode
	}
	return ""
}

func (x *InstrumentDefinition) GetBarchartBaseCode() string {
	if x != nil {
		return x.BarchartBaseCode
	}
	return ""
}

func (x *InstrumentDefinition) GetVolumeDenominator() int32 {
	if x != nil {
		return x.VolumeDenominator
	}
	return 0
}

func (x *InstrumentDefinition) GetBidOfferQuantityDenominator() int32 {
	if x != nil {
		return x.BidOfferQuantityDenominator
	}
	return 0
}

func (x *InstrumentDefinition) GetPrimaryListingMarketParticipantId() string {
	if x != nil {
		return x.PrimaryListingMarketParticipantId
	}
	return ""
}

func (x *InstrumentDefinition) GetSubscriptionSymbol() string {
	if x != nil {
		return x.SubscriptionSymbol
	}
	return ""
}

/// Typical trading week schedule
type InstrumentDefinition_Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*InstrumentDefinition_TimeSpan `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *InstrumentDefinition_Schedule) Reset() {
	*x = InstrumentDefinition_Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_instrument_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentDefinition_Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentDefinition_Schedule) ProtoMessage() {}

func (x *InstrumentDefinition_Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_instrument_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentDefinition_Schedule.ProtoReflect.Descriptor instead.
func (*InstrumentDefinition_Schedule) Descriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 0}
}

func (x *InstrumentDefinition_Schedule) GetSessions() []*InstrumentDefinition_TimeSpan {
	if x != nil {
		return x.Sessions
	}
	return nil
}

/// Trading session
// Times are in nanos since midnight UTC on the Sunday starting a given trading week
type InstrumentDefinition_TimeSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStart  int64 `protobuf:"zigzag64,1,opt,name=timeStart,proto3" json:"timeStart,omitempty"`
	TimeFinish int64 `protobuf:"zigzag64,2,opt,name=timeFinish,proto3" json:"timeFinish,omitempty"`
}

func (x *InstrumentDefinition_TimeSpan) Reset() {
	*x = InstrumentDefinition_TimeSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_instrument_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentDefinition_TimeSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentDefinition_TimeSpan) ProtoMessage() {}

func (x *InstrumentDefinition_TimeSpan) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_instrument_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentDefinition_TimeSpan.ProtoReflect.Descriptor instead.
func (*InstrumentDefinition_TimeSpan) Descriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 1}
}

func (x *InstrumentDefinition_TimeSpan) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *InstrumentDefinition_TimeSpan) GetTimeFinish() int64 {
	if x != nil {
		return x.TimeFinish
	}
	return 0
}

type InstrumentDefinition_Calendar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*InstrumentDefinition_Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *InstrumentDefinition_Calendar) Reset() {
	*x = InstrumentDefinition_Calendar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_instrument_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentDefinition_Calendar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentDefinition_Calendar) ProtoMessage() {}

func (x *InstrumentDefinition_Calendar) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_instrument_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentDefinition_Calendar.ProtoReflect.Descriptor instead.
func (*InstrumentDefinition_Calendar) Descriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 2}
}

func (x *InstrumentDefinition_Calendar) GetEvents() []*InstrumentDefinition_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type InstrumentDefinition_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type InstrumentDefinition_EventType `protobuf:"varint,1,opt,name=type,proto3,enum=org.openfeed.InstrumentDefinition_EventType" json:"type,omitempty"`
	Date int64                          `protobuf:"zigzag64,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *InstrumentDefinition_Event) Reset() {
	*x = InstrumentDefinition_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_instrument_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentDefinition_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentDefinition_Event) ProtoMessage() {}

func (x *InstrumentDefinition_Event) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_instrument_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentDefinition_Event.ProtoReflect.Descriptor instead.
func (*InstrumentDefinition_Event) Descriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 3}
}

func (x *InstrumentDefinition_Event) GetType() InstrumentDefinition_EventType {
	if x != nil {
		return x.Type
	}
	return InstrumentDefinition_UNKNOWN_EVENT_TYPE
}

func (x *InstrumentDefinition_Event) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

type InstrumentDefinition_SpreadLeg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The marketId of the leg
	MarketId int64 `protobuf:"zigzag64,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	// The ratio of the this leg with respect to the spread.
	// Negative means short the absolute value, positive means long the absolute value.
	// FIXME? Alternatively, we could have separate LONG/SHORT indicator in the message
	// and use this field as only the absolute value
	Ratio  int32  `protobuf:"zigzag32,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *InstrumentDefinition_SpreadLeg) Reset() {
	*x = InstrumentDefinition_SpreadLeg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_instrument_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentDefinition_SpreadLeg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentDefinition_SpreadLeg) ProtoMessage() {}

func (x *InstrumentDefinition_SpreadLeg) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_instrument_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentDefinition_SpreadLeg.ProtoReflect.Descriptor instead.
func (*InstrumentDefinition_SpreadLeg) Descriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 4}
}

func (x *InstrumentDefinition_SpreadLeg) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *InstrumentDefinition_SpreadLeg) GetRatio() int32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *InstrumentDefinition_SpreadLeg) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

/// Date and time with time zone.
type InstrumentDefinition_MaturityDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Year of century.
	Year int32 `protobuf:"zigzag32,1,opt,name=year,proto3" json:"year,omitempty"`
	// Month of year.
	Month int32 `protobuf:"zigzag32,2,opt,name=month,proto3" json:"month,omitempty"`
	// Day of month.
	Day int32 `protobuf:"zigzag32,3,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *InstrumentDefinition_MaturityDate) Reset() {
	*x = InstrumentDefinition_MaturityDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_instrument_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentDefinition_MaturityDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentDefinition_MaturityDate) ProtoMessage() {}

func (x *InstrumentDefinition_MaturityDate) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_instrument_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentDefinition_MaturityDate.ProtoReflect.Descriptor instead.
func (*InstrumentDefinition_MaturityDate) Descriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 5}
}

func (x *InstrumentDefinition_MaturityDate) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *InstrumentDefinition_MaturityDate) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *InstrumentDefinition_MaturityDate) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

/// A vendor's symbol for an instrument
type InstrumentDefinition_Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vendor that provides this symbol.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// The symbol assigned by the vendor.
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *InstrumentDefinition_Symbol) Reset() {
	*x = InstrumentDefinition_Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_instrument_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentDefinition_Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentDefinition_Symbol) ProtoMessage() {}

func (x *InstrumentDefinition_Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_instrument_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentDefinition_Symbol.ProtoReflect.Descriptor instead.
func (*InstrumentDefinition_Symbol) Descriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 6}
}

func (x *InstrumentDefinition_Symbol) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *InstrumentDefinition_Symbol) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

/// Recommended display format for prices.
type InstrumentDefinition_PriceFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFractional   bool                                       `protobuf:"varint,1,opt,name=isFractional,proto3" json:"isFractional,omitempty"`
	Denominator    int32                                      `protobuf:"zigzag32,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
	SubDenominator int32                                      `protobuf:"zigzag32,4,opt,name=subDenominator,proto3" json:"subDenominator,omitempty"`
	SubFormat      InstrumentDefinition_PriceFormat_SubFormat `protobuf:"varint,6,opt,name=subFormat,proto3,enum=org.openfeed.InstrumentDefinition_PriceFormat_SubFormat" json:"subFormat,omitempty"`
}

func (x *InstrumentDefinition_PriceFormat) Reset() {
	*x = InstrumentDefinition_PriceFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_instrument_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentDefinition_PriceFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentDefinition_PriceFormat) ProtoMessage() {}

func (x *InstrumentDefinition_PriceFormat) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_instrument_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentDefinition_PriceFormat.ProtoReflect.Descriptor instead.
func (*InstrumentDefinition_PriceFormat) Descriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 7}
}

func (x *InstrumentDefinition_PriceFormat) GetIsFractional() bool {
	if x != nil {
		return x.IsFractional
	}
	return false
}

func (x *InstrumentDefinition_PriceFormat) GetDenominator() int32 {
	if x != nil {
		return x.Denominator
	}
	return 0
}

func (x *InstrumentDefinition_PriceFormat) GetSubDenominator() int32 {
	if x != nil {
		return x.SubDenominator
	}
	return 0
}

func (x *InstrumentDefinition_PriceFormat) GetSubFormat() InstrumentDefinition_PriceFormat_SubFormat {
	if x != nil {
		return x.SubFormat
	}
	return InstrumentDefinition_PriceFormat_FLAT
}

/// Currency Pair
type InstrumentDefinition_CurrencyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency1 string `protobuf:"bytes,1,opt,name=currency1,proto3" json:"currency1,omitempty"`
	Currency2 string `protobuf:"bytes,2,opt,name=currency2,proto3" json:"currency2,omitempty"`
}

func (x *InstrumentDefinition_CurrencyPair) Reset() {
	*x = InstrumentDefinition_CurrencyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfeed_instrument_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentDefinition_CurrencyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentDefinition_CurrencyPair) ProtoMessage() {}

func (x *InstrumentDefinition_CurrencyPair) ProtoReflect() protoreflect.Message {
	mi := &file_openfeed_instrument_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentDefinition_CurrencyPair.ProtoReflect.Descriptor instead.
func (*InstrumentDefinition_CurrencyPair) Descriptor() ([]byte, []int) {
	return file_openfeed_instrument_proto_rawDescGZIP(), []int{0, 8}
}

func (x *InstrumentDefinition_CurrencyPair) GetCurrency1() string {
	if x != nil {
		return x.Currency1
	}
	return ""
}

func (x *InstrumentDefinition_CurrencyPair) GetCurrency2() string {
	if x != nil {
		return x.Currency2
	}
	return ""
}

var File_openfeed_instrument_proto protoreflect.FileDescriptor

var file_openfeed_instrument_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x22, 0xaf, 0x23, 0x0a, 0x14, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x59,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x66, 0x69, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x66, 0x69, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47,
	0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5b, 0x0a, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a,
	0x12, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x12, 0x52, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x68, 0x0a, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x13, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54,
	0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69,
	0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0c,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x18, 0xc8, 0x01, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0xca, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x51, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0xcc, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x1f, 0x0a, 0x0a, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0xd2, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4b, 0x0a, 0x09, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x67, 0x18, 0xd3, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4c,
	0x65, 0x67, 0x52, 0x09, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x67, 0x12, 0x2d, 0x0a,
	0x11, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x18, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0a,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x65, 0x72, 0x18, 0xd5, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x65, 0x72, 0x12, 0x3b, 0x0a,
	0x18, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x13, 0x0a, 0x04, 0x69, 0x73,
	0x69, 0x6e, 0x18, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12,
	0x54, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x18,
	0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x31, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0xd9, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6e,
	0x64, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x73, 0x48, 0x69, 0x67, 0x68, 0x18, 0xda, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65,
	0x6e, 0x64, 0x73, 0x48, 0x69, 0x67, 0x68, 0x12, 0x2b, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x6f, 0x77, 0x18, 0xdb, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64,
	0x73, 0x4c, 0x6f, 0x77, 0x12, 0x2d, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x75, 0x74, 0x63,
	0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xde, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x72, 0x79, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x21, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xdf,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x62, 0x61, 0x72, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x10, 0x62, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x72, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0xe2, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x11, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x1b, 0x62, 0x69, 0x64,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x1b, 0x62, 0x69, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x21,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x12, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x1a, 0x53, 0x0a, 0x08,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x48, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x1a, 0x4c, 0x0a, 0x08, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x40, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x5d, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x55, 0x0a, 0x09, 0x53, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x4c, 0x65, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x1a,
	0x4a, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x64, 0x61, 0x79, 0x1a, 0x38, 0x0a, 0x06, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x1a, 0x87, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x32, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x54,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x1a,
	0x4a, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32, 0x22, 0x9b, 0x01, 0x0a, 0x0e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x4f, 0x52, 0x45, 0x58, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x10,
	0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x55, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x46, 0x55, 0x4e, 0x44,
	0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x08, 0x22, 0x5a, 0x0a, 0x08, 0x42, 0x6f, 0x6f,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x50,
	0x54, 0x48, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45,
	0x50, 0x54, 0x48, 0x10, 0x03, 0x22, 0x38, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x02, 0x22,
	0x51, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4d, 0x45, 0x52, 0x49, 0x43,
	0x41, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x55, 0x52, 0x4f, 0x50, 0x45, 0x41, 0x4e,
	0x10, 0x03, 0x22, 0x33, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41,
	0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x22, 0xa1, 0x02, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x54, 0x54,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x44,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x15,
	0x0a, 0x11, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x46,
	0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x48, 0x4f, 0x4c, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x12, 0x42, 0x07, 0x48, 0x01, 0x50,
	0x01, 0xa0, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openfeed_instrument_proto_rawDescOnce sync.Once
	file_openfeed_instrument_proto_rawDescData = file_openfeed_instrument_proto_rawDesc
)

func file_openfeed_instrument_proto_rawDescGZIP() []byte {
	file_openfeed_instrument_proto_rawDescOnce.Do(func() {
		file_openfeed_instrument_proto_rawDescData = protoimpl.X.CompressGZIP(file_openfeed_instrument_proto_rawDescData)
	})
	return file_openfeed_instrument_proto_rawDescData
}

var file_openfeed_instrument_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_openfeed_instrument_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_openfeed_instrument_proto_goTypes = []interface{}{
	(InstrumentDefinition_InstrumentType)(0),        // 0: org.openfeed.InstrumentDefinition.InstrumentType
	(InstrumentDefinition_BookType)(0),              // 1: org.openfeed.InstrumentDefinition.BookType
	(InstrumentDefinition_OptionType)(0),            // 2: org.openfeed.InstrumentDefinition.OptionType
	(InstrumentDefinition_OptionStyle)(0),           // 3: org.openfeed.InstrumentDefinition.OptionStyle
	(InstrumentDefinition_State)(0),                 // 4: org.openfeed.InstrumentDefinition.State
	(InstrumentDefinition_EventType)(0),             // 5: org.openfeed.InstrumentDefinition.EventType
	(InstrumentDefinition_PriceFormat_SubFormat)(0), // 6: org.openfeed.InstrumentDefinition.PriceFormat.SubFormat
	(*InstrumentDefinition)(nil),                    // 7: org.openfeed.InstrumentDefinition
	(*InstrumentDefinition_Schedule)(nil),           // 8: org.openfeed.InstrumentDefinition.Schedule
	(*InstrumentDefinition_TimeSpan)(nil),           // 9: org.openfeed.InstrumentDefinition.TimeSpan
	(*InstrumentDefinition_Calendar)(nil),           // 10: org.openfeed.InstrumentDefinition.Calendar
	(*InstrumentDefinition_Event)(nil),              // 11: org.openfeed.InstrumentDefinition.Event
	(*InstrumentDefinition_SpreadLeg)(nil),          // 12: org.openfeed.InstrumentDefinition.SpreadLeg
	(*InstrumentDefinition_MaturityDate)(nil),       // 13: org.openfeed.InstrumentDefinition.MaturityDate
	(*InstrumentDefinition_Symbol)(nil),             // 14: org.openfeed.InstrumentDefinition.Symbol
	(*InstrumentDefinition_PriceFormat)(nil),        // 15: org.openfeed.InstrumentDefinition.PriceFormat
	(*InstrumentDefinition_CurrencyPair)(nil),       // 16: org.openfeed.InstrumentDefinition.CurrencyPair
}
var file_openfeed_instrument_proto_depIdxs = []int32{
	0,  // 0: org.openfeed.InstrumentDefinition.instrumentType:type_name -> org.openfeed.InstrumentDefinition.InstrumentType
	1,  // 1: org.openfeed.InstrumentDefinition.supportBookTypes:type_name -> org.openfeed.InstrumentDefinition.BookType
	8,  // 2: org.openfeed.InstrumentDefinition.schedule:type_name -> org.openfeed.InstrumentDefinition.Schedule
	10, // 3: org.openfeed.InstrumentDefinition.calendar:type_name -> org.openfeed.InstrumentDefinition.Calendar
	13, // 4: org.openfeed.InstrumentDefinition.symbolExpiration:type_name -> org.openfeed.InstrumentDefinition.MaturityDate
	4,  // 5: org.openfeed.InstrumentDefinition.state:type_name -> org.openfeed.InstrumentDefinition.State
	15, // 6: org.openfeed.InstrumentDefinition.priceFormat:type_name -> org.openfeed.InstrumentDefinition.PriceFormat
	15, // 7: org.openfeed.InstrumentDefinition.optionStrikePriceFormat:type_name -> org.openfeed.InstrumentDefinition.PriceFormat
	14, // 8: org.openfeed.InstrumentDefinition.symbols:type_name -> org.openfeed.InstrumentDefinition.Symbol
	2,  // 9: org.openfeed.InstrumentDefinition.optionType:type_name -> org.openfeed.InstrumentDefinition.OptionType
	3,  // 10: org.openfeed.InstrumentDefinition.optionStyle:type_name -> org.openfeed.InstrumentDefinition.OptionStyle
	12, // 11: org.openfeed.InstrumentDefinition.spreadLeg:type_name -> org.openfeed.InstrumentDefinition.SpreadLeg
	16, // 12: org.openfeed.InstrumentDefinition.currencyPair:type_name -> org.openfeed.InstrumentDefinition.CurrencyPair
	9,  // 13: org.openfeed.InstrumentDefinition.Schedule.sessions:type_name -> org.openfeed.InstrumentDefinition.TimeSpan
	11, // 14: org.openfeed.InstrumentDefinition.Calendar.events:type_name -> org.openfeed.InstrumentDefinition.Event
	5,  // 15: org.openfeed.InstrumentDefinition.Event.type:type_name -> org.openfeed.InstrumentDefinition.EventType
	6,  // 16: org.openfeed.InstrumentDefinition.PriceFormat.subFormat:type_name -> org.openfeed.InstrumentDefinition.PriceFormat.SubFormat
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_openfeed_instrument_proto_init() }
func file_openfeed_instrument_proto_init() {
	if File_openfeed_instrument_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_openfeed_instrument_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_instrument_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentDefinition_Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_instrument_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentDefinition_TimeSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_instrument_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentDefinition_Calendar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_instrument_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentDefinition_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_instrument_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentDefinition_SpreadLeg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_instrument_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentDefinition_MaturityDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_instrument_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentDefinition_Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_instrument_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentDefinition_PriceFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfeed_instrument_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentDefinition_CurrencyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openfeed_instrument_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openfeed_instrument_proto_goTypes,
		DependencyIndexes: file_openfeed_instrument_proto_depIdxs,
		EnumInfos:         file_openfeed_instrument_proto_enumTypes,
		MessageInfos:      file_openfeed_instrument_proto_msgTypes,
	}.Build()
	File_openfeed_instrument_proto = out.File
	file_openfeed_instrument_proto_rawDesc = nil
	file_openfeed_instrument_proto_goTypes = nil
	file_openfeed_instrument_proto_depIdxs = nil
}
